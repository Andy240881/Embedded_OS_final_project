
Embedded_OS_Lab2-2_P76091307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005494  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005664  08005664  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800566c  0800566c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e60  20000010  08005684  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e70  08005684  00022e70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ddc  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002792  00000000  00000000  00031e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001028  00000000  00000000  000345b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f00  00000000  00000000  000355d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002170e  00000000  00000000  000364d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c6a6  00000000  00000000  00057be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cffea  00000000  00000000  0006428c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004324  00000000  00000000  001342f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800560c 	.word	0x0800560c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800560c 	.word	0x0800560c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MEMS_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address,uint8_t data){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	460a      	mov	r2, r1
 80004da:	71fb      	strb	r3, [r7, #7]
 80004dc:	4613      	mov	r3, r2
 80004de:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2108      	movs	r1, #8
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <MEMS_Write+0x44>)
 80004e6:	f000 fe5b 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004ea:	1df9      	adds	r1, r7, #7
 80004ec:	230a      	movs	r3, #10
 80004ee:	2201      	movs	r2, #1
 80004f0:	4809      	ldr	r0, [pc, #36]	; (8000518 <MEMS_Write+0x48>)
 80004f2:	f001 fb5f 	bl	8001bb4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 80004f6:	1db9      	adds	r1, r7, #6
 80004f8:	230a      	movs	r3, #10
 80004fa:	2201      	movs	r2, #1
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <MEMS_Write+0x48>)
 80004fe:	f001 fb59 	bl	8001bb4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2108      	movs	r1, #8
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <MEMS_Write+0x44>)
 8000508:	f000 fe4a 	bl	80011a0 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000
 8000518:	20012d94 	.word	0x20012d94

0800051c <MEMS_Read>:
void MEMS_Read(uint8_t address,uint8_t *data){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	6039      	str	r1, [r7, #0]
 8000526:	71fb      	strb	r3, [r7, #7]
    address |= 0x80;
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800052e:	b2db      	uxtb	r3, r3
 8000530:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2108      	movs	r1, #8
 8000536:	480c      	ldr	r0, [pc, #48]	; (8000568 <MEMS_Read+0x4c>)
 8000538:	f000 fe32 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 800053c:	1df9      	adds	r1, r7, #7
 800053e:	230a      	movs	r3, #10
 8000540:	2201      	movs	r2, #1
 8000542:	480a      	ldr	r0, [pc, #40]	; (800056c <MEMS_Read+0x50>)
 8000544:	f001 fb36 	bl	8001bb4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,data,1,10);
 8000548:	230a      	movs	r3, #10
 800054a:	2201      	movs	r2, #1
 800054c:	6839      	ldr	r1, [r7, #0]
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <MEMS_Read+0x50>)
 8000550:	f001 fc64 	bl	8001e1c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2108      	movs	r1, #8
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <MEMS_Read+0x4c>)
 800055a:	f000 fe21 	bl	80011a0 <HAL_GPIO_WritePin>
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000
 800056c:	20012d94 	.word	0x20012d94

08000570 <MEMS_init>:
void MEMS_init(){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	MEMS_Write(0x21, 0x01);
 8000574:	2101      	movs	r1, #1
 8000576:	2021      	movs	r0, #33	; 0x21
 8000578:	f7ff ffaa 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x23, 0x48);
 800057c:	2148      	movs	r1, #72	; 0x48
 800057e:	2023      	movs	r0, #35	; 0x23
 8000580:	f7ff ffa6 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x20, 0x67);
 8000584:	2167      	movs	r1, #103	; 0x67
 8000586:	2020      	movs	r0, #32
 8000588:	f7ff ffa2 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x24, 0x00);
 800058c:	2100      	movs	r1, #0
 800058e:	2024      	movs	r0, #36	; 0x24
 8000590:	f7ff ff9e 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x57, 0x55);
 8000594:	2155      	movs	r1, #85	; 0x55
 8000596:	2057      	movs	r0, #87	; 0x57
 8000598:	f7ff ff9a 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x40, 0x05);
 800059c:	2105      	movs	r1, #5
 800059e:	2040      	movs	r0, #64	; 0x40
 80005a0:	f7ff ff96 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x41, 0x11);
 80005a4:	2111      	movs	r1, #17
 80005a6:	2041      	movs	r0, #65	; 0x41
 80005a8:	f7ff ff92 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x59, 0xFC);
 80005ac:	21fc      	movs	r1, #252	; 0xfc
 80005ae:	2059      	movs	r0, #89	; 0x59
 80005b0:	f7ff ff8e 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x5A, 0xFC);
 80005b4:	21fc      	movs	r1, #252	; 0xfc
 80005b6:	205a      	movs	r0, #90	; 0x5a
 80005b8:	f7ff ff8a 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x5B, 0x01);
 80005bc:	2101      	movs	r1, #1
 80005be:	205b      	movs	r0, #91	; 0x5b
 80005c0:	f7ff ff86 	bl	80004d0 <MEMS_Write>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 fb11 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f831 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 f8c3 	bl	8000760 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005da:	f000 f88b 	bl	80006f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MEMS_init();
 80005de:	f7ff ffc7 	bl	8000570 <MEMS_init>
  xSemaphore = xSemaphoreCreateBinary();
 80005e2:	2203      	movs	r2, #3
 80005e4:	2100      	movs	r1, #0
 80005e6:	2001      	movs	r0, #1
 80005e8:	f002 fb2e 	bl	8002c48 <xQueueGenericCreate>
 80005ec:	4602      	mov	r2, r0
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <main+0x5c>)
 80005f0:	601a      	str	r2, [r3, #0]
  xTaskCreate(green_blink,"task1",1024,(void *)1,1,NULL);
 80005f2:	2300      	movs	r3, #0
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000600:	4909      	ldr	r1, [pc, #36]	; (8000628 <main+0x60>)
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <main+0x64>)
 8000604:	f003 f8fe 	bl	8003804 <xTaskCreate>
  xTaskCreate(orange_blink,"task2",1024,(void *)1,3,NULL);
 8000608:	2300      	movs	r3, #0
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	2303      	movs	r3, #3
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2301      	movs	r3, #1
 8000612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000616:	4906      	ldr	r1, [pc, #24]	; (8000630 <main+0x68>)
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <main+0x6c>)
 800061a:	f003 f8f3 	bl	8003804 <xTaskCreate>
  vTaskStartScheduler();
 800061e:	f003 fa63 	bl	8003ae8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0x5a>
 8000624:	20012d90 	.word	0x20012d90
 8000628:	08005624 	.word	0x08005624
 800062c:	0800085d 	.word	0x0800085d
 8000630:	0800562c 	.word	0x0800562c
 8000634:	08000879 	.word	0x08000879

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f004 ffd7 	bl	80055fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b22      	ldr	r3, [pc, #136]	; (80006ec <SystemClock_Config+0xb4>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemClock_Config+0xb4>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <SystemClock_Config+0xb4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <SystemClock_Config+0xb8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <SystemClock_Config+0xb8>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <SystemClock_Config+0xb8>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fdc5 	bl	8001238 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006b4:	f000 f96a 	bl	800098c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f820 	bl	8001718 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006de:	f000 f955 	bl	800098c <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_SPI1_Init+0x64>)
 80006fa:	4a18      	ldr	r2, [pc, #96]	; (800075c <MX_SPI1_Init+0x68>)
 80006fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fe:	4b16      	ldr	r3, [pc, #88]	; (8000758 <MX_SPI1_Init+0x64>)
 8000700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_SPI1_Init+0x64>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_SPI1_Init+0x64>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_SPI1_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_SPI1_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_SPI1_Init+0x64>)
 8000720:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000724:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_SPI1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_SPI1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_SPI1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000738:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_SPI1_Init+0x64>)
 800073a:	2200      	movs	r2, #0
 800073c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_SPI1_Init+0x64>)
 8000740:	220a      	movs	r2, #10
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <MX_SPI1_Init+0x64>)
 8000746:	f001 f9d1 	bl	8001aec <HAL_SPI_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000750:	f000 f91c 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20012d94 	.word	0x20012d94
 800075c:	40013000 	.word	0x40013000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <MX_GPIO_Init+0xec>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a33      	ldr	r2, [pc, #204]	; (800084c <MX_GPIO_Init+0xec>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <MX_GPIO_Init+0xec>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b2d      	ldr	r3, [pc, #180]	; (800084c <MX_GPIO_Init+0xec>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a2c      	ldr	r2, [pc, #176]	; (800084c <MX_GPIO_Init+0xec>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2a      	ldr	r3, [pc, #168]	; (800084c <MX_GPIO_Init+0xec>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	4b26      	ldr	r3, [pc, #152]	; (800084c <MX_GPIO_Init+0xec>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a25      	ldr	r2, [pc, #148]	; (800084c <MX_GPIO_Init+0xec>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b23      	ldr	r3, [pc, #140]	; (800084c <MX_GPIO_Init+0xec>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	603b      	str	r3, [r7, #0]
 80007c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2108      	movs	r1, #8
 80007ce:	4820      	ldr	r0, [pc, #128]	; (8000850 <MX_GPIO_Init+0xf0>)
 80007d0:	f000 fce6 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80007da:	481e      	ldr	r0, [pc, #120]	; (8000854 <MX_GPIO_Init+0xf4>)
 80007dc:	f000 fce0 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007e0:	2308      	movs	r3, #8
 80007e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4816      	ldr	r0, [pc, #88]	; (8000850 <MX_GPIO_Init+0xf0>)
 80007f8:	f000 fb20 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80007fc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	480f      	ldr	r0, [pc, #60]	; (8000854 <MX_GPIO_Init+0xf4>)
 8000816:	f000 fb11 	bl	8000e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800081a:	2301      	movs	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_GPIO_Init+0xf8>)
 8000820:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000826:	f107 030c 	add.w	r3, r7, #12
 800082a:	4619      	mov	r1, r3
 800082c:	4808      	ldr	r0, [pc, #32]	; (8000850 <MX_GPIO_Init+0xf0>)
 800082e:	f000 fb05 	bl	8000e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000832:	2200      	movs	r2, #0
 8000834:	2106      	movs	r1, #6
 8000836:	2006      	movs	r0, #6
 8000838:	f000 fad6 	bl	8000de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800083c:	2006      	movs	r0, #6
 800083e:	f000 faef 	bl	8000e20 <HAL_NVIC_EnableIRQ>

}
 8000842:	bf00      	nop
 8000844:	3720      	adds	r7, #32
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40021000 	.word	0x40021000
 8000854:	40020c00 	.word	0x40020c00
 8000858:	10110000 	.word	0x10110000

0800085c <green_blink>:

/* USER CODE BEGIN 4 */
void green_blink()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	for(;;)
	{
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <green_blink+0x18>)
 8000866:	f000 fcb4 	bl	80011d2 <HAL_GPIO_TogglePin>
	  vTaskDelay(1000);
 800086a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800086e:	f003 f907 	bl	8003a80 <vTaskDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000872:	e7f5      	b.n	8000860 <green_blink+0x4>
 8000874:	40020c00 	.word	0x40020c00

08000878 <orange_blink>:
	}
}
void orange_blink()   //handler
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
	 for(;;)                         //interrupt is disabled until we execute MEMS_READ
	 {
		  int8_t data;
		  xSemaphoreTake(xSemaphore,portMAX_DELAY);
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <orange_blink+0x60>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fd30 	bl	80032ec <xQueueSemaphoreTake>

		  int i=0;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
		  for(i = 0;i<5;i++)
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	e016      	b.n	80008c4 <orange_blink+0x4c>
		  {
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800089c:	480f      	ldr	r0, [pc, #60]	; (80008dc <orange_blink+0x64>)
 800089e:	f000 fc7f 	bl	80011a0 <HAL_GPIO_WritePin>
			vTaskDelay(1000);
 80008a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a6:	f003 f8eb 	bl	8003a80 <vTaskDelay>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b0:	480a      	ldr	r0, [pc, #40]	; (80008dc <orange_blink+0x64>)
 80008b2:	f000 fc75 	bl	80011a0 <HAL_GPIO_WritePin>
			vTaskDelay(1000);
 80008b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ba:	f003 f8e1 	bl	8003a80 <vTaskDelay>
		  for(i = 0;i<5;i++)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	3301      	adds	r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b04      	cmp	r3, #4
 80008c8:	dde5      	ble.n	8000896 <orange_blink+0x1e>
		  }
		  MEMS_Read(0x5f,&data);                          //reset the register(enable interrupt)
 80008ca:	1cfb      	adds	r3, r7, #3
 80008cc:	4619      	mov	r1, r3
 80008ce:	205f      	movs	r0, #95	; 0x5f
 80008d0:	f7ff fe24 	bl	800051c <MEMS_Read>
	 {
 80008d4:	e7d3      	b.n	800087e <orange_blink+0x6>
 80008d6:	bf00      	nop
 80008d8:	20012d90 	.word	0x20012d90
 80008dc:	40020c00 	.word	0x40020c00

080008e0 <HAL_GPIO_EXTI_Callback>:



 }
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)   //ISR function
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	80fb      	strh	r3, [r7, #6]

       static portBASE_TYPE xHigherPriorityTaskWoken;
       xHigherPriorityTaskWoken=pdFALSE;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <HAL_GPIO_EXTI_Callback+0x78>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
       if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14))
 80008f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f4:	4819      	ldr	r0, [pc, #100]	; (800095c <HAL_GPIO_EXTI_Callback+0x7c>)
 80008f6:	f000 fc3b 	bl	8001170 <HAL_GPIO_ReadPin>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d006      	beq.n	800090e <HAL_GPIO_EXTI_Callback+0x2e>
       {
           HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000906:	4815      	ldr	r0, [pc, #84]	; (800095c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000908:	f000 fc4a 	bl	80011a0 <HAL_GPIO_WritePin>
 800090c:	e005      	b.n	800091a <HAL_GPIO_EXTI_Callback+0x3a>
       }
       else
       {
           HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000914:	4811      	ldr	r0, [pc, #68]	; (800095c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000916:	f000 fc43 	bl	80011a0 <HAL_GPIO_WritePin>
       }
       if(xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken) == pdTRUE){
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_GPIO_EXTI_Callback+0x80>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	490e      	ldr	r1, [pc, #56]	; (8000958 <HAL_GPIO_EXTI_Callback+0x78>)
 8000920:	4618      	mov	r0, r3
 8000922:	f002 fb7d 	bl	8003020 <xQueueGiveFromISR>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	d105      	bne.n	8000938 <HAL_GPIO_EXTI_Callback+0x58>
    	   HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000932:	480a      	ldr	r0, [pc, #40]	; (800095c <HAL_GPIO_EXTI_Callback+0x7c>)
 8000934:	f000 fc34 	bl	80011a0 <HAL_GPIO_WritePin>
       }

       portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <HAL_GPIO_EXTI_Callback+0x78>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d007      	beq.n	8000950 <HAL_GPIO_EXTI_Callback+0x70>
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_GPIO_EXTI_Callback+0x84>)
 8000942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	f3bf 8f4f 	dsb	sy
 800094c:	f3bf 8f6f 	isb	sy


}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000002c 	.word	0x2000002c
 800095c:	40020c00 	.word	0x40020c00
 8000960:	20012d90 	.word	0x20012d90
 8000964:	e000ed04 	.word	0xe000ed04

08000968 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d101      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800097a:	f000 f95d 	bl	8000c38 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40001400 	.word	0x40001400

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000992:	e7fe      	b.n	8000992 <Error_Handler+0x6>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <HAL_MspInit+0x4c>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x4c>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <HAL_SPI_MspInit+0x84>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d12b      	bne.n	8000a5e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a10      	ldr	r2, [pc, #64]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_SPI_MspInit+0x88>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a3e:	23e0      	movs	r3, #224	; 0xe0
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_SPI_MspInit+0x8c>)
 8000a5a:	f000 f9ef 	bl	8000e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40013000 	.word	0x40013000
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000

08000a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	2037      	movs	r0, #55	; 0x37
 8000a8a:	f000 f9ad 	bl	8000de8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000a8e:	2037      	movs	r0, #55	; 0x37
 8000a90:	f000 f9c6 	bl	8000e20 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <HAL_InitTick+0xa0>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_InitTick+0xa0>)
 8000a9e:	f043 0320 	orr.w	r3, r3, #32
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <HAL_InitTick+0xa0>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 0320 	and.w	r3, r3, #32
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ab0:	f107 0210 	add.w	r2, r7, #16
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 ffe4 	bl	8001a88 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ac0:	f000 ffce 	bl	8001a60 <HAL_RCC_GetPCLK1Freq>
 8000ac4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ac8:	4a13      	ldr	r2, [pc, #76]	; (8000b18 <HAL_InitTick+0xa4>)
 8000aca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ace:	0c9b      	lsrs	r3, r3, #18
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <HAL_InitTick+0xa8>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <HAL_InitTick+0xac>)
 8000ad8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <HAL_InitTick+0xa8>)
 8000adc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ae0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <HAL_InitTick+0xa8>)
 8000ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_InitTick+0xa8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <HAL_InitTick+0xa8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <HAL_InitTick+0xa8>)
 8000af6:	f001 fd4d 	bl	8002594 <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d104      	bne.n	8000b0a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000b00:	4806      	ldr	r0, [pc, #24]	; (8000b1c <HAL_InitTick+0xa8>)
 8000b02:	f001 fd7c 	bl	80025fe <HAL_TIM_Base_Start_IT>
 8000b06:	4603      	mov	r3, r0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3730      	adds	r7, #48	; 0x30
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40023800 	.word	0x40023800
 8000b18:	431bde83 	.word	0x431bde83
 8000b1c:	20012dec 	.word	0x20012dec
 8000b20:	40001400 	.word	0x40001400

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 fb57 	bl	8001208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <TIM7_IRQHandler+0x10>)
 8000b66:	f001 fd6e 	bl	8002646 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20012dec 	.word	0x20012dec

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <SystemInit+0x28>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <SystemInit+0x28>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SystemInit+0x28>)
 8000b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ba6:	e003      	b.n	8000bb0 <LoopCopyDataInit>

08000ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bae:	3104      	adds	r1, #4

08000bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb8:	d3f6      	bcc.n	8000ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bbc:	e002      	b.n	8000bc4 <LoopFillZerobss>

08000bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc0:	f842 3b04 	str.w	r3, [r2], #4

08000bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc8:	d3f9      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd3 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f004 fce5 	bl	800559c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fcf9 	bl	80005c8 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bdc:	08005674 	.word	0x08005674
  ldr  r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000be8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000bec:	20012e70 	.word	0x20012e70

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f8d8 	bl	8000dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f7ff ff26 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff feb4 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x20>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x24>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <HAL_IncTick+0x24>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20012e2c 	.word	0x20012e2c

08000c60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return uwTick;
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <HAL_GetTick+0x14>)
 8000c66:	681b      	ldr	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20012e2c 	.word	0x20012e2c

08000c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	db0b      	blt.n	8000d06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	f003 021f 	and.w	r2, r3, #31
 8000cf4:	4907      	ldr	r1, [pc, #28]	; (8000d14 <__NVIC_EnableIRQ+0x38>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	095b      	lsrs	r3, r3, #5
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100

08000d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	db0a      	blt.n	8000d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	490c      	ldr	r1, [pc, #48]	; (8000d64 <__NVIC_SetPriority+0x4c>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	0112      	lsls	r2, r2, #4
 8000d38:	b2d2      	uxtb	r2, r2
 8000d3a:	440b      	add	r3, r1
 8000d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d40:	e00a      	b.n	8000d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4908      	ldr	r1, [pc, #32]	; (8000d68 <__NVIC_SetPriority+0x50>)
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	f003 030f 	and.w	r3, r3, #15
 8000d4e:	3b04      	subs	r3, #4
 8000d50:	0112      	lsls	r2, r2, #4
 8000d52:	b2d2      	uxtb	r2, r2
 8000d54:	440b      	add	r3, r1
 8000d56:	761a      	strb	r2, [r3, #24]
}
 8000d58:	bf00      	nop
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000e100 	.word	0xe000e100
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b089      	sub	sp, #36	; 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f1c3 0307 	rsb	r3, r3, #7
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	bf28      	it	cs
 8000d8a:	2304      	movcs	r3, #4
 8000d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3304      	adds	r3, #4
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d902      	bls.n	8000d9c <NVIC_EncodePriority+0x30>
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3b03      	subs	r3, #3
 8000d9a:	e000      	b.n	8000d9e <NVIC_EncodePriority+0x32>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43da      	mvns	r2, r3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	401a      	ands	r2, r3
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbe:	43d9      	mvns	r1, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	4313      	orrs	r3, r2
         );
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3724      	adds	r7, #36	; 0x24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ff4c 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfa:	f7ff ff61 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	6978      	ldr	r0, [r7, #20]
 8000e06:	f7ff ffb1 	bl	8000d6c <NVIC_EncodePriority>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff80 	bl	8000d18 <__NVIC_SetPriority>
}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff54 	bl	8000cdc <__NVIC_EnableIRQ>
}
 8000e34:	bf00      	nop
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	; 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
 8000e56:	e16b      	b.n	8001130 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e58:	2201      	movs	r2, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	697a      	ldr	r2, [r7, #20]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	f040 815a 	bne.w	800112a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d00b      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8a:	2b11      	cmp	r3, #17
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b12      	cmp	r3, #18
 8000e94:	d130      	bne.n	8000ef8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0xfc>
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b12      	cmp	r3, #18
 8000f36:	d123      	bne.n	8000f80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	08da      	lsrs	r2, r3, #3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3208      	adds	r2, #8
 8000f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	220f      	movs	r2, #15
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	691a      	ldr	r2, [r3, #16]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	69b9      	ldr	r1, [r7, #24]
 8000f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f003 0203 	and.w	r2, r3, #3
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 80b4 	beq.w	800112a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <HAL_GPIO_Init+0x308>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a5e      	ldr	r2, [pc, #376]	; (8001144 <HAL_GPIO_Init+0x308>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b5c      	ldr	r3, [pc, #368]	; (8001144 <HAL_GPIO_Init+0x308>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fde:	4a5a      	ldr	r2, [pc, #360]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	220f      	movs	r2, #15
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a51      	ldr	r2, [pc, #324]	; (800114c <HAL_GPIO_Init+0x310>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d02b      	beq.n	8001062 <HAL_GPIO_Init+0x226>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a50      	ldr	r2, [pc, #320]	; (8001150 <HAL_GPIO_Init+0x314>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x222>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	; (8001154 <HAL_GPIO_Init+0x318>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x21e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <HAL_GPIO_Init+0x31c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x21a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <HAL_GPIO_Init+0x320>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x216>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	; (8001160 <HAL_GPIO_Init+0x324>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x212>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	; (8001164 <HAL_GPIO_Init+0x328>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x20e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <HAL_GPIO_Init+0x32c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x20a>
 8001042:	2307      	movs	r3, #7
 8001044:	e00e      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001046:	2308      	movs	r3, #8
 8001048:	e00c      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800104a:	2306      	movs	r3, #6
 800104c:	e00a      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800104e:	2305      	movs	r3, #5
 8001050:	e008      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001052:	2304      	movs	r3, #4
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001056:	2303      	movs	r3, #3
 8001058:	e004      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800105a:	2302      	movs	r3, #2
 800105c:	e002      	b.n	8001064 <HAL_GPIO_Init+0x228>
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_GPIO_Init+0x228>
 8001062:	2300      	movs	r3, #0
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	f002 0203 	and.w	r2, r2, #3
 800106a:	0092      	lsls	r2, r2, #2
 800106c:	4093      	lsls	r3, r2
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001074:	4934      	ldr	r1, [pc, #208]	; (8001148 <HAL_GPIO_Init+0x30c>)
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	3302      	adds	r3, #2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001082:	4b3a      	ldr	r3, [pc, #232]	; (800116c <HAL_GPIO_Init+0x330>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <HAL_GPIO_Init+0x330>)
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_GPIO_Init+0x330>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010d0:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_GPIO_Init+0x330>)
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010d6:	4b25      	ldr	r3, [pc, #148]	; (800116c <HAL_GPIO_Init+0x330>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <HAL_GPIO_Init+0x330>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_GPIO_Init+0x330>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001124:	4a11      	ldr	r2, [pc, #68]	; (800116c <HAL_GPIO_Init+0x330>)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3301      	adds	r3, #1
 800112e:	61fb      	str	r3, [r7, #28]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	2b0f      	cmp	r3, #15
 8001134:	f67f ae90 	bls.w	8000e58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001138:	bf00      	nop
 800113a:	3724      	adds	r7, #36	; 0x24
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800
 8001168:	40021c00 	.word	0x40021c00
 800116c:	40013c00 	.word	0x40013c00

08001170 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691a      	ldr	r2, [r3, #16]
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
 800118c:	e001      	b.n	8001192 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b083      	sub	sp, #12
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	460b      	mov	r3, r1
 80011dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	401a      	ands	r2, r3
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d104      	bne.n	80011f6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80011ec:	887b      	ldrh	r3, [r7, #2]
 80011ee:	041a      	lsls	r2, r3, #16
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80011f6:	887a      	ldrh	r2, [r7, #2]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	619a      	str	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001212:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	4013      	ands	r3, r2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d006      	beq.n	800122c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800121e:	4a05      	ldr	r2, [pc, #20]	; (8001234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fb5a 	bl	80008e0 <HAL_GPIO_EXTI_Callback>
  }
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e25b      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001256:	4ba3      	ldr	r3, [pc, #652]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b04      	cmp	r3, #4
 8001260:	d00c      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4ba0      	ldr	r3, [pc, #640]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b9d      	ldr	r3, [pc, #628]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4b99      	ldr	r3, [pc, #612]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <HAL_RCC_OscConfig+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d157      	bne.n	8001340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e236      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x74>
 800129e:	4b91      	ldr	r3, [pc, #580]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a90      	ldr	r2, [pc, #576]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x98>
 80012b6:	4b8b      	ldr	r3, [pc, #556]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a8a      	ldr	r2, [pc, #552]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b88      	ldr	r3, [pc, #544]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a87      	ldr	r2, [pc, #540]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012d0:	4b84      	ldr	r3, [pc, #528]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a83      	ldr	r2, [pc, #524]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b81      	ldr	r3, [pc, #516]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a80      	ldr	r2, [pc, #512]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fcb6 	bl	8000c60 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fcb2 	bl	8000c60 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e1fb      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b76      	ldr	r3, [pc, #472]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xc0>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fca2 	bl	8000c60 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fc9e 	bl	8000c60 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1e7      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b6c      	ldr	r3, [pc, #432]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0xe8>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134e:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b62      	ldr	r3, [pc, #392]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b5f      	ldr	r3, [pc, #380]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b5c      	ldr	r3, [pc, #368]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1bb      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b56      	ldr	r3, [pc, #344]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4952      	ldr	r1, [pc, #328]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <HAL_RCC_OscConfig+0x2b0>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fc57 	bl	8000c60 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fc53 	bl	8000c60 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e19c      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b46      	ldr	r3, [pc, #280]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4940      	ldr	r1, [pc, #256]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_RCC_OscConfig+0x2b0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc36 	bl	8000c60 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc32 	bl	8000c60 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e17b      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d030      	beq.n	8001484 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b30      	ldr	r3, [pc, #192]	; (80014ec <HAL_RCC_OscConfig+0x2b4>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fc16 	bl	8000c60 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fc12 	bl	8000c60 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e15b      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800144c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
 8001456:	e015      	b.n	8001484 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_RCC_OscConfig+0x2b4>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fbff 	bl	8000c60 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fbfb 	bl	8000c60 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e144      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 800147a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f0      	bne.n	8001466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a0 	beq.w	80015d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10f      	bne.n	80014c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014be:	2301      	movs	r3, #1
 80014c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_RCC_OscConfig+0x2b8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d121      	bne.n	8001512 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_RCC_OscConfig+0x2b8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_RCC_OscConfig+0x2b8>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014da:	f7ff fbc1 	bl	8000c60 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e0:	e011      	b.n	8001506 <HAL_RCC_OscConfig+0x2ce>
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	42470000 	.word	0x42470000
 80014ec:	42470e80 	.word	0x42470e80
 80014f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f4:	f7ff fbb4 	bl	8000c60 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e0fd      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001506:	4b81      	ldr	r3, [pc, #516]	; (800170c <HAL_RCC_OscConfig+0x4d4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x2f0>
 800151a:	4b7d      	ldr	r3, [pc, #500]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 800151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151e:	4a7c      	ldr	r2, [pc, #496]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6713      	str	r3, [r2, #112]	; 0x70
 8001526:	e01c      	b.n	8001562 <HAL_RCC_OscConfig+0x32a>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b05      	cmp	r3, #5
 800152e:	d10c      	bne.n	800154a <HAL_RCC_OscConfig+0x312>
 8001530:	4b77      	ldr	r3, [pc, #476]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 8001532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001534:	4a76      	ldr	r2, [pc, #472]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 8001536:	f043 0304 	orr.w	r3, r3, #4
 800153a:	6713      	str	r3, [r2, #112]	; 0x70
 800153c:	4b74      	ldr	r3, [pc, #464]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 800153e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001540:	4a73      	ldr	r2, [pc, #460]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6713      	str	r3, [r2, #112]	; 0x70
 8001548:	e00b      	b.n	8001562 <HAL_RCC_OscConfig+0x32a>
 800154a:	4b71      	ldr	r3, [pc, #452]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	4a70      	ldr	r2, [pc, #448]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6713      	str	r3, [r2, #112]	; 0x70
 8001556:	4b6e      	ldr	r3, [pc, #440]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 8001558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155a:	4a6d      	ldr	r2, [pc, #436]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 800155c:	f023 0304 	bic.w	r3, r3, #4
 8001560:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d015      	beq.n	8001596 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff fb79 	bl	8000c60 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff fb75 	bl	8000c60 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e0bc      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001588:	4b61      	ldr	r3, [pc, #388]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 800158a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0ee      	beq.n	8001572 <HAL_RCC_OscConfig+0x33a>
 8001594:	e014      	b.n	80015c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001596:	f7ff fb63 	bl	8000c60 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159c:	e00a      	b.n	80015b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159e:	f7ff fb5f 	bl	8000c60 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e0a6      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1ee      	bne.n	800159e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d105      	bne.n	80015d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c6:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a51      	ldr	r2, [pc, #324]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 80015cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8092 	beq.w	8001700 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015dc:	4b4c      	ldr	r3, [pc, #304]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d05c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d141      	bne.n	8001674 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f0:	4b48      	ldr	r3, [pc, #288]	; (8001714 <HAL_RCC_OscConfig+0x4dc>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fb33 	bl	8000c60 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff fb2f 	bl	8000c60 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e078      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f0      	bne.n	80015fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69da      	ldr	r2, [r3, #28]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	019b      	lsls	r3, r3, #6
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001632:	085b      	lsrs	r3, r3, #1
 8001634:	3b01      	subs	r3, #1
 8001636:	041b      	lsls	r3, r3, #16
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	061b      	lsls	r3, r3, #24
 8001640:	4933      	ldr	r1, [pc, #204]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fb08 	bl	8000c60 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001654:	f7ff fb04 	bl	8000c60 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e04d      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x41c>
 8001672:	e045      	b.n	8001700 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001674:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_RCC_OscConfig+0x4dc>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff faf1 	bl	8000c60 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001682:	f7ff faed 	bl	8000c60 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e036      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001694:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x44a>
 80016a0:	e02e      	b.n	8001700 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d101      	bne.n	80016ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e029      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_RCC_OscConfig+0x4d8>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d11c      	bne.n	80016fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d115      	bne.n	80016fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d6:	4013      	ands	r3, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016dc:	4293      	cmp	r3, r2
 80016de:	d10d      	bne.n	80016fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d106      	bne.n	80016fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40007000 	.word	0x40007000
 8001710:	40023800 	.word	0x40023800
 8001714:	42470060 	.word	0x42470060

08001718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0cc      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 030f 	and.w	r3, r3, #15
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d90c      	bls.n	8001754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b65      	ldr	r3, [pc, #404]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001742:	4b63      	ldr	r3, [pc, #396]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e0b8      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800176c:	4b59      	ldr	r3, [pc, #356]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	4a58      	ldr	r2, [pc, #352]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001784:	4b53      	ldr	r3, [pc, #332]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800178e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001790:	4b50      	ldr	r3, [pc, #320]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	494d      	ldr	r1, [pc, #308]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d044      	beq.n	8001838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d119      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e07f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e06f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e067      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f6:	4b37      	ldr	r3, [pc, #220]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f023 0203 	bic.w	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4934      	ldr	r1, [pc, #208]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	4313      	orrs	r3, r2
 8001806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001808:	f7ff fa2a 	bl	8000c60 <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	e00a      	b.n	8001826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7ff fa26 	bl	8000c60 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e04f      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 020c 	and.w	r2, r3, #12
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	429a      	cmp	r2, r3
 8001836:	d1eb      	bne.n	8001810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d20c      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	429a      	cmp	r2, r3
 800185a:	d001      	beq.n	8001860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e032      	b.n	80018c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	2b00      	cmp	r3, #0
 800186a:	d008      	beq.n	800187e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	4916      	ldr	r1, [pc, #88]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	490e      	ldr	r1, [pc, #56]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800189e:	f000 f821 	bl	80018e4 <HAL_RCC_GetSysClockFreq>
 80018a2:	4601      	mov	r1, r0
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	f003 030f 	and.w	r3, r3, #15
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	5cd3      	ldrb	r3, [r2, r3]
 80018b2:	fa21 f303 	lsr.w	r3, r1, r3
 80018b6:	4a09      	ldr	r2, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff f8d8 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00
 80018d4:	40023800 	.word	0x40023800
 80018d8:	0800564c 	.word	0x0800564c
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	2300      	movs	r3, #0
 80018f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018fa:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x158>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b04      	cmp	r3, #4
 8001904:	d007      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x32>
 8001906:	2b08      	cmp	r3, #8
 8001908:	d008      	beq.n	800191c <HAL_RCC_GetSysClockFreq+0x38>
 800190a:	2b00      	cmp	r3, #0
 800190c:	f040 808d 	bne.w	8001a2a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001910:	4b4b      	ldr	r3, [pc, #300]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001912:	60bb      	str	r3, [r7, #8]
       break;
 8001914:	e08c      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001916:	4b4b      	ldr	r3, [pc, #300]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x160>)
 8001918:	60bb      	str	r3, [r7, #8]
      break;
 800191a:	e089      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800191c:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x158>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001924:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001926:	4b45      	ldr	r3, [pc, #276]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x158>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d023      	beq.n	800197a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x158>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	f04f 0400 	mov.w	r4, #0
 800193c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	ea03 0501 	and.w	r5, r3, r1
 8001948:	ea04 0602 	and.w	r6, r4, r2
 800194c:	4a3d      	ldr	r2, [pc, #244]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x160>)
 800194e:	fb02 f106 	mul.w	r1, r2, r6
 8001952:	2200      	movs	r2, #0
 8001954:	fb02 f205 	mul.w	r2, r2, r5
 8001958:	440a      	add	r2, r1
 800195a:	493a      	ldr	r1, [pc, #232]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x160>)
 800195c:	fba5 0101 	umull	r0, r1, r5, r1
 8001960:	1853      	adds	r3, r2, r1
 8001962:	4619      	mov	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f04f 0400 	mov.w	r4, #0
 800196a:	461a      	mov	r2, r3
 800196c:	4623      	mov	r3, r4
 800196e:	f7fe fc2f 	bl	80001d0 <__aeabi_uldivmod>
 8001972:	4603      	mov	r3, r0
 8001974:	460c      	mov	r4, r1
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e049      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x158>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	099b      	lsrs	r3, r3, #6
 8001980:	f04f 0400 	mov.w	r4, #0
 8001984:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	ea03 0501 	and.w	r5, r3, r1
 8001990:	ea04 0602 	and.w	r6, r4, r2
 8001994:	4629      	mov	r1, r5
 8001996:	4632      	mov	r2, r6
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	f04f 0400 	mov.w	r4, #0
 80019a0:	0154      	lsls	r4, r2, #5
 80019a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019a6:	014b      	lsls	r3, r1, #5
 80019a8:	4619      	mov	r1, r3
 80019aa:	4622      	mov	r2, r4
 80019ac:	1b49      	subs	r1, r1, r5
 80019ae:	eb62 0206 	sbc.w	r2, r2, r6
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	f04f 0400 	mov.w	r4, #0
 80019ba:	0194      	lsls	r4, r2, #6
 80019bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019c0:	018b      	lsls	r3, r1, #6
 80019c2:	1a5b      	subs	r3, r3, r1
 80019c4:	eb64 0402 	sbc.w	r4, r4, r2
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	00e2      	lsls	r2, r4, #3
 80019d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019d6:	00d9      	lsls	r1, r3, #3
 80019d8:	460b      	mov	r3, r1
 80019da:	4614      	mov	r4, r2
 80019dc:	195b      	adds	r3, r3, r5
 80019de:	eb44 0406 	adc.w	r4, r4, r6
 80019e2:	f04f 0100 	mov.w	r1, #0
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	02a2      	lsls	r2, r4, #10
 80019ec:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019f0:	0299      	lsls	r1, r3, #10
 80019f2:	460b      	mov	r3, r1
 80019f4:	4614      	mov	r4, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	4621      	mov	r1, r4
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f04f 0400 	mov.w	r4, #0
 8001a00:	461a      	mov	r2, r3
 8001a02:	4623      	mov	r3, r4
 8001a04:	f7fe fbe4 	bl	80001d0 <__aeabi_uldivmod>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x158>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	0c1b      	lsrs	r3, r3, #16
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	3301      	adds	r3, #1
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a26:	60bb      	str	r3, [r7, #8]
      break;
 8001a28:	e002      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a2c:	60bb      	str	r3, [r7, #8]
      break;
 8001a2e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a30:	68bb      	ldr	r3, [r7, #8]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	017d7840 	.word	0x017d7840

08001a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000000 	.word	0x20000000

08001a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a64:	f7ff fff0 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a68:	4601      	mov	r1, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0a9b      	lsrs	r3, r3, #10
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4a03      	ldr	r2, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a76:	5cd3      	ldrb	r3, [r2, r3]
 8001a78:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	0800565c 	.word	0x0800565c

08001a88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	220f      	movs	r2, #15
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0203 	and.w	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	08db      	lsrs	r3, r3, #3
 8001ac2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <HAL_RCC_GetClockConfig+0x60>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 020f 	and.w	r2, r3, #15
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	601a      	str	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e056      	b.n	8001bac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d106      	bne.n	8001b1e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7fe ff63 	bl	80009e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2202      	movs	r2, #2
 8001b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b34:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	ea42 0103 	orr.w	r1, r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	0c1b      	lsrs	r3, r3, #16
 8001b7c:	f003 0104 	and.w	r1, r3, #4
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69da      	ldr	r2, [r3, #28]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_SPI_Transmit+0x22>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e11e      	b.n	8001e14 <HAL_SPI_Transmit+0x260>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bde:	f7ff f83f 	bl	8000c60 <HAL_GetTick>
 8001be2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d002      	beq.n	8001bfa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001bf8:	e103      	b.n	8001e02 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <HAL_SPI_Transmit+0x52>
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c0a:	e0fa      	b.n	8001e02 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2203      	movs	r2, #3
 8001c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	88fa      	ldrh	r2, [r7, #6]
 8001c24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c52:	d107      	bne.n	8001c64 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c6e:	2b40      	cmp	r3, #64	; 0x40
 8001c70:	d007      	beq.n	8001c82 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c8a:	d14b      	bne.n	8001d24 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_SPI_Transmit+0xe6>
 8001c94:	8afb      	ldrh	r3, [r7, #22]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d13e      	bne.n	8001d18 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	881a      	ldrh	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	1c9a      	adds	r2, r3, #2
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001cbe:	e02b      	b.n	8001d18 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d112      	bne.n	8001cf4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	881a      	ldrh	r2, [r3, #0]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	1c9a      	adds	r2, r3, #2
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	3b01      	subs	r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cf2:	e011      	b.n	8001d18 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cf4:	f7fe ffb4 	bl	8000c60 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d803      	bhi.n	8001d0c <HAL_SPI_Transmit+0x158>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d0a:	d102      	bne.n	8001d12 <HAL_SPI_Transmit+0x15e>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d16:	e074      	b.n	8001e02 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1ce      	bne.n	8001cc0 <HAL_SPI_Transmit+0x10c>
 8001d22:	e04c      	b.n	8001dbe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <HAL_SPI_Transmit+0x17e>
 8001d2c:	8afb      	ldrh	r3, [r7, #22]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d140      	bne.n	8001db4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	330c      	adds	r3, #12
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001d58:	e02c      	b.n	8001db4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d113      	bne.n	8001d90 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	330c      	adds	r3, #12
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	1c5a      	adds	r2, r3, #1
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	3b01      	subs	r3, #1
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d8e:	e011      	b.n	8001db4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d90:	f7fe ff66 	bl	8000c60 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d803      	bhi.n	8001da8 <HAL_SPI_Transmit+0x1f4>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001da6:	d102      	bne.n	8001dae <HAL_SPI_Transmit+0x1fa>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d102      	bne.n	8001db4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001db2:	e026      	b.n	8001e02 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1cd      	bne.n	8001d5a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	6839      	ldr	r1, [r7, #0]
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fba4 	bl	8002510 <SPI_EndRxTxTransaction>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d002      	beq.n	8001e00 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	77fb      	strb	r3, [r7, #31]
 8001dfe:	e000      	b.n	8001e02 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001e00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001e12:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3720      	adds	r7, #32
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af02      	add	r7, sp, #8
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e38:	d112      	bne.n	8001e60 <HAL_SPI_Receive+0x44>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10e      	bne.n	8001e60 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2204      	movs	r2, #4
 8001e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001e4a:	88fa      	ldrh	r2, [r7, #6]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f8e9 	bl	800202e <HAL_SPI_TransmitReceive>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	e0e2      	b.n	8002026 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_SPI_Receive+0x52>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e0db      	b.n	8002026 <HAL_SPI_Receive+0x20a>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e76:	f7fe fef3 	bl	8000c60 <HAL_GetTick>
 8001e7a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d002      	beq.n	8001e8e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e8c:	e0c2      	b.n	8002014 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <HAL_SPI_Receive+0x7e>
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d102      	bne.n	8001ea0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001e9e:	e0b9      	b.n	8002014 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	88fa      	ldrh	r2, [r7, #6]
 8001eb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	88fa      	ldrh	r2, [r7, #6]
 8001ebe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ee6:	d107      	bne.n	8001ef8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f02:	2b40      	cmp	r3, #64	; 0x40
 8001f04:	d007      	beq.n	8001f16 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d162      	bne.n	8001fe4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001f1e:	e02e      	b.n	8001f7e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d115      	bne.n	8001f5a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f103 020c 	add.w	r2, r3, #12
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	7812      	ldrb	r2, [r2, #0]
 8001f3c:	b2d2      	uxtb	r2, r2
 8001f3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f58:	e011      	b.n	8001f7e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f5a:	f7fe fe81 	bl	8000c60 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d803      	bhi.n	8001f72 <HAL_SPI_Receive+0x156>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f70:	d102      	bne.n	8001f78 <HAL_SPI_Receive+0x15c>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f7c:	e04a      	b.n	8002014 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1cb      	bne.n	8001f20 <HAL_SPI_Receive+0x104>
 8001f88:	e031      	b.n	8001fee <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d113      	bne.n	8001fc0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	1c9a      	adds	r2, r3, #2
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001fbe:	e011      	b.n	8001fe4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fc0:	f7fe fe4e 	bl	8000c60 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d803      	bhi.n	8001fd8 <HAL_SPI_Receive+0x1bc>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fd6:	d102      	bne.n	8001fde <HAL_SPI_Receive+0x1c2>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d102      	bne.n	8001fe4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001fe2:	e017      	b.n	8002014 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1cd      	bne.n	8001f8a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	6839      	ldr	r1, [r7, #0]
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fa27 	bl	8002446 <SPI_EndRxTransaction>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2220      	movs	r2, #32
 8002002:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	75fb      	strb	r3, [r7, #23]
 8002010:	e000      	b.n	8002014 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002012:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002024:	7dfb      	ldrb	r3, [r7, #23]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b08c      	sub	sp, #48	; 0x30
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800203c:	2301      	movs	r3, #1
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_SPI_TransmitReceive+0x26>
 8002050:	2302      	movs	r3, #2
 8002052:	e18a      	b.n	800236a <HAL_SPI_TransmitReceive+0x33c>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800205c:	f7fe fe00 	bl	8000c60 <HAL_GetTick>
 8002060:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002076:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800207a:	2b01      	cmp	r3, #1
 800207c:	d00f      	beq.n	800209e <HAL_SPI_TransmitReceive+0x70>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002084:	d107      	bne.n	8002096 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d103      	bne.n	8002096 <HAL_SPI_TransmitReceive+0x68>
 800208e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002092:	2b04      	cmp	r3, #4
 8002094:	d003      	beq.n	800209e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002096:	2302      	movs	r3, #2
 8002098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800209c:	e15b      	b.n	8002356 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_SPI_TransmitReceive+0x82>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_SPI_TransmitReceive+0x82>
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d103      	bne.n	80020b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020b6:	e14e      	b.n	8002356 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d003      	beq.n	80020cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2205      	movs	r2, #5
 80020c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	887a      	ldrh	r2, [r7, #2]
 80020e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	887a      	ldrh	r2, [r7, #2]
 80020ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d007      	beq.n	8002120 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800211e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002128:	d178      	bne.n	800221c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <HAL_SPI_TransmitReceive+0x10a>
 8002132:	8b7b      	ldrh	r3, [r7, #26]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d166      	bne.n	8002206 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	881a      	ldrh	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	1c9a      	adds	r2, r3, #2
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800215c:	e053      	b.n	8002206 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b02      	cmp	r3, #2
 800216a:	d11b      	bne.n	80021a4 <HAL_SPI_TransmitReceive+0x176>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002170:	b29b      	uxth	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d016      	beq.n	80021a4 <HAL_SPI_TransmitReceive+0x176>
 8002176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d113      	bne.n	80021a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	1c9a      	adds	r2, r3, #2
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002196:	b29b      	uxth	r3, r3
 8002198:	3b01      	subs	r3, #1
 800219a:	b29a      	uxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d119      	bne.n	80021e6 <HAL_SPI_TransmitReceive+0x1b8>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d014      	beq.n	80021e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c6:	b292      	uxth	r2, r2
 80021c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	1c9a      	adds	r2, r3, #2
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021e6:	f7fe fd3b 	bl	8000c60 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d807      	bhi.n	8002206 <HAL_SPI_TransmitReceive+0x1d8>
 80021f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021fc:	d003      	beq.n	8002206 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002204:	e0a7      	b.n	8002356 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1a6      	bne.n	800215e <HAL_SPI_TransmitReceive+0x130>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1a1      	bne.n	800215e <HAL_SPI_TransmitReceive+0x130>
 800221a:	e07c      	b.n	8002316 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_SPI_TransmitReceive+0x1fc>
 8002224:	8b7b      	ldrh	r3, [r7, #26]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d16b      	bne.n	8002302 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	330c      	adds	r3, #12
 8002234:	7812      	ldrb	r2, [r2, #0]
 8002236:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002246:	b29b      	uxth	r3, r3
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002250:	e057      	b.n	8002302 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b02      	cmp	r3, #2
 800225e:	d11c      	bne.n	800229a <HAL_SPI_TransmitReceive+0x26c>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d017      	beq.n	800229a <HAL_SPI_TransmitReceive+0x26c>
 800226a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d114      	bne.n	800229a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	330c      	adds	r3, #12
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d119      	bne.n	80022dc <HAL_SPI_TransmitReceive+0x2ae>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d014      	beq.n	80022dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022d8:	2301      	movs	r3, #1
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022dc:	f7fe fcc0 	bl	8000c60 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d803      	bhi.n	80022f4 <HAL_SPI_TransmitReceive+0x2c6>
 80022ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022f2:	d102      	bne.n	80022fa <HAL_SPI_TransmitReceive+0x2cc>
 80022f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d103      	bne.n	8002302 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002300:	e029      	b.n	8002356 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002306:	b29b      	uxth	r3, r3
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1a2      	bne.n	8002252 <HAL_SPI_TransmitReceive+0x224>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002310:	b29b      	uxth	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d19d      	bne.n	8002252 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f8f8 	bl	8002510 <SPI_EndRxTxTransaction>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d006      	beq.n	8002334 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002332:	e010      	b.n	8002356 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10b      	bne.n	8002354 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	e000      	b.n	8002356 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002354:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800236a:	4618      	mov	r0, r3
 800236c:	3730      	adds	r7, #48	; 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4613      	mov	r3, r2
 8002380:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002382:	e04c      	b.n	800241e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800238a:	d048      	beq.n	800241e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800238c:	f7fe fc68 	bl	8000c60 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d902      	bls.n	80023a2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d13d      	bne.n	800241e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023ba:	d111      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c4:	d004      	beq.n	80023d0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ce:	d107      	bne.n	80023e0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e8:	d10f      	bne.n	800240a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002408:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e00f      	b.n	800243e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4013      	ands	r3, r2
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	429a      	cmp	r2, r3
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	429a      	cmp	r2, r3
 800243a:	d1a3      	bne.n	8002384 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af02      	add	r7, sp, #8
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800245a:	d111      	bne.n	8002480 <SPI_EndRxTransaction+0x3a>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002464:	d004      	beq.n	8002470 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800246e:	d107      	bne.n	8002480 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800247e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002488:	d12a      	bne.n	80024e0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002492:	d012      	beq.n	80024ba <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2200      	movs	r2, #0
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f7ff ff67 	bl	8002372 <SPI_WaitFlagStateUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d02d      	beq.n	8002506 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f043 0220 	orr.w	r2, r3, #32
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e026      	b.n	8002508 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2200      	movs	r2, #0
 80024c2:	2101      	movs	r1, #1
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff ff54 	bl	8002372 <SPI_WaitFlagStateUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01a      	beq.n	8002506 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e013      	b.n	8002508 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	2200      	movs	r2, #0
 80024e8:	2101      	movs	r1, #1
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f7ff ff41 	bl	8002372 <SPI_WaitFlagStateUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fa:	f043 0220 	orr.w	r2, r3, #32
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e000      	b.n	8002508 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800251c:	4b1b      	ldr	r3, [pc, #108]	; (800258c <SPI_EndRxTxTransaction+0x7c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <SPI_EndRxTxTransaction+0x80>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	0d5b      	lsrs	r3, r3, #21
 8002528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800252c:	fb02 f303 	mul.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800253a:	d112      	bne.n	8002562 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2200      	movs	r2, #0
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7ff ff13 	bl	8002372 <SPI_WaitFlagStateUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d016      	beq.n	8002580 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f043 0220 	orr.w	r2, r3, #32
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e00f      	b.n	8002582 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3b01      	subs	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d0f2      	beq.n	8002562 <SPI_EndRxTxTransaction+0x52>
 800257c:	e000      	b.n	8002580 <SPI_EndRxTxTransaction+0x70>
        break;
 800257e:	bf00      	nop
  }

  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000000 	.word	0x20000000
 8002590:	165e9f81 	.word	0x165e9f81

08002594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e01d      	b.n	80025e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d106      	bne.n	80025c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f815 	bl	80025ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2202      	movs	r2, #2
 80025c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3304      	adds	r3, #4
 80025d0:	4619      	mov	r1, r3
 80025d2:	4610      	mov	r0, r2
 80025d4:	f000 f968 	bl	80028a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b085      	sub	sp, #20
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d007      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	d122      	bne.n	80026a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d11b      	bne.n	80026a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f06f 0202 	mvn.w	r2, #2
 8002672:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 f8ee 	bl	800286a <HAL_TIM_IC_CaptureCallback>
 800268e:	e005      	b.n	800269c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f8e0 	bl	8002856 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f8f1 	bl	800287e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d122      	bne.n	80026f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d11b      	bne.n	80026f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f06f 0204 	mvn.w	r2, #4
 80026c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f8c4 	bl	800286a <HAL_TIM_IC_CaptureCallback>
 80026e2:	e005      	b.n	80026f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f8b6 	bl	8002856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8c7 	bl	800287e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f003 0308 	and.w	r3, r3, #8
 8002700:	2b08      	cmp	r3, #8
 8002702:	d122      	bne.n	800274a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b08      	cmp	r3, #8
 8002710:	d11b      	bne.n	800274a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f06f 0208 	mvn.w	r2, #8
 800271a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2204      	movs	r2, #4
 8002720:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f89a 	bl	800286a <HAL_TIM_IC_CaptureCallback>
 8002736:	e005      	b.n	8002744 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f88c 	bl	8002856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f89d 	bl	800287e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b10      	cmp	r3, #16
 8002756:	d122      	bne.n	800279e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d11b      	bne.n	800279e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f06f 0210 	mvn.w	r2, #16
 800276e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2208      	movs	r2, #8
 8002774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f870 	bl	800286a <HAL_TIM_IC_CaptureCallback>
 800278a:	e005      	b.n	8002798 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f862 	bl	8002856 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f873 	bl	800287e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d10e      	bne.n	80027ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d107      	bne.n	80027ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f06f 0201 	mvn.w	r2, #1
 80027c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7fe f8cf 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d4:	2b80      	cmp	r3, #128	; 0x80
 80027d6:	d10e      	bne.n	80027f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b80      	cmp	r3, #128	; 0x80
 80027e4:	d107      	bne.n	80027f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f903 	bl	80029fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	d10e      	bne.n	8002822 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d107      	bne.n	8002822 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800281a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f838 	bl	8002892 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f003 0320 	and.w	r3, r3, #32
 800282c:	2b20      	cmp	r3, #32
 800282e:	d10e      	bne.n	800284e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b20      	cmp	r3, #32
 800283c:	d107      	bne.n	800284e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f06f 0220 	mvn.w	r2, #32
 8002846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f8cd 	bl	80029e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a40      	ldr	r2, [pc, #256]	; (80029bc <TIM_Base_SetConfig+0x114>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <TIM_Base_SetConfig+0x40>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c6:	d00f      	beq.n	80028e8 <TIM_Base_SetConfig+0x40>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a3d      	ldr	r2, [pc, #244]	; (80029c0 <TIM_Base_SetConfig+0x118>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d00b      	beq.n	80028e8 <TIM_Base_SetConfig+0x40>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a3c      	ldr	r2, [pc, #240]	; (80029c4 <TIM_Base_SetConfig+0x11c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d007      	beq.n	80028e8 <TIM_Base_SetConfig+0x40>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a3b      	ldr	r2, [pc, #236]	; (80029c8 <TIM_Base_SetConfig+0x120>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d003      	beq.n	80028e8 <TIM_Base_SetConfig+0x40>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <TIM_Base_SetConfig+0x124>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d108      	bne.n	80028fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a2f      	ldr	r2, [pc, #188]	; (80029bc <TIM_Base_SetConfig+0x114>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02b      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002908:	d027      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a2c      	ldr	r2, [pc, #176]	; (80029c0 <TIM_Base_SetConfig+0x118>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d023      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a2b      	ldr	r2, [pc, #172]	; (80029c4 <TIM_Base_SetConfig+0x11c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01f      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a2a      	ldr	r2, [pc, #168]	; (80029c8 <TIM_Base_SetConfig+0x120>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01b      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a29      	ldr	r2, [pc, #164]	; (80029cc <TIM_Base_SetConfig+0x124>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d017      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a28      	ldr	r2, [pc, #160]	; (80029d0 <TIM_Base_SetConfig+0x128>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a27      	ldr	r2, [pc, #156]	; (80029d4 <TIM_Base_SetConfig+0x12c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00f      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <TIM_Base_SetConfig+0x130>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a25      	ldr	r2, [pc, #148]	; (80029dc <TIM_Base_SetConfig+0x134>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <TIM_Base_SetConfig+0x138>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <TIM_Base_SetConfig+0xb2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <TIM_Base_SetConfig+0x13c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <TIM_Base_SetConfig+0x114>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d003      	beq.n	80029a0 <TIM_Base_SetConfig+0xf8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a0c      	ldr	r2, [pc, #48]	; (80029cc <TIM_Base_SetConfig+0x124>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d103      	bne.n	80029a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	615a      	str	r2, [r3, #20]
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	40010000 	.word	0x40010000
 80029c0:	40000400 	.word	0x40000400
 80029c4:	40000800 	.word	0x40000800
 80029c8:	40000c00 	.word	0x40000c00
 80029cc:	40010400 	.word	0x40010400
 80029d0:	40014000 	.word	0x40014000
 80029d4:	40014400 	.word	0x40014400
 80029d8:	40014800 	.word	0x40014800
 80029dc:	40001800 	.word	0x40001800
 80029e0:	40001c00 	.word	0x40001c00
 80029e4:	40002000 	.word	0x40002000

080029e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f103 0208 	add.w	r2, r3, #8
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f103 0208 	add.w	r2, r3, #8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f103 0208 	add.w	r2, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b085      	sub	sp, #20
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	601a      	str	r2, [r3, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ac8:	d103      	bne.n	8002ad2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e00c      	b.n	8002aec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3308      	adds	r3, #8
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	e002      	b.n	8002ae0 <vListInsert+0x2e>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d2f6      	bcs.n	8002ada <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	601a      	str	r2, [r3, #0]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6892      	ldr	r2, [r2, #8]
 8002b3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6852      	ldr	r2, [r2, #4]
 8002b44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d103      	bne.n	8002b58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	1e5a      	subs	r2, r3, #1
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	e7fe      	b.n	8002b9e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002ba0:	f002 fa0c 	bl	8004fbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	68f9      	ldr	r1, [r7, #12]
 8002bae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bb0:	fb01 f303 	mul.w	r3, r1, r3
 8002bb4:	441a      	add	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	68f9      	ldr	r1, [r7, #12]
 8002bd4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	441a      	add	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	22ff      	movs	r2, #255	; 0xff
 8002be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	22ff      	movs	r2, #255	; 0xff
 8002bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d114      	bne.n	8002c20 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01a      	beq.n	8002c34 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3310      	adds	r3, #16
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 f9d6 	bl	8003fb4 <xTaskRemoveFromEventList>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <xQueueGenericReset+0xcc>)
 8002c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	e009      	b.n	8002c34 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3310      	adds	r3, #16
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fef3 	bl	8002a10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3324      	adds	r3, #36	; 0x24
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff feee 	bl	8002a10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c34:	f002 f9f0 	bl	8005018 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c38:	2301      	movs	r3, #1
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000ed04 	.word	0xe000ed04

08002c48 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	4613      	mov	r3, r2
 8002c54:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <xQueueGenericCreate+0x28>
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	e7fe      	b.n	8002c6e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d102      	bne.n	8002c7c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
 8002c7a:	e004      	b.n	8002c86 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68ba      	ldr	r2, [r7, #8]
 8002c80:	fb02 f303 	mul.w	r3, r2, r3
 8002c84:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3350      	adds	r3, #80	; 0x50
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fab0 	bl	80051f0 <pvPortMalloc>
 8002c90:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00d      	beq.n	8002cb4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3350      	adds	r3, #80	; 0x50
 8002ca0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ca2:	79fa      	ldrb	r2, [r7, #7]
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 f805 	bl	8002cbe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
	}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	60f8      	str	r0, [r7, #12]
 8002cc6:	60b9      	str	r1, [r7, #8]
 8002cc8:	607a      	str	r2, [r7, #4]
 8002cca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d103      	bne.n	8002cda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	e002      	b.n	8002ce0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cec:	2101      	movs	r1, #1
 8002cee:	69b8      	ldr	r0, [r7, #24]
 8002cf0:	f7ff ff42 	bl	8002b78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08e      	sub	sp, #56	; 0x38
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d12:	2300      	movs	r3, #0
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <xQueueGenericSend+0x30>
 8002d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d32:	e7fe      	b.n	8002d32 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d103      	bne.n	8002d42 <xQueueGenericSend+0x3e>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <xQueueGenericSend+0x42>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <xQueueGenericSend+0x44>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <xQueueGenericSend+0x5c>
 8002d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d50:	f383 8811 	msr	BASEPRI, r3
 8002d54:	f3bf 8f6f 	isb	sy
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5e:	e7fe      	b.n	8002d5e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d103      	bne.n	8002d6e <xQueueGenericSend+0x6a>
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d101      	bne.n	8002d72 <xQueueGenericSend+0x6e>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <xQueueGenericSend+0x70>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <xQueueGenericSend+0x88>
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	623b      	str	r3, [r7, #32]
 8002d8a:	e7fe      	b.n	8002d8a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d8c:	f001 faaa 	bl	80042e4 <xTaskGetSchedulerState>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <xQueueGenericSend+0x98>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <xQueueGenericSend+0x9c>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <xQueueGenericSend+0x9e>
 8002da0:	2300      	movs	r3, #0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <xQueueGenericSend+0xb6>
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	e7fe      	b.n	8002db8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dba:	f002 f8ff 	bl	8004fbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d302      	bcc.n	8002dd0 <xQueueGenericSend+0xcc>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d129      	bne.n	8002e24 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dd6:	f000 fba9 	bl	800352c <prvCopyDataToQueue>
 8002dda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d010      	beq.n	8002e06 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de6:	3324      	adds	r3, #36	; 0x24
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 f8e3 	bl	8003fb4 <xTaskRemoveFromEventList>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002df4:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <xQueueGenericSend+0x1f0>)
 8002df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	f3bf 8f4f 	dsb	sy
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	e00a      	b.n	8002e1c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d007      	beq.n	8002e1c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e0c:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <xQueueGenericSend+0x1f0>)
 8002e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e1c:	f002 f8fc 	bl	8005018 <vPortExitCritical>
				return pdPASS;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e063      	b.n	8002eec <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d103      	bne.n	8002e32 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e2a:	f002 f8f5 	bl	8005018 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e05c      	b.n	8002eec <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d106      	bne.n	8002e46 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f001 f91b 	bl	8004078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e42:	2301      	movs	r3, #1
 8002e44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e46:	f002 f8e7 	bl	8005018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e4a:	f000 fe99 	bl	8003b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e4e:	f002 f8b5 	bl	8004fbc <vPortEnterCritical>
 8002e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e5e:	d103      	bne.n	8002e68 <xQueueGenericSend+0x164>
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e74:	d103      	bne.n	8002e7e <xQueueGenericSend+0x17a>
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e7e:	f002 f8cb 	bl	8005018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e82:	1d3a      	adds	r2, r7, #4
 8002e84:	f107 0314 	add.w	r3, r7, #20
 8002e88:	4611      	mov	r1, r2
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 f90a 	bl	80040a4 <xTaskCheckForTimeOut>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d124      	bne.n	8002ee0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e98:	f000 fc40 	bl	800371c <prvIsQueueFull>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d018      	beq.n	8002ed4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea4:	3310      	adds	r3, #16
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 f834 	bl	8003f18 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb2:	f000 fbcb 	bl	800364c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002eb6:	f000 fe71 	bl	8003b9c <xTaskResumeAll>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f47f af7c 	bne.w	8002dba <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002ec2:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <xQueueGenericSend+0x1f0>)
 8002ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	e772      	b.n	8002dba <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed6:	f000 fbb9 	bl	800364c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eda:	f000 fe5f 	bl	8003b9c <xTaskResumeAll>
 8002ede:	e76c      	b.n	8002dba <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ee2:	f000 fbb3 	bl	800364c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ee6:	f000 fe59 	bl	8003b9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002eea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3738      	adds	r7, #56	; 0x38
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	e000ed04 	.word	0xe000ed04

08002ef8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08e      	sub	sp, #56	; 0x38
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <xQueueGenericSendFromISR+0x2c>
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
 8002f22:	e7fe      	b.n	8002f22 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <xQueueGenericSendFromISR+0x3a>
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <xQueueGenericSendFromISR+0x3e>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <xQueueGenericSendFromISR+0x40>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <xQueueGenericSendFromISR+0x58>
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	623b      	str	r3, [r7, #32]
 8002f4e:	e7fe      	b.n	8002f4e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d103      	bne.n	8002f5e <xQueueGenericSendFromISR+0x66>
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <xQueueGenericSendFromISR+0x6a>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <xQueueGenericSendFromISR+0x6c>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <xQueueGenericSendFromISR+0x84>
 8002f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	e7fe      	b.n	8002f7a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f7c:	f002 f8fa 	bl	8005174 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f80:	f3ef 8211 	mrs	r2, BASEPRI
 8002f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	61ba      	str	r2, [r7, #24]
 8002f96:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f98:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d302      	bcc.n	8002fae <xQueueGenericSendFromISR+0xb6>
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d12c      	bne.n	8003008 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fbe:	f000 fab5 	bl	800352c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fc2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fca:	d112      	bne.n	8002ff2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d016      	beq.n	8003002 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	3324      	adds	r3, #36	; 0x24
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 ffeb 	bl	8003fb4 <xTaskRemoveFromEventList>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00e      	beq.n	8003002 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e007      	b.n	8003002 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	b25a      	sxtb	r2, r3
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003002:	2301      	movs	r3, #1
 8003004:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003006:	e001      	b.n	800300c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003008:	2300      	movs	r3, #0
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003018:	4618      	mov	r0, r3
 800301a:	3738      	adds	r7, #56	; 0x38
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	; 0x38
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	e7fe      	b.n	8003046 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	2b00      	cmp	r3, #0
 800304e:	d009      	beq.n	8003064 <xQueueGiveFromISR+0x44>
 8003050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e7fe      	b.n	8003062 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d103      	bne.n	8003074 <xQueueGiveFromISR+0x54>
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <xQueueGiveFromISR+0x58>
 8003074:	2301      	movs	r3, #1
 8003076:	e000      	b.n	800307a <xQueueGiveFromISR+0x5a>
 8003078:	2300      	movs	r3, #0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d109      	bne.n	8003092 <xQueueGiveFromISR+0x72>
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e7fe      	b.n	8003090 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003092:	f002 f86f 	bl	8005174 <vPortValidateInterruptPriority>
	__asm volatile
 8003096:	f3ef 8211 	mrs	r2, BASEPRI
 800309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309e:	f383 8811 	msr	BASEPRI, r3
 80030a2:	f3bf 8f6f 	isb	sy
 80030a6:	f3bf 8f4f 	dsb	sy
 80030aa:	617a      	str	r2, [r7, #20]
 80030ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80030ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030be:	429a      	cmp	r2, r3
 80030c0:	d22b      	bcs.n	800311a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80030d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030dc:	d112      	bne.n	8003104 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d016      	beq.n	8003114 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	3324      	adds	r3, #36	; 0x24
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 ff62 	bl	8003fb4 <xTaskRemoveFromEventList>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00e      	beq.n	8003114 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	e007      	b.n	8003114 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003108:	3301      	adds	r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	b25a      	sxtb	r2, r3
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003114:	2301      	movs	r3, #1
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
 8003118:	e001      	b.n	800311e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800311a:	2300      	movs	r3, #0
 800311c:	637b      	str	r3, [r7, #52]	; 0x34
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800312a:	4618      	mov	r0, r3
 800312c:	3738      	adds	r7, #56	; 0x38
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08c      	sub	sp, #48	; 0x30
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003140:	2300      	movs	r3, #0
 8003142:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <xQueueReceive+0x2e>
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	623b      	str	r3, [r7, #32]
 8003160:	e7fe      	b.n	8003160 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <xQueueReceive+0x3c>
 8003168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <xQueueReceive+0x40>
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <xQueueReceive+0x42>
 8003174:	2300      	movs	r3, #0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <xQueueReceive+0x5a>
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	e7fe      	b.n	800318c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800318e:	f001 f8a9 	bl	80042e4 <xTaskGetSchedulerState>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <xQueueReceive+0x6a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <xQueueReceive+0x6e>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <xQueueReceive+0x70>
 80031a2:	2300      	movs	r3, #0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d109      	bne.n	80031bc <xQueueReceive+0x88>
 80031a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	61bb      	str	r3, [r7, #24]
 80031ba:	e7fe      	b.n	80031ba <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031bc:	f001 fefe 	bl	8004fbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01f      	beq.n	800320c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031d0:	f000 fa16 	bl	8003600 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	1e5a      	subs	r2, r3, #1
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00f      	beq.n	8003204 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e6:	3310      	adds	r3, #16
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fee3 	bl	8003fb4 <xTaskRemoveFromEventList>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031f4:	4b3c      	ldr	r3, [pc, #240]	; (80032e8 <xQueueReceive+0x1b4>)
 80031f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003204:	f001 ff08 	bl	8005018 <vPortExitCritical>
				return pdPASS;
 8003208:	2301      	movs	r3, #1
 800320a:	e069      	b.n	80032e0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003212:	f001 ff01 	bl	8005018 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003216:	2300      	movs	r3, #0
 8003218:	e062      	b.n	80032e0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003220:	f107 0310 	add.w	r3, r7, #16
 8003224:	4618      	mov	r0, r3
 8003226:	f000 ff27 	bl	8004078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800322a:	2301      	movs	r3, #1
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800322e:	f001 fef3 	bl	8005018 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003232:	f000 fca5 	bl	8003b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003236:	f001 fec1 	bl	8004fbc <vPortEnterCritical>
 800323a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003240:	b25b      	sxtb	r3, r3
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003246:	d103      	bne.n	8003250 <xQueueReceive+0x11c>
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003256:	b25b      	sxtb	r3, r3
 8003258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800325c:	d103      	bne.n	8003266 <xQueueReceive+0x132>
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003266:	f001 fed7 	bl	8005018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800326a:	1d3a      	adds	r2, r7, #4
 800326c:	f107 0310 	add.w	r3, r7, #16
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f000 ff16 	bl	80040a4 <xTaskCheckForTimeOut>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d123      	bne.n	80032c6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800327e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003280:	f000 fa36 	bl	80036f0 <prvIsQueueEmpty>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d017      	beq.n	80032ba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	3324      	adds	r3, #36	; 0x24
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fe40 	bl	8003f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800329a:	f000 f9d7 	bl	800364c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800329e:	f000 fc7d 	bl	8003b9c <xTaskResumeAll>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d189      	bne.n	80031bc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <xQueueReceive+0x1b4>)
 80032aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	e780      	b.n	80031bc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80032ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032bc:	f000 f9c6 	bl	800364c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032c0:	f000 fc6c 	bl	8003b9c <xTaskResumeAll>
 80032c4:	e77a      	b.n	80031bc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80032c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c8:	f000 f9c0 	bl	800364c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032cc:	f000 fc66 	bl	8003b9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032d2:	f000 fa0d 	bl	80036f0 <prvIsQueueEmpty>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f43f af6f 	beq.w	80031bc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80032de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3730      	adds	r7, #48	; 0x30
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08e      	sub	sp, #56	; 0x38
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80032f6:	2300      	movs	r3, #0
 80032f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80032fe:	2300      	movs	r3, #0
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d109      	bne.n	800331c <xQueueSemaphoreTake+0x30>
 8003308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	e7fe      	b.n	800331a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d009      	beq.n	8003338 <xQueueSemaphoreTake+0x4c>
 8003324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e7fe      	b.n	8003336 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003338:	f000 ffd4 	bl	80042e4 <xTaskGetSchedulerState>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <xQueueSemaphoreTake+0x5c>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <xQueueSemaphoreTake+0x60>
 8003348:	2301      	movs	r3, #1
 800334a:	e000      	b.n	800334e <xQueueSemaphoreTake+0x62>
 800334c:	2300      	movs	r3, #0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d109      	bne.n	8003366 <xQueueSemaphoreTake+0x7a>
 8003352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003356:	f383 8811 	msr	BASEPRI, r3
 800335a:	f3bf 8f6f 	isb	sy
 800335e:	f3bf 8f4f 	dsb	sy
 8003362:	61bb      	str	r3, [r7, #24]
 8003364:	e7fe      	b.n	8003364 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003366:	f001 fe29 	bl	8004fbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	2b00      	cmp	r3, #0
 8003374:	d024      	beq.n	80033c0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	1e5a      	subs	r2, r3, #1
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d104      	bne.n	8003390 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003386:	f001 f967 	bl	8004658 <pvTaskIncrementMutexHeldCount>
 800338a:	4602      	mov	r2, r0
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00f      	beq.n	80033b8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339a:	3310      	adds	r3, #16
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fe09 	bl	8003fb4 <xTaskRemoveFromEventList>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <xQueueSemaphoreTake+0x20c>)
 80033aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033b8:	f001 fe2e 	bl	8005018 <vPortExitCritical>
				return pdPASS;
 80033bc:	2301      	movs	r3, #1
 80033be:	e096      	b.n	80034ee <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d110      	bne.n	80033e8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d009      	beq.n	80033e0 <xQueueSemaphoreTake+0xf4>
 80033cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d0:	f383 8811 	msr	BASEPRI, r3
 80033d4:	f3bf 8f6f 	isb	sy
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	e7fe      	b.n	80033de <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80033e0:	f001 fe1a 	bl	8005018 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e082      	b.n	80034ee <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033ee:	f107 030c 	add.w	r3, r7, #12
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fe40 	bl	8004078 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033f8:	2301      	movs	r3, #1
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033fc:	f001 fe0c 	bl	8005018 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003400:	f000 fbbe 	bl	8003b80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003404:	f001 fdda 	bl	8004fbc <vPortEnterCritical>
 8003408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800340e:	b25b      	sxtb	r3, r3
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003414:	d103      	bne.n	800341e <xQueueSemaphoreTake+0x132>
 8003416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003424:	b25b      	sxtb	r3, r3
 8003426:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800342a:	d103      	bne.n	8003434 <xQueueSemaphoreTake+0x148>
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003434:	f001 fdf0 	bl	8005018 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003438:	463a      	mov	r2, r7
 800343a:	f107 030c 	add.w	r3, r7, #12
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fe2f 	bl	80040a4 <xTaskCheckForTimeOut>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d132      	bne.n	80034b2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800344c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800344e:	f000 f94f 	bl	80036f0 <prvIsQueueEmpty>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d026      	beq.n	80034a6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d109      	bne.n	8003474 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003460:	f001 fdac 	bl	8004fbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 ff59 	bl	8004320 <xTaskPriorityInherit>
 800346e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003470:	f001 fdd2 	bl	8005018 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	3324      	adds	r3, #36	; 0x24
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fd4b 	bl	8003f18 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003484:	f000 f8e2 	bl	800364c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003488:	f000 fb88 	bl	8003b9c <xTaskResumeAll>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	f47f af69 	bne.w	8003366 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <xQueueSemaphoreTake+0x20c>)
 8003496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	e75f      	b.n	8003366 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80034a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034a8:	f000 f8d0 	bl	800364c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034ac:	f000 fb76 	bl	8003b9c <xTaskResumeAll>
 80034b0:	e759      	b.n	8003366 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80034b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034b4:	f000 f8ca 	bl	800364c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034b8:	f000 fb70 	bl	8003b9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034be:	f000 f917 	bl	80036f0 <prvIsQueueEmpty>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f43f af4e 	beq.w	8003366 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80034d0:	f001 fd74 	bl	8004fbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80034d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034d6:	f000 f811 	bl	80034fc <prvGetDisinheritPriorityAfterTimeout>
 80034da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 f820 	bl	8004528 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80034e8:	f001 fd96 	bl	8005018 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3738      	adds	r7, #56	; 0x38
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	e000ed04 	.word	0xe000ed04

080034fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d006      	beq.n	800351a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f1c3 0305 	rsb	r3, r3, #5
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e001      	b.n	800351e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800351e:	68fb      	ldr	r3, [r7, #12]
	}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10d      	bne.n	8003566 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d14d      	bne.n	80035ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f000 ff62 	bl	8004420 <xTaskPriorityDisinherit>
 800355c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
 8003564:	e043      	b.n	80035ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d119      	bne.n	80035a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6858      	ldr	r0, [r3, #4]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	461a      	mov	r2, r3
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	f002 f834 	bl	80055e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	441a      	add	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	429a      	cmp	r2, r3
 8003594:	d32b      	bcc.n	80035ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	e026      	b.n	80035ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	68d8      	ldr	r0, [r3, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	461a      	mov	r2, r3
 80035aa:	68b9      	ldr	r1, [r7, #8]
 80035ac:	f002 f81a 	bl	80055e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	68da      	ldr	r2, [r3, #12]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	425b      	negs	r3, r3
 80035ba:	441a      	add	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d207      	bcs.n	80035dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	425b      	negs	r3, r3
 80035d6:	441a      	add	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d105      	bne.n	80035ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d002      	beq.n	80035ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80035f6:	697b      	ldr	r3, [r7, #20]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d018      	beq.n	8003644 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	441a      	add	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	d303      	bcc.n	8003634 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68d9      	ldr	r1, [r3, #12]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	461a      	mov	r2, r3
 800363e:	6838      	ldr	r0, [r7, #0]
 8003640:	f001 ffd0 	bl	80055e4 <memcpy>
	}
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003654:	f001 fcb2 	bl	8004fbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800365e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003660:	e011      	b.n	8003686 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003666:	2b00      	cmp	r3, #0
 8003668:	d012      	beq.n	8003690 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	3324      	adds	r3, #36	; 0x24
 800366e:	4618      	mov	r0, r3
 8003670:	f000 fca0 	bl	8003fb4 <xTaskRemoveFromEventList>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800367a:	f000 fd73 	bl	8004164 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	3b01      	subs	r3, #1
 8003682:	b2db      	uxtb	r3, r3
 8003684:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368a:	2b00      	cmp	r3, #0
 800368c:	dce9      	bgt.n	8003662 <prvUnlockQueue+0x16>
 800368e:	e000      	b.n	8003692 <prvUnlockQueue+0x46>
					break;
 8003690:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	22ff      	movs	r2, #255	; 0xff
 8003696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800369a:	f001 fcbd 	bl	8005018 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800369e:	f001 fc8d 	bl	8004fbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036aa:	e011      	b.n	80036d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d012      	beq.n	80036da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3310      	adds	r3, #16
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fc7b 	bl	8003fb4 <xTaskRemoveFromEventList>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80036c4:	f000 fd4e 	bl	8004164 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80036c8:	7bbb      	ldrb	r3, [r7, #14]
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80036d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	dce9      	bgt.n	80036ac <prvUnlockQueue+0x60>
 80036d8:	e000      	b.n	80036dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80036da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	22ff      	movs	r2, #255	; 0xff
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80036e4:	f001 fc98 	bl	8005018 <vPortExitCritical>
}
 80036e8:	bf00      	nop
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036f8:	f001 fc60 	bl	8004fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003704:	2301      	movs	r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e001      	b.n	800370e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800370e:	f001 fc83 	bl	8005018 <vPortExitCritical>

	return xReturn;
 8003712:	68fb      	ldr	r3, [r7, #12]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003724:	f001 fc4a 	bl	8004fbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003730:	429a      	cmp	r2, r3
 8003732:	d102      	bne.n	800373a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003734:	2301      	movs	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e001      	b.n	800373e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800373e:	f001 fc6b 	bl	8005018 <vPortExitCritical>

	return xReturn;
 8003742:	68fb      	ldr	r3, [r7, #12]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e014      	b.n	8003786 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800375c:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <vQueueAddToRegistry+0x4c>)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003768:	490b      	ldr	r1, [pc, #44]	; (8003798 <vQueueAddToRegistry+0x4c>)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003772:	4a09      	ldr	r2, [pc, #36]	; (8003798 <vQueueAddToRegistry+0x4c>)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800377e:	e005      	b.n	800378c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	3301      	adds	r3, #1
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2b07      	cmp	r3, #7
 800378a:	d9e7      	bls.n	800375c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	20012e30 	.word	0x20012e30

0800379c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80037ac:	f001 fc06 	bl	8004fbc <vPortEnterCritical>
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037b6:	b25b      	sxtb	r3, r3
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037bc:	d103      	bne.n	80037c6 <vQueueWaitForMessageRestricted+0x2a>
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037cc:	b25b      	sxtb	r3, r3
 80037ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d2:	d103      	bne.n	80037dc <vQueueWaitForMessageRestricted+0x40>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037dc:	f001 fc1c 	bl	8005018 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3324      	adds	r3, #36	; 0x24
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fbb5 	bl	8003f60 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80037f6:	6978      	ldr	r0, [r7, #20]
 80037f8:	f7ff ff28 	bl	800364c <prvUnlockQueue>
	}
 80037fc:	bf00      	nop
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08c      	sub	sp, #48	; 0x30
 8003808:	af04      	add	r7, sp, #16
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4618      	mov	r0, r3
 800381a:	f001 fce9 	bl	80051f0 <pvPortMalloc>
 800381e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00e      	beq.n	8003844 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003826:	2058      	movs	r0, #88	; 0x58
 8003828:	f001 fce2 	bl	80051f0 <pvPortMalloc>
 800382c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d003      	beq.n	800383c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
 800383a:	e005      	b.n	8003848 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800383c:	6978      	ldr	r0, [r7, #20]
 800383e:	f001 fd99 	bl	8005374 <vPortFree>
 8003842:	e001      	b.n	8003848 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d013      	beq.n	8003876 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800384e:	88fa      	ldrh	r2, [r7, #6]
 8003850:	2300      	movs	r3, #0
 8003852:	9303      	str	r3, [sp, #12]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	9302      	str	r3, [sp, #8]
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68b9      	ldr	r1, [r7, #8]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f80e 	bl	8003886 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800386a:	69f8      	ldr	r0, [r7, #28]
 800386c:	f000 f89a 	bl	80039a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003870:	2301      	movs	r3, #1
 8003872:	61bb      	str	r3, [r7, #24]
 8003874:	e002      	b.n	800387c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800387a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800387c:	69bb      	ldr	r3, [r7, #24]
	}
 800387e:	4618      	mov	r0, r3
 8003880:	3720      	adds	r7, #32
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b088      	sub	sp, #32
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	461a      	mov	r2, r3
 800389e:	21a5      	movs	r1, #165	; 0xa5
 80038a0:	f001 feab 	bl	80055fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80038a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038ae:	3b01      	subs	r3, #1
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	f023 0307 	bic.w	r3, r3, #7
 80038bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d009      	beq.n	80038dc <prvInitialiseNewTask+0x56>
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e7fe      	b.n	80038da <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01f      	beq.n	8003922 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	e012      	b.n	800390e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	7819      	ldrb	r1, [r3, #0]
 80038f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	4413      	add	r3, r2
 80038f6:	3334      	adds	r3, #52	; 0x34
 80038f8:	460a      	mov	r2, r1
 80038fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d006      	beq.n	8003916 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	3301      	adds	r3, #1
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	2b09      	cmp	r3, #9
 8003912:	d9e9      	bls.n	80038e8 <prvInitialiseNewTask+0x62>
 8003914:	e000      	b.n	8003918 <prvInitialiseNewTask+0x92>
			{
				break;
 8003916:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003920:	e003      	b.n	800392a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800392a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392c:	2b04      	cmp	r3, #4
 800392e:	d901      	bls.n	8003934 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003930:	2304      	movs	r3, #4
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003938:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800393e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003942:	2200      	movs	r2, #0
 8003944:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	3304      	adds	r3, #4
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff f880 	bl	8002a50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	3318      	adds	r3, #24
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff f87b 	bl	8002a50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003962:	f1c3 0205 	rsb	r2, r3, #5
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800396e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	2200      	movs	r2, #0
 8003974:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	68f9      	ldr	r1, [r7, #12]
 8003982:	69b8      	ldr	r0, [r7, #24]
 8003984:	f001 f9f0 	bl	8004d68 <pxPortInitialiseStack>
 8003988:	4602      	mov	r2, r0
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800398e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003998:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800399a:	bf00      	nop
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80039ac:	f001 fb06 	bl	8004fbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80039b0:	4b2c      	ldr	r3, [pc, #176]	; (8003a64 <prvAddNewTaskToReadyList+0xc0>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3301      	adds	r3, #1
 80039b6:	4a2b      	ldr	r2, [pc, #172]	; (8003a64 <prvAddNewTaskToReadyList+0xc0>)
 80039b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039ba:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <prvAddNewTaskToReadyList+0xc4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039c2:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <prvAddNewTaskToReadyList+0xc4>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039c8:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <prvAddNewTaskToReadyList+0xc0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d110      	bne.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039d0:	f000 fbec 	bl	80041ac <prvInitialiseTaskLists>
 80039d4:	e00d      	b.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039d6:	4b25      	ldr	r3, [pc, #148]	; (8003a6c <prvAddNewTaskToReadyList+0xc8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039de:	4b22      	ldr	r3, [pc, #136]	; (8003a68 <prvAddNewTaskToReadyList+0xc4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d802      	bhi.n	80039f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039ec:	4a1e      	ldr	r2, [pc, #120]	; (8003a68 <prvAddNewTaskToReadyList+0xc4>)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039f2:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <prvAddNewTaskToReadyList+0xcc>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3301      	adds	r3, #1
 80039f8:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <prvAddNewTaskToReadyList+0xcc>)
 80039fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039fc:	4b1c      	ldr	r3, [pc, #112]	; (8003a70 <prvAddNewTaskToReadyList+0xcc>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	2201      	movs	r2, #1
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	4b19      	ldr	r3, [pc, #100]	; (8003a74 <prvAddNewTaskToReadyList+0xd0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	4a18      	ldr	r2, [pc, #96]	; (8003a74 <prvAddNewTaskToReadyList+0xd0>)
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <prvAddNewTaskToReadyList+0xd4>)
 8003a24:	441a      	add	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	f7ff f81c 	bl	8002a6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a32:	f001 faf1 	bl	8005018 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <prvAddNewTaskToReadyList+0xc8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00e      	beq.n	8003a5c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a3e:	4b0a      	ldr	r3, [pc, #40]	; (8003a68 <prvAddNewTaskToReadyList+0xc4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d207      	bcs.n	8003a5c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <prvAddNewTaskToReadyList+0xd8>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a5c:	bf00      	nop
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000108 	.word	0x20000108
 8003a68:	20000030 	.word	0x20000030
 8003a6c:	20000114 	.word	0x20000114
 8003a70:	20000124 	.word	0x20000124
 8003a74:	20000110 	.word	0x20000110
 8003a78:	20000034 	.word	0x20000034
 8003a7c:	e000ed04 	.word	0xe000ed04

08003a80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d016      	beq.n	8003ac0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <vTaskDelay+0x60>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <vTaskDelay+0x2e>
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	60bb      	str	r3, [r7, #8]
 8003aac:	e7fe      	b.n	8003aac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003aae:	f000 f867 	bl	8003b80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fde3 	bl	8004680 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003aba:	f000 f86f 	bl	8003b9c <xTaskResumeAll>
 8003abe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d107      	bne.n	8003ad6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <vTaskDelay+0x64>)
 8003ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000130 	.word	0x20000130
 8003ae4:	e000ed04 	.word	0xe000ed04

08003ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <vTaskStartScheduler+0x80>)
 8003af0:	9301      	str	r3, [sp, #4]
 8003af2:	2300      	movs	r3, #0
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	2300      	movs	r3, #0
 8003af8:	2282      	movs	r2, #130	; 0x82
 8003afa:	491c      	ldr	r1, [pc, #112]	; (8003b6c <vTaskStartScheduler+0x84>)
 8003afc:	481c      	ldr	r0, [pc, #112]	; (8003b70 <vTaskStartScheduler+0x88>)
 8003afe:	f7ff fe81 	bl	8003804 <xTaskCreate>
 8003b02:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d102      	bne.n	8003b10 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003b0a:	f000 fe1f 	bl	800474c <xTimerCreateTimerTask>
 8003b0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d115      	bne.n	8003b42 <vTaskStartScheduler+0x5a>
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b28:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <vTaskStartScheduler+0x8c>)
 8003b2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b2e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <vTaskStartScheduler+0x90>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <vTaskStartScheduler+0x94>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003b3c:	f001 f9a0 	bl	8004e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003b40:	e00d      	b.n	8003b5e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b48:	d109      	bne.n	8003b5e <vTaskStartScheduler+0x76>
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	e7fe      	b.n	8003b5c <vTaskStartScheduler+0x74>
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	2000012c 	.word	0x2000012c
 8003b6c:	08005634 	.word	0x08005634
 8003b70:	0800417d 	.word	0x0800417d
 8003b74:	20000128 	.word	0x20000128
 8003b78:	20000114 	.word	0x20000114
 8003b7c:	2000010c 	.word	0x2000010c

08003b80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <vTaskSuspendAll+0x18>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	4a03      	ldr	r2, [pc, #12]	; (8003b98 <vTaskSuspendAll+0x18>)
 8003b8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003b8e:	bf00      	nop
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	20000130 	.word	0x20000130

08003b9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <xTaskResumeAll+0x114>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <xTaskResumeAll+0x2a>
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	e7fe      	b.n	8003bc4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003bc6:	f001 f9f9 	bl	8004fbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003bca:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <xTaskResumeAll+0x114>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	4a37      	ldr	r2, [pc, #220]	; (8003cb0 <xTaskResumeAll+0x114>)
 8003bd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bd4:	4b36      	ldr	r3, [pc, #216]	; (8003cb0 <xTaskResumeAll+0x114>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d161      	bne.n	8003ca0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003bdc:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <xTaskResumeAll+0x118>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05d      	beq.n	8003ca0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003be4:	e02e      	b.n	8003c44 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be6:	4b34      	ldr	r3, [pc, #208]	; (8003cb8 <xTaskResumeAll+0x11c>)
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3318      	adds	r3, #24
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe ff96 	bl	8002b24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe ff91 	bl	8002b24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	2201      	movs	r2, #1
 8003c08:	409a      	lsls	r2, r3
 8003c0a:	4b2c      	ldr	r3, [pc, #176]	; (8003cbc <xTaskResumeAll+0x120>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	4a2a      	ldr	r2, [pc, #168]	; (8003cbc <xTaskResumeAll+0x120>)
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4a27      	ldr	r2, [pc, #156]	; (8003cc0 <xTaskResumeAll+0x124>)
 8003c22:	441a      	add	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f7fe ff1d 	bl	8002a6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c34:	4b23      	ldr	r3, [pc, #140]	; (8003cc4 <xTaskResumeAll+0x128>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003c3e:	4b22      	ldr	r3, [pc, #136]	; (8003cc8 <xTaskResumeAll+0x12c>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c44:	4b1c      	ldr	r3, [pc, #112]	; (8003cb8 <xTaskResumeAll+0x11c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1cc      	bne.n	8003be6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003c52:	f000 fb27 	bl	80042a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <xTaskResumeAll+0x130>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d010      	beq.n	8003c84 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003c62:	f000 f847 	bl	8003cf4 <xTaskIncrementTick>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003c6c:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <xTaskResumeAll+0x12c>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1f1      	bne.n	8003c62 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003c7e:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <xTaskResumeAll+0x130>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c84:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <xTaskResumeAll+0x12c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d009      	beq.n	8003ca0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c90:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <xTaskResumeAll+0x134>)
 8003c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ca0:	f001 f9ba 	bl	8005018 <vPortExitCritical>

	return xAlreadyYielded;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000130 	.word	0x20000130
 8003cb4:	20000108 	.word	0x20000108
 8003cb8:	200000c8 	.word	0x200000c8
 8003cbc:	20000110 	.word	0x20000110
 8003cc0:	20000034 	.word	0x20000034
 8003cc4:	20000030 	.word	0x20000030
 8003cc8:	2000011c 	.word	0x2000011c
 8003ccc:	20000118 	.word	0x20000118
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003cda:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <xTaskGetTickCount+0x1c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ce0:	687b      	ldr	r3, [r7, #4]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	2000010c 	.word	0x2000010c

08003cf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfe:	4b4e      	ldr	r3, [pc, #312]	; (8003e38 <xTaskIncrementTick+0x144>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f040 8087 	bne.w	8003e16 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d08:	4b4c      	ldr	r3, [pc, #304]	; (8003e3c <xTaskIncrementTick+0x148>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d10:	4a4a      	ldr	r2, [pc, #296]	; (8003e3c <xTaskIncrementTick+0x148>)
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d11f      	bne.n	8003d5c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d1c:	4b48      	ldr	r3, [pc, #288]	; (8003e40 <xTaskIncrementTick+0x14c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <xTaskIncrementTick+0x46>
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	e7fe      	b.n	8003d38 <xTaskIncrementTick+0x44>
 8003d3a:	4b41      	ldr	r3, [pc, #260]	; (8003e40 <xTaskIncrementTick+0x14c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	60fb      	str	r3, [r7, #12]
 8003d40:	4b40      	ldr	r3, [pc, #256]	; (8003e44 <xTaskIncrementTick+0x150>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a3e      	ldr	r2, [pc, #248]	; (8003e40 <xTaskIncrementTick+0x14c>)
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4a3e      	ldr	r2, [pc, #248]	; (8003e44 <xTaskIncrementTick+0x150>)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <xTaskIncrementTick+0x154>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	4a3c      	ldr	r2, [pc, #240]	; (8003e48 <xTaskIncrementTick+0x154>)
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	f000 faa4 	bl	80042a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003d5c:	4b3b      	ldr	r3, [pc, #236]	; (8003e4c <xTaskIncrementTick+0x158>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d348      	bcc.n	8003df8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d66:	4b36      	ldr	r3, [pc, #216]	; (8003e40 <xTaskIncrementTick+0x14c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d104      	bne.n	8003d7a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d70:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <xTaskIncrementTick+0x158>)
 8003d72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d76:	601a      	str	r2, [r3, #0]
					break;
 8003d78:	e03e      	b.n	8003df8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <xTaskIncrementTick+0x14c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d203      	bcs.n	8003d9a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d92:	4a2e      	ldr	r2, [pc, #184]	; (8003e4c <xTaskIncrementTick+0x158>)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d98:	e02e      	b.n	8003df8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fec0 	bl	8002b24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d004      	beq.n	8003db6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	3318      	adds	r3, #24
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fe feb7 	bl	8002b24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	2201      	movs	r2, #1
 8003dbc:	409a      	lsls	r2, r3
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <xTaskIncrementTick+0x15c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	4a22      	ldr	r2, [pc, #136]	; (8003e50 <xTaskIncrementTick+0x15c>)
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <xTaskIncrementTick+0x160>)
 8003dd6:	441a      	add	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	4619      	mov	r1, r3
 8003dde:	4610      	mov	r0, r2
 8003de0:	f7fe fe43 	bl	8002a6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <xTaskIncrementTick+0x164>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d3b9      	bcc.n	8003d66 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003df2:	2301      	movs	r3, #1
 8003df4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003df6:	e7b6      	b.n	8003d66 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003df8:	4b17      	ldr	r3, [pc, #92]	; (8003e58 <xTaskIncrementTick+0x164>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfe:	4915      	ldr	r1, [pc, #84]	; (8003e54 <xTaskIncrementTick+0x160>)
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d907      	bls.n	8003e20 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003e10:	2301      	movs	r3, #1
 8003e12:	617b      	str	r3, [r7, #20]
 8003e14:	e004      	b.n	8003e20 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003e16:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <xTaskIncrementTick+0x168>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <xTaskIncrementTick+0x168>)
 8003e1e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <xTaskIncrementTick+0x16c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003e2c:	697b      	ldr	r3, [r7, #20]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000130 	.word	0x20000130
 8003e3c:	2000010c 	.word	0x2000010c
 8003e40:	200000c0 	.word	0x200000c0
 8003e44:	200000c4 	.word	0x200000c4
 8003e48:	20000120 	.word	0x20000120
 8003e4c:	20000128 	.word	0x20000128
 8003e50:	20000110 	.word	0x20000110
 8003e54:	20000034 	.word	0x20000034
 8003e58:	20000030 	.word	0x20000030
 8003e5c:	20000118 	.word	0x20000118
 8003e60:	2000011c 	.word	0x2000011c

08003e64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e6a:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <vTaskSwitchContext+0xa0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003e72:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <vTaskSwitchContext+0xa4>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e78:	e03e      	b.n	8003ef8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003e7a:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <vTaskSwitchContext+0xa4>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e80:	4b22      	ldr	r3, [pc, #136]	; (8003f0c <vTaskSwitchContext+0xa8>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003e8e:	7afb      	ldrb	r3, [r7, #11]
 8003e90:	f1c3 031f 	rsb	r3, r3, #31
 8003e94:	617b      	str	r3, [r7, #20]
 8003e96:	491e      	ldr	r1, [pc, #120]	; (8003f10 <vTaskSwitchContext+0xac>)
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <vTaskSwitchContext+0x5a>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	e7fe      	b.n	8003ebc <vTaskSwitchContext+0x58>
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4a11      	ldr	r2, [pc, #68]	; (8003f10 <vTaskSwitchContext+0xac>)
 8003eca:	4413      	add	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d104      	bne.n	8003eee <vTaskSwitchContext+0x8a>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <vTaskSwitchContext+0xb0>)
 8003ef6:	6013      	str	r3, [r2, #0]
}
 8003ef8:	bf00      	nop
 8003efa:	371c      	adds	r7, #28
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	20000130 	.word	0x20000130
 8003f08:	2000011c 	.word	0x2000011c
 8003f0c:	20000110 	.word	0x20000110
 8003f10:	20000034 	.word	0x20000034
 8003f14:	20000030 	.word	0x20000030

08003f18 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d109      	bne.n	8003f3c <vTaskPlaceOnEventList+0x24>
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	e7fe      	b.n	8003f3a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <vTaskPlaceOnEventList+0x44>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3318      	adds	r3, #24
 8003f42:	4619      	mov	r1, r3
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fe fdb4 	bl	8002ab2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	6838      	ldr	r0, [r7, #0]
 8003f4e:	f000 fb97 	bl	8004680 <prvAddCurrentTaskToDelayedList>
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000030 	.word	0x20000030

08003f60 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <vTaskPlaceOnEventListRestricted+0x26>
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	e7fe      	b.n	8003f84 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f86:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <vTaskPlaceOnEventListRestricted+0x50>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3318      	adds	r3, #24
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f7fe fd6b 	bl	8002a6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f9e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	68b8      	ldr	r0, [r7, #8]
 8003fa4:	f000 fb6c 	bl	8004680 <prvAddCurrentTaskToDelayedList>
	}
 8003fa8:	bf00      	nop
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000030 	.word	0x20000030

08003fb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <xTaskRemoveFromEventList+0x2a>
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e7fe      	b.n	8003fdc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fe fd9e 	bl	8002b24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <xTaskRemoveFromEventList+0xac>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d11c      	bne.n	800402a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fe fd95 	bl	8002b24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	2201      	movs	r2, #1
 8004000:	409a      	lsls	r2, r3
 8004002:	4b18      	ldr	r3, [pc, #96]	; (8004064 <xTaskRemoveFromEventList+0xb0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4313      	orrs	r3, r2
 8004008:	4a16      	ldr	r2, [pc, #88]	; (8004064 <xTaskRemoveFromEventList+0xb0>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4a13      	ldr	r2, [pc, #76]	; (8004068 <xTaskRemoveFromEventList+0xb4>)
 800401a:	441a      	add	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f7fe fd21 	bl	8002a6a <vListInsertEnd>
 8004028:	e005      	b.n	8004036 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	3318      	adds	r3, #24
 800402e:	4619      	mov	r1, r3
 8004030:	480e      	ldr	r0, [pc, #56]	; (800406c <xTaskRemoveFromEventList+0xb8>)
 8004032:	f7fe fd1a 	bl	8002a6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <xTaskRemoveFromEventList+0xbc>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	429a      	cmp	r2, r3
 8004042:	d905      	bls.n	8004050 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004044:	2301      	movs	r3, #1
 8004046:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <xTaskRemoveFromEventList+0xc0>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	e001      	b.n	8004054 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004054:	697b      	ldr	r3, [r7, #20]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000130 	.word	0x20000130
 8004064:	20000110 	.word	0x20000110
 8004068:	20000034 	.word	0x20000034
 800406c:	200000c8 	.word	0x200000c8
 8004070:	20000030 	.word	0x20000030
 8004074:	2000011c 	.word	0x2000011c

08004078 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <vTaskInternalSetTimeOutState+0x24>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <vTaskInternalSetTimeOutState+0x28>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	605a      	str	r2, [r3, #4]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	20000120 	.word	0x20000120
 80040a0:	2000010c 	.word	0x2000010c

080040a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d109      	bne.n	80040c8 <xTaskCheckForTimeOut+0x24>
 80040b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	e7fe      	b.n	80040c6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <xTaskCheckForTimeOut+0x3e>
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e7fe      	b.n	80040e0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80040e2:	f000 ff6b 	bl	8004fbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80040e6:	4b1d      	ldr	r3, [pc, #116]	; (800415c <xTaskCheckForTimeOut+0xb8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040fe:	d102      	bne.n	8004106 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	e023      	b.n	800414e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <xTaskCheckForTimeOut+0xbc>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d007      	beq.n	8004122 <xTaskCheckForTimeOut+0x7e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	429a      	cmp	r2, r3
 800411a:	d302      	bcc.n	8004122 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
 8004120:	e015      	b.n	800414e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	429a      	cmp	r2, r3
 800412a:	d20b      	bcs.n	8004144 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	1ad2      	subs	r2, r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ff9d 	bl	8004078 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800413e:	2300      	movs	r3, #0
 8004140:	61fb      	str	r3, [r7, #28]
 8004142:	e004      	b.n	800414e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800414a:	2301      	movs	r3, #1
 800414c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800414e:	f000 ff63 	bl	8005018 <vPortExitCritical>

	return xReturn;
 8004152:	69fb      	ldr	r3, [r7, #28]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	2000010c 	.word	0x2000010c
 8004160:	20000120 	.word	0x20000120

08004164 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <vTaskMissedYield+0x14>)
 800416a:	2201      	movs	r2, #1
 800416c:	601a      	str	r2, [r3, #0]
}
 800416e:	bf00      	nop
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	2000011c 	.word	0x2000011c

0800417c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004184:	f000 f852 	bl	800422c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <prvIdleTask+0x28>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d9f9      	bls.n	8004184 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <prvIdleTask+0x2c>)
 8004192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80041a0:	e7f0      	b.n	8004184 <prvIdleTask+0x8>
 80041a2:	bf00      	nop
 80041a4:	20000034 	.word	0x20000034
 80041a8:	e000ed04 	.word	0xe000ed04

080041ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041b2:	2300      	movs	r3, #0
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	e00c      	b.n	80041d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4a12      	ldr	r2, [pc, #72]	; (800420c <prvInitialiseTaskLists+0x60>)
 80041c4:	4413      	add	r3, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe fc22 	bl	8002a10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3301      	adds	r3, #1
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b04      	cmp	r3, #4
 80041d6:	d9ef      	bls.n	80041b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80041d8:	480d      	ldr	r0, [pc, #52]	; (8004210 <prvInitialiseTaskLists+0x64>)
 80041da:	f7fe fc19 	bl	8002a10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80041de:	480d      	ldr	r0, [pc, #52]	; (8004214 <prvInitialiseTaskLists+0x68>)
 80041e0:	f7fe fc16 	bl	8002a10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80041e4:	480c      	ldr	r0, [pc, #48]	; (8004218 <prvInitialiseTaskLists+0x6c>)
 80041e6:	f7fe fc13 	bl	8002a10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80041ea:	480c      	ldr	r0, [pc, #48]	; (800421c <prvInitialiseTaskLists+0x70>)
 80041ec:	f7fe fc10 	bl	8002a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80041f0:	480b      	ldr	r0, [pc, #44]	; (8004220 <prvInitialiseTaskLists+0x74>)
 80041f2:	f7fe fc0d 	bl	8002a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <prvInitialiseTaskLists+0x78>)
 80041f8:	4a05      	ldr	r2, [pc, #20]	; (8004210 <prvInitialiseTaskLists+0x64>)
 80041fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <prvInitialiseTaskLists+0x7c>)
 80041fe:	4a05      	ldr	r2, [pc, #20]	; (8004214 <prvInitialiseTaskLists+0x68>)
 8004200:	601a      	str	r2, [r3, #0]
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000034 	.word	0x20000034
 8004210:	20000098 	.word	0x20000098
 8004214:	200000ac 	.word	0x200000ac
 8004218:	200000c8 	.word	0x200000c8
 800421c:	200000dc 	.word	0x200000dc
 8004220:	200000f4 	.word	0x200000f4
 8004224:	200000c0 	.word	0x200000c0
 8004228:	200000c4 	.word	0x200000c4

0800422c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004232:	e019      	b.n	8004268 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004234:	f000 fec2 	bl	8004fbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <prvCheckTasksWaitingTermination+0x4c>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe fc6d 	bl	8002b24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800424a:	4b0c      	ldr	r3, [pc, #48]	; (800427c <prvCheckTasksWaitingTermination+0x50>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3b01      	subs	r3, #1
 8004250:	4a0a      	ldr	r2, [pc, #40]	; (800427c <prvCheckTasksWaitingTermination+0x50>)
 8004252:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <prvCheckTasksWaitingTermination+0x54>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3b01      	subs	r3, #1
 800425a:	4a09      	ldr	r2, [pc, #36]	; (8004280 <prvCheckTasksWaitingTermination+0x54>)
 800425c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800425e:	f000 fedb 	bl	8005018 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f80e 	bl	8004284 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <prvCheckTasksWaitingTermination+0x54>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e1      	bne.n	8004234 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	200000dc 	.word	0x200000dc
 800427c:	20000108 	.word	0x20000108
 8004280:	200000f0 	.word	0x200000f0

08004284 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	4618      	mov	r0, r3
 8004292:	f001 f86f 	bl	8005374 <vPortFree>
			vPortFree( pxTCB );
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f001 f86c 	bl	8005374 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800429c:	bf00      	nop
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042aa:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <prvResetNextTaskUnblockTime+0x38>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <prvResetNextTaskUnblockTime+0x3c>)
 80042b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042bc:	e008      	b.n	80042d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <prvResetNextTaskUnblockTime+0x38>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4a04      	ldr	r2, [pc, #16]	; (80042e0 <prvResetNextTaskUnblockTime+0x3c>)
 80042ce:	6013      	str	r3, [r2, #0]
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	200000c0 	.word	0x200000c0
 80042e0:	20000128 	.word	0x20000128

080042e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042ea:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <xTaskGetSchedulerState+0x34>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042f2:	2301      	movs	r3, #1
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e008      	b.n	800430a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <xTaskGetSchedulerState+0x38>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d102      	bne.n	8004306 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004300:	2302      	movs	r3, #2
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	e001      	b.n	800430a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004306:	2300      	movs	r3, #0
 8004308:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800430a:	687b      	ldr	r3, [r7, #4]
	}
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	20000114 	.word	0x20000114
 800431c:	20000130 	.word	0x20000130

08004320 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d069      	beq.n	800440a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <xTaskPriorityInherit+0xf4>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	429a      	cmp	r2, r3
 8004342:	d259      	bcs.n	80043f8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	2b00      	cmp	r3, #0
 800434a:	db06      	blt.n	800435a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <xTaskPriorityInherit+0xf4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	f1c3 0205 	rsb	r2, r3, #5
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	6959      	ldr	r1, [r3, #20]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a2b      	ldr	r2, [pc, #172]	; (8004418 <xTaskPriorityInherit+0xf8>)
 800436c:	4413      	add	r3, r2
 800436e:	4299      	cmp	r1, r3
 8004370:	d13a      	bne.n	80043e8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3304      	adds	r3, #4
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fbd4 	bl	8002b24 <uxListRemove>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d115      	bne.n	80043ae <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004386:	4924      	ldr	r1, [pc, #144]	; (8004418 <xTaskPriorityInherit+0xf8>)
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <xTaskPriorityInherit+0x8e>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	2201      	movs	r2, #1
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43da      	mvns	r2, r3
 80043a4:	4b1d      	ldr	r3, [pc, #116]	; (800441c <xTaskPriorityInherit+0xfc>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4013      	ands	r3, r2
 80043aa:	4a1c      	ldr	r2, [pc, #112]	; (800441c <xTaskPriorityInherit+0xfc>)
 80043ac:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043ae:	4b19      	ldr	r3, [pc, #100]	; (8004414 <xTaskPriorityInherit+0xf4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	2201      	movs	r2, #1
 80043be:	409a      	lsls	r2, r3
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <xTaskPriorityInherit+0xfc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	4a15      	ldr	r2, [pc, #84]	; (800441c <xTaskPriorityInherit+0xfc>)
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4a10      	ldr	r2, [pc, #64]	; (8004418 <xTaskPriorityInherit+0xf8>)
 80043d8:	441a      	add	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	3304      	adds	r3, #4
 80043de:	4619      	mov	r1, r3
 80043e0:	4610      	mov	r0, r2
 80043e2:	f7fe fb42 	bl	8002a6a <vListInsertEnd>
 80043e6:	e004      	b.n	80043f2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <xTaskPriorityInherit+0xf4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80043f2:	2301      	movs	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e008      	b.n	800440a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <xTaskPriorityInherit+0xf4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	429a      	cmp	r2, r3
 8004404:	d201      	bcs.n	800440a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004406:	2301      	movs	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800440a:	68fb      	ldr	r3, [r7, #12]
	}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000030 	.word	0x20000030
 8004418:	20000034 	.word	0x20000034
 800441c:	20000110 	.word	0x20000110

08004420 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d06c      	beq.n	8004510 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004436:	4b39      	ldr	r3, [pc, #228]	; (800451c <xTaskPriorityDisinherit+0xfc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	429a      	cmp	r2, r3
 800443e:	d009      	beq.n	8004454 <xTaskPriorityDisinherit+0x34>
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e7fe      	b.n	8004452 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d109      	bne.n	8004470 <xTaskPriorityDisinherit+0x50>
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	e7fe      	b.n	800446e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004474:	1e5a      	subs	r2, r3, #1
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004482:	429a      	cmp	r2, r3
 8004484:	d044      	beq.n	8004510 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	2b00      	cmp	r3, #0
 800448c:	d140      	bne.n	8004510 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	3304      	adds	r3, #4
 8004492:	4618      	mov	r0, r3
 8004494:	f7fe fb46 	bl	8002b24 <uxListRemove>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d115      	bne.n	80044ca <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	491f      	ldr	r1, [pc, #124]	; (8004520 <xTaskPriorityDisinherit+0x100>)
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <xTaskPriorityDisinherit+0xaa>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	2201      	movs	r2, #1
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43da      	mvns	r2, r3
 80044c0:	4b18      	ldr	r3, [pc, #96]	; (8004524 <xTaskPriorityDisinherit+0x104>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4013      	ands	r3, r2
 80044c6:	4a17      	ldr	r2, [pc, #92]	; (8004524 <xTaskPriorityDisinherit+0x104>)
 80044c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	f1c3 0205 	rsb	r2, r3, #5
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	2201      	movs	r2, #1
 80044e4:	409a      	lsls	r2, r3
 80044e6:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <xTaskPriorityDisinherit+0x104>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <xTaskPriorityDisinherit+0x104>)
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4a08      	ldr	r2, [pc, #32]	; (8004520 <xTaskPriorityDisinherit+0x100>)
 80044fe:	441a      	add	r2, r3
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f7fe faaf 	bl	8002a6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800450c:	2301      	movs	r3, #1
 800450e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004510:	697b      	ldr	r3, [r7, #20]
	}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000030 	.word	0x20000030
 8004520:	20000034 	.word	0x20000034
 8004524:	20000110 	.word	0x20000110

08004528 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004528:	b580      	push	{r7, lr}
 800452a:	b088      	sub	sp, #32
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004536:	2301      	movs	r3, #1
 8004538:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 8081 	beq.w	8004644 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e7fe      	b.n	800455c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d902      	bls.n	800456e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	e002      	b.n	8004574 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004572:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	429a      	cmp	r2, r3
 800457c:	d062      	beq.n	8004644 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	429a      	cmp	r2, r3
 8004586:	d15d      	bne.n	8004644 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004588:	4b30      	ldr	r3, [pc, #192]	; (800464c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	429a      	cmp	r2, r3
 8004590:	d109      	bne.n	80045a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004596:	f383 8811 	msr	BASEPRI, r3
 800459a:	f3bf 8f6f 	isb	sy
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	e7fe      	b.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	69fa      	ldr	r2, [r7, #28]
 80045b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	db04      	blt.n	80045c4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f1c3 0205 	rsb	r2, r3, #5
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	6959      	ldr	r1, [r3, #20]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4a1f      	ldr	r2, [pc, #124]	; (8004650 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80045d4:	4413      	add	r3, r2
 80045d6:	4299      	cmp	r1, r3
 80045d8:	d134      	bne.n	8004644 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	3304      	adds	r3, #4
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe faa0 	bl	8002b24 <uxListRemove>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d115      	bne.n	8004616 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ee:	4918      	ldr	r1, [pc, #96]	; (8004650 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004604:	2201      	movs	r2, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	4b11      	ldr	r3, [pc, #68]	; (8004654 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4013      	ands	r3, r2
 8004612:	4a10      	ldr	r2, [pc, #64]	; (8004654 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004614:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	2201      	movs	r2, #1
 800461c:	409a      	lsls	r2, r3
 800461e:	4b0d      	ldr	r3, [pc, #52]	; (8004654 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4313      	orrs	r3, r2
 8004624:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4a06      	ldr	r2, [pc, #24]	; (8004650 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004636:	441a      	add	r2, r3
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f7fe fa13 	bl	8002a6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004644:	bf00      	nop
 8004646:	3720      	adds	r7, #32
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000030 	.word	0x20000030
 8004650:	20000034 	.word	0x20000034
 8004654:	20000110 	.word	0x20000110

08004658 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800465c:	4b07      	ldr	r3, [pc, #28]	; (800467c <pvTaskIncrementMutexHeldCount+0x24>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d004      	beq.n	800466e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <pvTaskIncrementMutexHeldCount+0x24>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800466a:	3201      	adds	r2, #1
 800466c:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 800466e:	4b03      	ldr	r3, [pc, #12]	; (800467c <pvTaskIncrementMutexHeldCount+0x24>)
 8004670:	681b      	ldr	r3, [r3, #0]
	}
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	20000030 	.word	0x20000030

08004680 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800468a:	4b29      	ldr	r3, [pc, #164]	; (8004730 <prvAddCurrentTaskToDelayedList+0xb0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004690:	4b28      	ldr	r3, [pc, #160]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3304      	adds	r3, #4
 8004696:	4618      	mov	r0, r3
 8004698:	f7fe fa44 	bl	8002b24 <uxListRemove>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10b      	bne.n	80046ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80046a2:	4b24      	ldr	r3, [pc, #144]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	2201      	movs	r2, #1
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43da      	mvns	r2, r3
 80046b0:	4b21      	ldr	r3, [pc, #132]	; (8004738 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4013      	ands	r3, r2
 80046b6:	4a20      	ldr	r2, [pc, #128]	; (8004738 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c0:	d10a      	bne.n	80046d8 <prvAddCurrentTaskToDelayedList+0x58>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046c8:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3304      	adds	r3, #4
 80046ce:	4619      	mov	r1, r3
 80046d0:	481a      	ldr	r0, [pc, #104]	; (800473c <prvAddCurrentTaskToDelayedList+0xbc>)
 80046d2:	f7fe f9ca 	bl	8002a6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046d6:	e026      	b.n	8004726 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046e0:	4b14      	ldr	r3, [pc, #80]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d209      	bcs.n	8004704 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f0:	4b13      	ldr	r3, [pc, #76]	; (8004740 <prvAddCurrentTaskToDelayedList+0xc0>)
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	4b0f      	ldr	r3, [pc, #60]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7fe f9d8 	bl	8002ab2 <vListInsert>
}
 8004702:	e010      	b.n	8004726 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvAddCurrentTaskToDelayedList+0xb4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3304      	adds	r3, #4
 800470e:	4619      	mov	r1, r3
 8004710:	4610      	mov	r0, r2
 8004712:	f7fe f9ce 	bl	8002ab2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	429a      	cmp	r2, r3
 800471e:	d202      	bcs.n	8004726 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004720:	4a09      	ldr	r2, [pc, #36]	; (8004748 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6013      	str	r3, [r2, #0]
}
 8004726:	bf00      	nop
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	2000010c 	.word	0x2000010c
 8004734:	20000030 	.word	0x20000030
 8004738:	20000110 	.word	0x20000110
 800473c:	200000f4 	.word	0x200000f4
 8004740:	200000c4 	.word	0x200000c4
 8004744:	200000c0 	.word	0x200000c0
 8004748:	20000128 	.word	0x20000128

0800474c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004756:	f000 fad1 	bl	8004cfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800475a:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <xTimerCreateTimerTask+0x54>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00b      	beq.n	800477a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004762:	4b10      	ldr	r3, [pc, #64]	; (80047a4 <xTimerCreateTimerTask+0x58>)
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	2302      	movs	r3, #2
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	2300      	movs	r3, #0
 800476c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004770:	490d      	ldr	r1, [pc, #52]	; (80047a8 <xTimerCreateTimerTask+0x5c>)
 8004772:	480e      	ldr	r0, [pc, #56]	; (80047ac <xTimerCreateTimerTask+0x60>)
 8004774:	f7ff f846 	bl	8003804 <xTaskCreate>
 8004778:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d109      	bne.n	8004794 <xTimerCreateTimerTask+0x48>
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	603b      	str	r3, [r7, #0]
 8004792:	e7fe      	b.n	8004792 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8004794:	687b      	ldr	r3, [r7, #4]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20000164 	.word	0x20000164
 80047a4:	20000168 	.word	0x20000168
 80047a8:	0800563c 	.word	0x0800563c
 80047ac:	080048e1 	.word	0x080048e1

080047b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b08a      	sub	sp, #40	; 0x28
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047be:	2300      	movs	r3, #0
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d109      	bne.n	80047dc <xTimerGenericCommand+0x2c>
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
 80047d8:	623b      	str	r3, [r7, #32]
 80047da:	e7fe      	b.n	80047da <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047dc:	4b19      	ldr	r3, [pc, #100]	; (8004844 <xTimerGenericCommand+0x94>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d02a      	beq.n	800483a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	dc18      	bgt.n	8004828 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047f6:	f7ff fd75 	bl	80042e4 <xTaskGetSchedulerState>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d109      	bne.n	8004814 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004800:	4b10      	ldr	r3, [pc, #64]	; (8004844 <xTimerGenericCommand+0x94>)
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	f107 0114 	add.w	r1, r7, #20
 8004808:	2300      	movs	r3, #0
 800480a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480c:	f7fe fa7a 	bl	8002d04 <xQueueGenericSend>
 8004810:	6278      	str	r0, [r7, #36]	; 0x24
 8004812:	e012      	b.n	800483a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <xTimerGenericCommand+0x94>)
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	f107 0114 	add.w	r1, r7, #20
 800481c:	2300      	movs	r3, #0
 800481e:	2200      	movs	r2, #0
 8004820:	f7fe fa70 	bl	8002d04 <xQueueGenericSend>
 8004824:	6278      	str	r0, [r7, #36]	; 0x24
 8004826:	e008      	b.n	800483a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004828:	4b06      	ldr	r3, [pc, #24]	; (8004844 <xTimerGenericCommand+0x94>)
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	f107 0114 	add.w	r1, r7, #20
 8004830:	2300      	movs	r3, #0
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	f7fe fb60 	bl	8002ef8 <xQueueGenericSendFromISR>
 8004838:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800483c:	4618      	mov	r0, r3
 800483e:	3728      	adds	r7, #40	; 0x28
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000164 	.word	0x20000164

08004848 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b088      	sub	sp, #32
 800484c:	af02      	add	r7, sp, #8
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <prvProcessExpiredTimer+0x94>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	3304      	adds	r3, #4
 8004860:	4618      	mov	r0, r3
 8004862:	f7fe f95f 	bl	8002b24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d021      	beq.n	80048b8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	699a      	ldr	r2, [r3, #24]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	18d1      	adds	r1, r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	6978      	ldr	r0, [r7, #20]
 8004882:	f000 f8d1 	bl	8004a28 <prvInsertTimerInActiveList>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01e      	beq.n	80048ca <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800488c:	2300      	movs	r3, #0
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2300      	movs	r3, #0
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	2100      	movs	r1, #0
 8004896:	6978      	ldr	r0, [r7, #20]
 8004898:	f7ff ff8a 	bl	80047b0 <xTimerGenericCommand>
 800489c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d112      	bne.n	80048ca <prvProcessExpiredTimer+0x82>
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e7fe      	b.n	80048b6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	6978      	ldr	r0, [r7, #20]
 80048d0:	4798      	blx	r3
}
 80048d2:	bf00      	nop
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	2000015c 	.word	0x2000015c

080048e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048e8:	f107 0308 	add.w	r3, r7, #8
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f857 	bl	80049a0 <prvGetNextExpireTime>
 80048f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4619      	mov	r1, r3
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 f803 	bl	8004904 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048fe:	f000 f8d5 	bl	8004aac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004902:	e7f1      	b.n	80048e8 <prvTimerTask+0x8>

08004904 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800490e:	f7ff f937 	bl	8003b80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004912:	f107 0308 	add.w	r3, r7, #8
 8004916:	4618      	mov	r0, r3
 8004918:	f000 f866 	bl	80049e8 <prvSampleTimeNow>
 800491c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d130      	bne.n	8004986 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10a      	bne.n	8004940 <prvProcessTimerOrBlockTask+0x3c>
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	429a      	cmp	r2, r3
 8004930:	d806      	bhi.n	8004940 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004932:	f7ff f933 	bl	8003b9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004936:	68f9      	ldr	r1, [r7, #12]
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff ff85 	bl	8004848 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800493e:	e024      	b.n	800498a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d008      	beq.n	8004958 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004946:	4b13      	ldr	r3, [pc, #76]	; (8004994 <prvProcessTimerOrBlockTask+0x90>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <prvProcessTimerOrBlockTask+0x50>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <prvProcessTimerOrBlockTask+0x52>
 8004954:	2300      	movs	r3, #0
 8004956:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004958:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <prvProcessTimerOrBlockTask+0x94>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	4619      	mov	r1, r3
 8004966:	f7fe ff19 	bl	800379c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800496a:	f7ff f917 	bl	8003b9c <xTaskResumeAll>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004974:	4b09      	ldr	r3, [pc, #36]	; (800499c <prvProcessTimerOrBlockTask+0x98>)
 8004976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	f3bf 8f6f 	isb	sy
}
 8004984:	e001      	b.n	800498a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004986:	f7ff f909 	bl	8003b9c <xTaskResumeAll>
}
 800498a:	bf00      	nop
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	20000160 	.word	0x20000160
 8004998:	20000164 	.word	0x20000164
 800499c:	e000ed04 	.word	0xe000ed04

080049a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049a8:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <prvGetNextExpireTime+0x44>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <prvGetNextExpireTime+0x16>
 80049b2:	2201      	movs	r2, #1
 80049b4:	e000      	b.n	80049b8 <prvGetNextExpireTime+0x18>
 80049b6:	2200      	movs	r2, #0
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049c4:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <prvGetNextExpireTime+0x44>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e001      	b.n	80049d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049d4:	68fb      	ldr	r3, [r7, #12]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	2000015c 	.word	0x2000015c

080049e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049f0:	f7ff f970 	bl	8003cd4 <xTaskGetTickCount>
 80049f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <prvSampleTimeNow+0x3c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d205      	bcs.n	8004a0c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a00:	f000 f918 	bl	8004c34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
 8004a0a:	e002      	b.n	8004a12 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a12:	4a04      	ldr	r2, [pc, #16]	; (8004a24 <prvSampleTimeNow+0x3c>)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a18:	68fb      	ldr	r3, [r7, #12]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	2000016c 	.word	0x2000016c

08004a28 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d812      	bhi.n	8004a74 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d302      	bcc.n	8004a62 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e01b      	b.n	8004a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <prvInsertTimerInActiveList+0x7c>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f7fe f820 	bl	8002ab2 <vListInsert>
 8004a72:	e012      	b.n	8004a9a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d206      	bcs.n	8004a8a <prvInsertTimerInActiveList+0x62>
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e007      	b.n	8004a9a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a8a:	4b07      	ldr	r3, [pc, #28]	; (8004aa8 <prvInsertTimerInActiveList+0x80>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f7fe f80c 	bl	8002ab2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a9a:	697b      	ldr	r3, [r7, #20]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000160 	.word	0x20000160
 8004aa8:	2000015c 	.word	0x2000015c

08004aac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08c      	sub	sp, #48	; 0x30
 8004ab0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ab2:	e0ac      	b.n	8004c0e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f2c0 80a8 	blt.w	8004c0c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	3304      	adds	r3, #4
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe f829 	bl	8002b24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ad2:	1d3b      	adds	r3, r7, #4
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff87 	bl	80049e8 <prvSampleTimeNow>
 8004ada:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b09      	cmp	r3, #9
 8004ae0:	f200 8095 	bhi.w	8004c0e <prvProcessReceivedCommands+0x162>
 8004ae4:	a201      	add	r2, pc, #4	; (adr r2, 8004aec <prvProcessReceivedCommands+0x40>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b15 	.word	0x08004b15
 8004af4:	08004b15 	.word	0x08004b15
 8004af8:	08004b87 	.word	0x08004b87
 8004afc:	08004b9b 	.word	0x08004b9b
 8004b00:	08004be3 	.word	0x08004be3
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b15 	.word	0x08004b15
 8004b0c:	08004b87 	.word	0x08004b87
 8004b10:	08004b9b 	.word	0x08004b9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	18d1      	adds	r1, r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a3a      	ldr	r2, [r7, #32]
 8004b32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b34:	f7ff ff78 	bl	8004a28 <prvInsertTimerInActiveList>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d067      	beq.n	8004c0e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b44:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d05c      	beq.n	8004c0e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	441a      	add	r2, r3
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	2300      	movs	r3, #0
 8004b62:	2100      	movs	r1, #0
 8004b64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b66:	f7ff fe23 	bl	80047b0 <xTimerGenericCommand>
 8004b6a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d14d      	bne.n	8004c0e <prvProcessReceivedCommands+0x162>
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e7fe      	b.n	8004b84 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b8c:	f023 0301 	bic.w	r3, r3, #1
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004b98:	e039      	b.n	8004c0e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <prvProcessReceivedCommands+0x122>
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	617b      	str	r3, [r7, #20]
 8004bcc:	e7fe      	b.n	8004bcc <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	18d1      	adds	r1, r2, r3
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	6a3a      	ldr	r2, [r7, #32]
 8004bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bdc:	f7ff ff24 	bl	8004a28 <prvInsertTimerInActiveList>
					break;
 8004be0:	e015      	b.n	8004c0e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d103      	bne.n	8004bf8 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bf2:	f000 fbbf 	bl	8005374 <vPortFree>
 8004bf6:	e00a      	b.n	8004c0e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	b2da      	uxtb	r2, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c0a:	e000      	b.n	8004c0e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004c0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c0e:	4b08      	ldr	r3, [pc, #32]	; (8004c30 <prvProcessReceivedCommands+0x184>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f107 0108 	add.w	r1, r7, #8
 8004c16:	2200      	movs	r2, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7fe fa8b 	bl	8003134 <xQueueReceive>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f47f af47 	bne.w	8004ab4 <prvProcessReceivedCommands+0x8>
	}
}
 8004c26:	bf00      	nop
 8004c28:	3728      	adds	r7, #40	; 0x28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000164 	.word	0x20000164

08004c34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c3a:	e047      	b.n	8004ccc <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c3c:	4b2d      	ldr	r3, [pc, #180]	; (8004cf4 <prvSwitchTimerLists+0xc0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c46:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <prvSwitchTimerLists+0xc0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	3304      	adds	r3, #4
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fd ff65 	bl	8002b24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d02d      	beq.n	8004ccc <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4413      	add	r3, r2
 8004c78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d90e      	bls.n	8004ca0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c8e:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <prvSwitchTimerLists+0xc0>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7fd ff0a 	bl	8002ab2 <vListInsert>
 8004c9e:	e015      	b.n	8004ccc <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	693a      	ldr	r2, [r7, #16]
 8004ca8:	2100      	movs	r1, #0
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f7ff fd80 	bl	80047b0 <xTimerGenericCommand>
 8004cb0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <prvSwitchTimerLists+0x98>
 8004cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbc:	f383 8811 	msr	BASEPRI, r3
 8004cc0:	f3bf 8f6f 	isb	sy
 8004cc4:	f3bf 8f4f 	dsb	sy
 8004cc8:	603b      	str	r3, [r7, #0]
 8004cca:	e7fe      	b.n	8004cca <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <prvSwitchTimerLists+0xc0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1b2      	bne.n	8004c3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004cd6:	4b07      	ldr	r3, [pc, #28]	; (8004cf4 <prvSwitchTimerLists+0xc0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004cdc:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <prvSwitchTimerLists+0xc4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a04      	ldr	r2, [pc, #16]	; (8004cf4 <prvSwitchTimerLists+0xc0>)
 8004ce2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ce4:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <prvSwitchTimerLists+0xc4>)
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	6013      	str	r3, [r2, #0]
}
 8004cea:	bf00      	nop
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	2000015c 	.word	0x2000015c
 8004cf8:	20000160 	.word	0x20000160

08004cfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d00:	f000 f95c 	bl	8004fbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d04:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <prvCheckForValidListAndQueue+0x54>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11d      	bne.n	8004d48 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d0c:	4811      	ldr	r0, [pc, #68]	; (8004d54 <prvCheckForValidListAndQueue+0x58>)
 8004d0e:	f7fd fe7f 	bl	8002a10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d12:	4811      	ldr	r0, [pc, #68]	; (8004d58 <prvCheckForValidListAndQueue+0x5c>)
 8004d14:	f7fd fe7c 	bl	8002a10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d18:	4b10      	ldr	r3, [pc, #64]	; (8004d5c <prvCheckForValidListAndQueue+0x60>)
 8004d1a:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <prvCheckForValidListAndQueue+0x58>)
 8004d1c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d1e:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <prvCheckForValidListAndQueue+0x64>)
 8004d20:	4a0d      	ldr	r2, [pc, #52]	; (8004d58 <prvCheckForValidListAndQueue+0x5c>)
 8004d22:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004d24:	2200      	movs	r2, #0
 8004d26:	210c      	movs	r1, #12
 8004d28:	200a      	movs	r0, #10
 8004d2a:	f7fd ff8d 	bl	8002c48 <xQueueGenericCreate>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <prvCheckForValidListAndQueue+0x54>)
 8004d32:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d34:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <prvCheckForValidListAndQueue+0x54>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d005      	beq.n	8004d48 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d3c:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <prvCheckForValidListAndQueue+0x54>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4908      	ldr	r1, [pc, #32]	; (8004d64 <prvCheckForValidListAndQueue+0x68>)
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fd02 	bl	800374c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d48:	f000 f966 	bl	8005018 <vPortExitCritical>
}
 8004d4c:	bf00      	nop
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	20000164 	.word	0x20000164
 8004d54:	20000134 	.word	0x20000134
 8004d58:	20000148 	.word	0x20000148
 8004d5c:	2000015c 	.word	0x2000015c
 8004d60:	20000160 	.word	0x20000160
 8004d64:	08005644 	.word	0x08005644

08004d68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3b04      	subs	r3, #4
 8004d78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3b04      	subs	r3, #4
 8004d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f023 0201 	bic.w	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3b04      	subs	r3, #4
 8004d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d98:	4a0c      	ldr	r2, [pc, #48]	; (8004dcc <pxPortInitialiseStack+0x64>)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b14      	subs	r3, #20
 8004da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	3b04      	subs	r3, #4
 8004dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f06f 0202 	mvn.w	r2, #2
 8004db6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	3b20      	subs	r3, #32
 8004dbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	08004dd1 	.word	0x08004dd1

08004dd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004dda:	4b11      	ldr	r3, [pc, #68]	; (8004e20 <prvTaskExitError+0x50>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004de2:	d009      	beq.n	8004df8 <prvTaskExitError+0x28>
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	e7fe      	b.n	8004df6 <prvTaskExitError+0x26>
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e0a:	bf00      	nop
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0fc      	beq.n	8004e0c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	2000000c 	.word	0x2000000c
	...

08004e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <pxCurrentTCBConst2>)
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	6808      	ldr	r0, [r1, #0]
 8004e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3a:	f380 8809 	msr	PSP, r0
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f04f 0000 	mov.w	r0, #0
 8004e46:	f380 8811 	msr	BASEPRI, r0
 8004e4a:	4770      	bx	lr
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst2>:
 8004e50:	20000030 	.word	0x20000030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e58:	4808      	ldr	r0, [pc, #32]	; (8004e7c <prvPortStartFirstTask+0x24>)
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	6800      	ldr	r0, [r0, #0]
 8004e5e:	f380 8808 	msr	MSP, r0
 8004e62:	f04f 0000 	mov.w	r0, #0
 8004e66:	f380 8814 	msr	CONTROL, r0
 8004e6a:	b662      	cpsie	i
 8004e6c:	b661      	cpsie	f
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	df00      	svc	0
 8004e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e7a:	bf00      	nop
 8004e7c:	e000ed08 	.word	0xe000ed08

08004e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e86:	4b44      	ldr	r3, [pc, #272]	; (8004f98 <xPortStartScheduler+0x118>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a44      	ldr	r2, [pc, #272]	; (8004f9c <xPortStartScheduler+0x11c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d109      	bne.n	8004ea4 <xPortStartScheduler+0x24>
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	e7fe      	b.n	8004ea2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ea4:	4b3c      	ldr	r3, [pc, #240]	; (8004f98 <xPortStartScheduler+0x118>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a3d      	ldr	r2, [pc, #244]	; (8004fa0 <xPortStartScheduler+0x120>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d109      	bne.n	8004ec2 <xPortStartScheduler+0x42>
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	e7fe      	b.n	8004ec0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ec2:	4b38      	ldr	r3, [pc, #224]	; (8004fa4 <xPortStartScheduler+0x124>)
 8004ec4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	22ff      	movs	r2, #255	; 0xff
 8004ed2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ee4:	b2da      	uxtb	r2, r3
 8004ee6:	4b30      	ldr	r3, [pc, #192]	; (8004fa8 <xPortStartScheduler+0x128>)
 8004ee8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eea:	4b30      	ldr	r3, [pc, #192]	; (8004fac <xPortStartScheduler+0x12c>)
 8004eec:	2207      	movs	r2, #7
 8004eee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ef0:	e009      	b.n	8004f06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004ef2:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <xPortStartScheduler+0x12c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	4a2c      	ldr	r2, [pc, #176]	; (8004fac <xPortStartScheduler+0x12c>)
 8004efa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f06:	78fb      	ldrb	r3, [r7, #3]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0e:	2b80      	cmp	r3, #128	; 0x80
 8004f10:	d0ef      	beq.n	8004ef2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f12:	4b26      	ldr	r3, [pc, #152]	; (8004fac <xPortStartScheduler+0x12c>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f1c3 0307 	rsb	r3, r3, #7
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d009      	beq.n	8004f32 <xPortStartScheduler+0xb2>
 8004f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f22:	f383 8811 	msr	BASEPRI, r3
 8004f26:	f3bf 8f6f 	isb	sy
 8004f2a:	f3bf 8f4f 	dsb	sy
 8004f2e:	60bb      	str	r3, [r7, #8]
 8004f30:	e7fe      	b.n	8004f30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f32:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <xPortStartScheduler+0x12c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	4a1c      	ldr	r2, [pc, #112]	; (8004fac <xPortStartScheduler+0x12c>)
 8004f3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f3c:	4b1b      	ldr	r3, [pc, #108]	; (8004fac <xPortStartScheduler+0x12c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f44:	4a19      	ldr	r2, [pc, #100]	; (8004fac <xPortStartScheduler+0x12c>)
 8004f46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f50:	4b17      	ldr	r3, [pc, #92]	; (8004fb0 <xPortStartScheduler+0x130>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <xPortStartScheduler+0x130>)
 8004f56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <xPortStartScheduler+0x130>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <xPortStartScheduler+0x130>)
 8004f62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004f66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f68:	f000 f8d6 	bl	8005118 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f6c:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <xPortStartScheduler+0x134>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f72:	f000 f8f5 	bl	8005160 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f76:	4b10      	ldr	r3, [pc, #64]	; (8004fb8 <xPortStartScheduler+0x138>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a0f      	ldr	r2, [pc, #60]	; (8004fb8 <xPortStartScheduler+0x138>)
 8004f7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f82:	f7ff ff69 	bl	8004e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f86:	f7fe ff6d 	bl	8003e64 <vTaskSwitchContext>
	prvTaskExitError();
 8004f8a:	f7ff ff21 	bl	8004dd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	e000ed00 	.word	0xe000ed00
 8004f9c:	410fc271 	.word	0x410fc271
 8004fa0:	410fc270 	.word	0x410fc270
 8004fa4:	e000e400 	.word	0xe000e400
 8004fa8:	20000170 	.word	0x20000170
 8004fac:	20000174 	.word	0x20000174
 8004fb0:	e000ed20 	.word	0xe000ed20
 8004fb4:	2000000c 	.word	0x2000000c
 8004fb8:	e000ef34 	.word	0xe000ef34

08004fbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc6:	f383 8811 	msr	BASEPRI, r3
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <vPortEnterCritical+0x54>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <vPortEnterCritical+0x54>)
 8004fdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fde:	4b0c      	ldr	r3, [pc, #48]	; (8005010 <vPortEnterCritical+0x54>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10e      	bne.n	8005004 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fe6:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <vPortEnterCritical+0x58>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <vPortEnterCritical+0x48>
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	603b      	str	r3, [r7, #0]
 8005002:	e7fe      	b.n	8005002 <vPortEnterCritical+0x46>
	}
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	2000000c 	.word	0x2000000c
 8005014:	e000ed04 	.word	0xe000ed04

08005018 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800501e:	4b11      	ldr	r3, [pc, #68]	; (8005064 <vPortExitCritical+0x4c>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d109      	bne.n	800503a <vPortExitCritical+0x22>
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	607b      	str	r3, [r7, #4]
 8005038:	e7fe      	b.n	8005038 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800503a:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <vPortExitCritical+0x4c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3b01      	subs	r3, #1
 8005040:	4a08      	ldr	r2, [pc, #32]	; (8005064 <vPortExitCritical+0x4c>)
 8005042:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005044:	4b07      	ldr	r3, [pc, #28]	; (8005064 <vPortExitCritical+0x4c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <vPortExitCritical+0x3e>
 800504c:	2300      	movs	r3, #0
 800504e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	2000000c 	.word	0x2000000c
	...

08005070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005070:	f3ef 8009 	mrs	r0, PSP
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <pxCurrentTCBConst>)
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	f01e 0f10 	tst.w	lr, #16
 8005080:	bf08      	it	eq
 8005082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508a:	6010      	str	r0, [r2, #0]
 800508c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005094:	f380 8811 	msr	BASEPRI, r0
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f7fe fee0 	bl	8003e64 <vTaskSwitchContext>
 80050a4:	f04f 0000 	mov.w	r0, #0
 80050a8:	f380 8811 	msr	BASEPRI, r0
 80050ac:	bc09      	pop	{r0, r3}
 80050ae:	6819      	ldr	r1, [r3, #0]
 80050b0:	6808      	ldr	r0, [r1, #0]
 80050b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b6:	f01e 0f10 	tst.w	lr, #16
 80050ba:	bf08      	it	eq
 80050bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80050c0:	f380 8809 	msr	PSP, r0
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	f3af 8000 	nop.w

080050d0 <pxCurrentTCBConst>:
 80050d0:	20000030 	.word	0x20000030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop

080050d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050f0:	f7fe fe00 	bl	8003cf4 <xTaskIncrementTick>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050fa:	4b06      	ldr	r3, [pc, #24]	; (8005114 <SysTick_Handler+0x3c>)
 80050fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800510c:	bf00      	nop
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	e000ed04 	.word	0xe000ed04

08005118 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800511c:	4b0b      	ldr	r3, [pc, #44]	; (800514c <vPortSetupTimerInterrupt+0x34>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005122:	4b0b      	ldr	r3, [pc, #44]	; (8005150 <vPortSetupTimerInterrupt+0x38>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005128:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <vPortSetupTimerInterrupt+0x3c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a0a      	ldr	r2, [pc, #40]	; (8005158 <vPortSetupTimerInterrupt+0x40>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	099b      	lsrs	r3, r3, #6
 8005134:	4a09      	ldr	r2, [pc, #36]	; (800515c <vPortSetupTimerInterrupt+0x44>)
 8005136:	3b01      	subs	r3, #1
 8005138:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <vPortSetupTimerInterrupt+0x34>)
 800513c:	2207      	movs	r2, #7
 800513e:	601a      	str	r2, [r3, #0]
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	e000e010 	.word	0xe000e010
 8005150:	e000e018 	.word	0xe000e018
 8005154:	20000000 	.word	0x20000000
 8005158:	10624dd3 	.word	0x10624dd3
 800515c:	e000e014 	.word	0xe000e014

08005160 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005160:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005170 <vPortEnableVFP+0x10>
 8005164:	6801      	ldr	r1, [r0, #0]
 8005166:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800516a:	6001      	str	r1, [r0, #0]
 800516c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800516e:	bf00      	nop
 8005170:	e000ed88 	.word	0xe000ed88

08005174 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800517a:	f3ef 8305 	mrs	r3, IPSR
 800517e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2b0f      	cmp	r3, #15
 8005184:	d913      	bls.n	80051ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005186:	4a16      	ldr	r2, [pc, #88]	; (80051e0 <vPortValidateInterruptPriority+0x6c>)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4413      	add	r3, r2
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005190:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <vPortValidateInterruptPriority+0x70>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	7afa      	ldrb	r2, [r7, #11]
 8005196:	429a      	cmp	r2, r3
 8005198:	d209      	bcs.n	80051ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	e7fe      	b.n	80051ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80051ae:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <vPortValidateInterruptPriority+0x74>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80051b6:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <vPortValidateInterruptPriority+0x78>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d909      	bls.n	80051d2 <vPortValidateInterruptPriority+0x5e>
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	603b      	str	r3, [r7, #0]
 80051d0:	e7fe      	b.n	80051d0 <vPortValidateInterruptPriority+0x5c>
	}
 80051d2:	bf00      	nop
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000e3f0 	.word	0xe000e3f0
 80051e4:	20000170 	.word	0x20000170
 80051e8:	e000ed0c 	.word	0xe000ed0c
 80051ec:	20000174 	.word	0x20000174

080051f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051fc:	f7fe fcc0 	bl	8003b80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005200:	4b57      	ldr	r3, [pc, #348]	; (8005360 <pvPortMalloc+0x170>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005208:	f000 f90c 	bl	8005424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800520c:	4b55      	ldr	r3, [pc, #340]	; (8005364 <pvPortMalloc+0x174>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4013      	ands	r3, r2
 8005214:	2b00      	cmp	r3, #0
 8005216:	f040 808c 	bne.w	8005332 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01c      	beq.n	800525a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005220:	2208      	movs	r2, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4413      	add	r3, r2
 8005226:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	2b00      	cmp	r3, #0
 8005230:	d013      	beq.n	800525a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	3308      	adds	r3, #8
 800523a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <pvPortMalloc+0x6a>
 8005246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e7fe      	b.n	8005258 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d068      	beq.n	8005332 <pvPortMalloc+0x142>
 8005260:	4b41      	ldr	r3, [pc, #260]	; (8005368 <pvPortMalloc+0x178>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	429a      	cmp	r2, r3
 8005268:	d863      	bhi.n	8005332 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800526a:	4b40      	ldr	r3, [pc, #256]	; (800536c <pvPortMalloc+0x17c>)
 800526c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800526e:	4b3f      	ldr	r3, [pc, #252]	; (800536c <pvPortMalloc+0x17c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005274:	e004      	b.n	8005280 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005278:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800527a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	429a      	cmp	r2, r3
 8005288:	d903      	bls.n	8005292 <pvPortMalloc+0xa2>
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f1      	bne.n	8005276 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005292:	4b33      	ldr	r3, [pc, #204]	; (8005360 <pvPortMalloc+0x170>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005298:	429a      	cmp	r2, r3
 800529a:	d04a      	beq.n	8005332 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2208      	movs	r2, #8
 80052a2:	4413      	add	r3, r2
 80052a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	1ad2      	subs	r2, r2, r3
 80052b6:	2308      	movs	r3, #8
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d91e      	bls.n	80052fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4413      	add	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <pvPortMalloc+0xf4>
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	e7fe      	b.n	80052e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	1ad2      	subs	r2, r2, r3
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052f6:	69b8      	ldr	r0, [r7, #24]
 80052f8:	f000 f8f6 	bl	80054e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <pvPortMalloc+0x178>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	4a18      	ldr	r2, [pc, #96]	; (8005368 <pvPortMalloc+0x178>)
 8005308:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800530a:	4b17      	ldr	r3, [pc, #92]	; (8005368 <pvPortMalloc+0x178>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4b18      	ldr	r3, [pc, #96]	; (8005370 <pvPortMalloc+0x180>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d203      	bcs.n	800531e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <pvPortMalloc+0x178>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a15      	ldr	r2, [pc, #84]	; (8005370 <pvPortMalloc+0x180>)
 800531c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	4b10      	ldr	r3, [pc, #64]	; (8005364 <pvPortMalloc+0x174>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	431a      	orrs	r2, r3
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005332:	f7fe fc33 	bl	8003b9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	2b00      	cmp	r3, #0
 800533e:	d009      	beq.n	8005354 <pvPortMalloc+0x164>
 8005340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	60fb      	str	r3, [r7, #12]
 8005352:	e7fe      	b.n	8005352 <pvPortMalloc+0x162>
	return pvReturn;
 8005354:	69fb      	ldr	r3, [r7, #28]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3728      	adds	r7, #40	; 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	20012d80 	.word	0x20012d80
 8005364:	20012d8c 	.word	0x20012d8c
 8005368:	20012d84 	.word	0x20012d84
 800536c:	20012d78 	.word	0x20012d78
 8005370:	20012d88 	.word	0x20012d88

08005374 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b086      	sub	sp, #24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d046      	beq.n	8005414 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005386:	2308      	movs	r3, #8
 8005388:	425b      	negs	r3, r3
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4413      	add	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	4b20      	ldr	r3, [pc, #128]	; (800541c <vPortFree+0xa8>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <vPortFree+0x42>
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	e7fe      	b.n	80053b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <vPortFree+0x5e>
 80053be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c2:	f383 8811 	msr	BASEPRI, r3
 80053c6:	f3bf 8f6f 	isb	sy
 80053ca:	f3bf 8f4f 	dsb	sy
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	e7fe      	b.n	80053d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	4b11      	ldr	r3, [pc, #68]	; (800541c <vPortFree+0xa8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d019      	beq.n	8005414 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d115      	bne.n	8005414 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4b0b      	ldr	r3, [pc, #44]	; (800541c <vPortFree+0xa8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	401a      	ands	r2, r3
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053f8:	f7fe fbc2 	bl	8003b80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	4b07      	ldr	r3, [pc, #28]	; (8005420 <vPortFree+0xac>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4413      	add	r3, r2
 8005406:	4a06      	ldr	r2, [pc, #24]	; (8005420 <vPortFree+0xac>)
 8005408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800540a:	6938      	ldr	r0, [r7, #16]
 800540c:	f000 f86c 	bl	80054e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005410:	f7fe fbc4 	bl	8003b9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005414:	bf00      	nop
 8005416:	3718      	adds	r7, #24
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20012d8c 	.word	0x20012d8c
 8005420:	20012d84 	.word	0x20012d84

08005424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800542a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800542e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005430:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <prvHeapInit+0xac>)
 8005432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00c      	beq.n	8005458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	3307      	adds	r3, #7
 8005442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0307 	bic.w	r3, r3, #7
 800544a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <prvHeapInit+0xac>)
 8005454:	4413      	add	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <prvHeapInit+0xb0>)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005462:	4b1c      	ldr	r3, [pc, #112]	; (80054d4 <prvHeapInit+0xb0>)
 8005464:	2200      	movs	r2, #0
 8005466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4413      	add	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005470:	2208      	movs	r2, #8
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4a15      	ldr	r2, [pc, #84]	; (80054d8 <prvHeapInit+0xb4>)
 8005484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005486:	4b14      	ldr	r3, [pc, #80]	; (80054d8 <prvHeapInit+0xb4>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2200      	movs	r2, #0
 800548c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <prvHeapInit+0xb4>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	1ad2      	subs	r2, r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054a4:	4b0c      	ldr	r3, [pc, #48]	; (80054d8 <prvHeapInit+0xb4>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <prvHeapInit+0xb8>)
 80054b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	4a09      	ldr	r2, [pc, #36]	; (80054e0 <prvHeapInit+0xbc>)
 80054ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <prvHeapInit+0xc0>)
 80054be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80054c2:	601a      	str	r2, [r3, #0]
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000178 	.word	0x20000178
 80054d4:	20012d78 	.word	0x20012d78
 80054d8:	20012d80 	.word	0x20012d80
 80054dc:	20012d88 	.word	0x20012d88
 80054e0:	20012d84 	.word	0x20012d84
 80054e4:	20012d8c 	.word	0x20012d8c

080054e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054f0:	4b28      	ldr	r3, [pc, #160]	; (8005594 <prvInsertBlockIntoFreeList+0xac>)
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	e002      	b.n	80054fc <prvInsertBlockIntoFreeList+0x14>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	60fb      	str	r3, [r7, #12]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d8f7      	bhi.n	80054f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	4413      	add	r3, r2
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	429a      	cmp	r2, r3
 8005516:	d108      	bne.n	800552a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	441a      	add	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d118      	bne.n	8005570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b15      	ldr	r3, [pc, #84]	; (8005598 <prvInsertBlockIntoFreeList+0xb0>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d00d      	beq.n	8005566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	601a      	str	r2, [r3, #0]
 8005564:	e008      	b.n	8005578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005566:	4b0c      	ldr	r3, [pc, #48]	; (8005598 <prvInsertBlockIntoFreeList+0xb0>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e003      	b.n	8005578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d002      	beq.n	8005586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20012d78 	.word	0x20012d78
 8005598:	20012d80 	.word	0x20012d80

0800559c <__libc_init_array>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	4e0d      	ldr	r6, [pc, #52]	; (80055d4 <__libc_init_array+0x38>)
 80055a0:	4c0d      	ldr	r4, [pc, #52]	; (80055d8 <__libc_init_array+0x3c>)
 80055a2:	1ba4      	subs	r4, r4, r6
 80055a4:	10a4      	asrs	r4, r4, #2
 80055a6:	2500      	movs	r5, #0
 80055a8:	42a5      	cmp	r5, r4
 80055aa:	d109      	bne.n	80055c0 <__libc_init_array+0x24>
 80055ac:	4e0b      	ldr	r6, [pc, #44]	; (80055dc <__libc_init_array+0x40>)
 80055ae:	4c0c      	ldr	r4, [pc, #48]	; (80055e0 <__libc_init_array+0x44>)
 80055b0:	f000 f82c 	bl	800560c <_init>
 80055b4:	1ba4      	subs	r4, r4, r6
 80055b6:	10a4      	asrs	r4, r4, #2
 80055b8:	2500      	movs	r5, #0
 80055ba:	42a5      	cmp	r5, r4
 80055bc:	d105      	bne.n	80055ca <__libc_init_array+0x2e>
 80055be:	bd70      	pop	{r4, r5, r6, pc}
 80055c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055c4:	4798      	blx	r3
 80055c6:	3501      	adds	r5, #1
 80055c8:	e7ee      	b.n	80055a8 <__libc_init_array+0xc>
 80055ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80055ce:	4798      	blx	r3
 80055d0:	3501      	adds	r5, #1
 80055d2:	e7f2      	b.n	80055ba <__libc_init_array+0x1e>
 80055d4:	0800566c 	.word	0x0800566c
 80055d8:	0800566c 	.word	0x0800566c
 80055dc:	0800566c 	.word	0x0800566c
 80055e0:	08005670 	.word	0x08005670

080055e4 <memcpy>:
 80055e4:	b510      	push	{r4, lr}
 80055e6:	1e43      	subs	r3, r0, #1
 80055e8:	440a      	add	r2, r1
 80055ea:	4291      	cmp	r1, r2
 80055ec:	d100      	bne.n	80055f0 <memcpy+0xc>
 80055ee:	bd10      	pop	{r4, pc}
 80055f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055f8:	e7f7      	b.n	80055ea <memcpy+0x6>

080055fa <memset>:
 80055fa:	4402      	add	r2, r0
 80055fc:	4603      	mov	r3, r0
 80055fe:	4293      	cmp	r3, r2
 8005600:	d100      	bne.n	8005604 <memset+0xa>
 8005602:	4770      	bx	lr
 8005604:	f803 1b01 	strb.w	r1, [r3], #1
 8005608:	e7f9      	b.n	80055fe <memset+0x4>
	...

0800560c <_init>:
 800560c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560e:	bf00      	nop
 8005610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005612:	bc08      	pop	{r3}
 8005614:	469e      	mov	lr, r3
 8005616:	4770      	bx	lr

08005618 <_fini>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	bf00      	nop
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr
