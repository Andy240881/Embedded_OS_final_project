
Embedded_OS_Lab2-2_P76091307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006674  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006804  08006804  00016804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800686c  0800686c  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  0800686c  0800686c  0001686c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006874  08006874  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006874  08006874  00016874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006878  08006878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800687c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f70  20000018  08006894  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f88  08006894  00022f88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f98  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d3a  00000000  00000000  00034fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  00037d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  00039008  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021da2  00000000  00000000  0003a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e41a  00000000  00000000  0005bf4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d2a72  00000000  00000000  0006a364  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013cdd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  0013ce54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067ec 	.word	0x080067ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	080067ec 	.word	0x080067ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MEMS_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address,uint8_t data){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	460a      	mov	r2, r1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2108      	movs	r1, #8
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <MEMS_Write+0x44>)
 80004f6:	f000 ff3b 	bl	8001370 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004fa:	1df9      	adds	r1, r7, #7
 80004fc:	230a      	movs	r3, #10
 80004fe:	2201      	movs	r2, #1
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <MEMS_Write+0x48>)
 8000502:	f001 fc53 	bl	8001dac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 8000506:	1db9      	adds	r1, r7, #6
 8000508:	230a      	movs	r3, #10
 800050a:	2201      	movs	r2, #1
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <MEMS_Write+0x48>)
 800050e:	f001 fc4d 	bl	8001dac <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2108      	movs	r1, #8
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <MEMS_Write+0x44>)
 8000518:	f000 ff2a 	bl	8001370 <HAL_GPIO_WritePin>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	20012e08 	.word	0x20012e08

0800052c <MEMS_Read>:
void MEMS_Read(uint8_t address,uint8_t *data){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
    address |= 0x80;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800053e:	b2db      	uxtb	r3, r3
 8000540:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2108      	movs	r1, #8
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <MEMS_Read+0x4c>)
 8000548:	f000 ff12 	bl	8001370 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 800054c:	1df9      	adds	r1, r7, #7
 800054e:	230a      	movs	r3, #10
 8000550:	2201      	movs	r2, #1
 8000552:	480a      	ldr	r0, [pc, #40]	; (800057c <MEMS_Read+0x50>)
 8000554:	f001 fc2a 	bl	8001dac <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,data,1,10);
 8000558:	230a      	movs	r3, #10
 800055a:	2201      	movs	r2, #1
 800055c:	6839      	ldr	r1, [r7, #0]
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <MEMS_Read+0x50>)
 8000560:	f001 fd58 	bl	8002014 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <MEMS_Read+0x4c>)
 800056a:	f000 ff01 	bl	8001370 <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	20012e08 	.word	0x20012e08

08000580 <MEMS_init>:
void MEMS_init(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	MEMS_Write(0x21, 0x01);
 8000584:	2101      	movs	r1, #1
 8000586:	2021      	movs	r0, #33	; 0x21
 8000588:	f7ff ffaa 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x23, 0x48);
 800058c:	2148      	movs	r1, #72	; 0x48
 800058e:	2023      	movs	r0, #35	; 0x23
 8000590:	f7ff ffa6 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x20, 0x67);
 8000594:	2167      	movs	r1, #103	; 0x67
 8000596:	2020      	movs	r0, #32
 8000598:	f7ff ffa2 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x24, 0x00);
 800059c:	2100      	movs	r1, #0
 800059e:	2024      	movs	r0, #36	; 0x24
 80005a0:	f7ff ff9e 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x57, 0x55);
 80005a4:	2155      	movs	r1, #85	; 0x55
 80005a6:	2057      	movs	r0, #87	; 0x57
 80005a8:	f7ff ff9a 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x40, 0x05);
 80005ac:	2105      	movs	r1, #5
 80005ae:	2040      	movs	r0, #64	; 0x40
 80005b0:	f7ff ff96 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x41, 0x11);
 80005b4:	2111      	movs	r1, #17
 80005b6:	2041      	movs	r0, #65	; 0x41
 80005b8:	f7ff ff92 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x59, 0xFC);
 80005bc:	21fc      	movs	r1, #252	; 0xfc
 80005be:	2059      	movs	r0, #89	; 0x59
 80005c0:	f7ff ff8e 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x5A, 0xFC);
 80005c4:	21fc      	movs	r1, #252	; 0xfc
 80005c6:	205a      	movs	r0, #90	; 0x5a
 80005c8:	f7ff ff8a 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x5B, 0x01);
 80005cc:	2101      	movs	r1, #1
 80005ce:	205b      	movs	r0, #91	; 0x5b
 80005d0:	f7ff ff86 	bl	80004e0 <MEMS_Write>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fbf1 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f83d 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f8f9 	bl	80007dc <MX_GPIO_Init>
  MX_SPI1_Init();
 80005ea:	f000 f897 	bl	800071c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f8cb 	bl	8000788 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MEMS_init();
 80005f2:	f7ff ffc5 	bl	8000580 <MEMS_init>
	/* Create the stream buffer that sends data from the interrupt to the
	task, and create the task. */
	xStreamBuffer = xStreamBufferCreate( /* The buffer length in bytes. */
 80005f6:	2200      	movs	r2, #0
 80005f8:	210a      	movs	r1, #10
 80005fa:	2064      	movs	r0, #100	; 0x64
 80005fc:	f003 fd00 	bl	8004000 <xStreamBufferGenericCreate>
 8000600:	4602      	mov	r2, r0
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <main+0x70>)
 8000604:	601a      	str	r2, [r3, #0]
										 sbiSTREAM_BUFFER_LENGTH_BYTES,
										 /* The stream buffer's trigger level. */
										 sbiSTREAM_BUFFER_TRIGGER_LEVEL_10 );
	xStreamBuffer2 = xStreamBufferCreate( /* The buffer length in bytes. */
 8000606:	2200      	movs	r2, #0
 8000608:	210a      	movs	r1, #10
 800060a:	2064      	movs	r0, #100	; 0x64
 800060c:	f003 fcf8 	bl	8004000 <xStreamBufferGenericCreate>
 8000610:	4602      	mov	r2, r0
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <main+0x74>)
 8000614:	601a      	str	r2, [r3, #0]
											 sbiSTREAM_BUFFER_LENGTH_BYTES,
											 /* The stream buffer's trigger level. */
											 sbiSTREAM_BUFFER_TRIGGER_LEVEL_10 );
  //xSemaphore = xSemaphoreCreateBinary();
  xTaskCreate(green_blink,"task1",1024,(void *)1,1,NULL);
 8000616:	2300      	movs	r3, #0
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2301      	movs	r3, #1
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000624:	490a      	ldr	r1, [pc, #40]	; (8000650 <main+0x78>)
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <main+0x7c>)
 8000628:	f004 f8cc 	bl	80047c4 <xTaskCreate>
  xTaskCreate(orange_blink,"task2",1024,(void *)1,3,NULL);
 800062c:	2300      	movs	r3, #0
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	2303      	movs	r3, #3
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800063a:	4907      	ldr	r1, [pc, #28]	; (8000658 <main+0x80>)
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <main+0x84>)
 800063e:	f004 f8c1 	bl	80047c4 <xTaskCreate>
  vTaskStartScheduler();
 8000642:	f004 fa31 	bl	8004aa8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x6e>
 8000648:	20000034 	.word	0x20000034
 800064c:	20000038 	.word	0x20000038
 8000650:	0800682c 	.word	0x0800682c
 8000654:	080008d9 	.word	0x080008d9
 8000658:	08006834 	.word	0x08006834
 800065c:	08000939 	.word	0x08000939

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f8b3 	bl	80067da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xb4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xb4>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xb4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <SystemClock_Config+0xb8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <SystemClock_Config+0xb8>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <SystemClock_Config+0xb8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fe99 	bl	8001408 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006dc:	f000 f9f6 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f8f4 	bl	80018e8 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000706:	f000 f9e1 	bl	8000acc <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f001 fab9 	bl	8001ce4 <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f9a8 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20012e08 	.word	0x20012e08
 8000784:	40013000 	.word	0x40013000

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f002 fa22 	bl	8002c08 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f97f 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20012e60 	.word	0x20012e60
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_GPIO_Init+0xec>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a33      	ldr	r2, [pc, #204]	; (80008c8 <MX_GPIO_Init+0xec>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_GPIO_Init+0xec>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	4820      	ldr	r0, [pc, #128]	; (80008cc <MX_GPIO_Init+0xf0>)
 800084c:	f000 fd90 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000856:	481e      	ldr	r0, [pc, #120]	; (80008d0 <MX_GPIO_Init+0xf4>)
 8000858:	f000 fd8a 	bl	8001370 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800085c:	2308      	movs	r3, #8
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	4816      	ldr	r0, [pc, #88]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000874:	f000 fbca 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000878:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_GPIO_Init+0xf4>)
 8000892:	f000 fbbb 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000896:	2301      	movs	r3, #1
 8000898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_GPIO_Init+0xf8>)
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <MX_GPIO_Init+0xf0>)
 80008aa:	f000 fbaf 	bl	800100c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2106      	movs	r1, #6
 80008b2:	2006      	movs	r0, #6
 80008b4:	f000 fb80 	bl	8000fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008b8:	2006      	movs	r0, #6
 80008ba:	f000 fb99 	bl	8000ff0 <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3720      	adds	r7, #32
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	10110000 	.word	0x10110000

080008d8 <green_blink>:

/* USER CODE BEGIN 4 */
void green_blink()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	for(;;)
	{
		if(ret > 0){
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <green_blink+0x4c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d015      	beq.n	8000910 <green_blink+0x38>
			xStreamBufferReceive(
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <green_blink+0x50>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ec:	2264      	movs	r2, #100	; 0x64
 80008ee:	490f      	ldr	r1, [pc, #60]	; (800092c <green_blink+0x54>)
 80008f0:	f003 fd6c 	bl	80043cc <xStreamBufferReceive>
								  xStreamBuffer2,
								  ( void * ) &( cRxBuffer2[ 0 ]) ,
								  sizeof( char )*100,
								  portMAX_DELAY );
			HAL_UART_Transmit(&huart2,(uint8_t*)cRxBuffer2,strlen(cRxBuffer2),0xffff);
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <green_blink+0x54>)
 80008f6:	f7ff fc6b 	bl	80001d0 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000902:	490a      	ldr	r1, [pc, #40]	; (800092c <green_blink+0x54>)
 8000904:	480a      	ldr	r0, [pc, #40]	; (8000930 <green_blink+0x58>)
 8000906:	f002 f9cc 	bl	8002ca2 <HAL_UART_Transmit>
			ret = 0;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <green_blink+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
		}
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <green_blink+0x5c>)
 8000916:	f000 fd44 	bl	80013a2 <HAL_GPIO_TogglePin>
	  vTaskDelay(1000);
 800091a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091e:	f004 f88f 	bl	8004a40 <vTaskDelay>
		if(ret > 0){
 8000922:	e7db      	b.n	80008dc <green_blink+0x4>
 8000924:	2000003c 	.word	0x2000003c
 8000928:	20000038 	.word	0x20000038
 800092c:	20012ea0 	.word	0x20012ea0
 8000930:	20012e60 	.word	0x20012e60
 8000934:	40020c00 	.word	0x40020c00

08000938 <orange_blink>:
	}
}
void orange_blink()   //handler
{
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
	 for(;;)                         //interrupt is disabled until we execute MEMS_READ
	 {
		  int8_t data;
		  BaseType_t xNextByte = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
		  const TickType_t x100ms = pdMS_TO_TICKS( 100 );
 8000942:	2364      	movs	r3, #100	; 0x64
 8000944:	607b      	str	r3, [r7, #4]
		  ret = xStreamBufferReceive( /* The stream buffer data is being received from. */
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <orange_blink+0xb0>)
 8000948:	6818      	ldr	r0, [r3, #0]
								  xStreamBuffer,
								  /* Where to place received data. */
								  ( void * ) &( cRxBuffer[ xNextByte ] ),
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	4a27      	ldr	r2, [pc, #156]	; (80009ec <orange_blink+0xb4>)
 800094e:	1899      	adds	r1, r3, r2
		  ret = xStreamBufferReceive( /* The stream buffer data is being received from. */
 8000950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000954:	2264      	movs	r2, #100	; 0x64
 8000956:	f003 fd39 	bl	80043cc <xStreamBufferReceive>
 800095a:	4602      	mov	r2, r0
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <orange_blink+0xb8>)
 800095e:	601a      	str	r2, [r3, #0]
								  sizeof( char )*100,
								  /* The time to wait for the next data if the buffer
								  is empty. */
								  portMAX_DELAY );

		  HAL_UART_Transmit(&huart2,(uint8_t*)cRxBuffer,strlen(cRxBuffer),0xffff);
 8000960:	4822      	ldr	r0, [pc, #136]	; (80009ec <orange_blink+0xb4>)
 8000962:	f7ff fc35 	bl	80001d0 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29a      	uxth	r2, r3
 800096a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096e:	491f      	ldr	r1, [pc, #124]	; (80009ec <orange_blink+0xb4>)
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <orange_blink+0xbc>)
 8000972:	f002 f996 	bl	8002ca2 <HAL_UART_Transmit>
		  if(ret > 0){
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <orange_blink+0xb8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00f      	beq.n	800099e <orange_blink+0x66>
			  xStreamBufferSend(xStreamBuffer2,( const void * ) pcStringToSend2,  strlen(pcStringToSend)*4,x100ms);
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <orange_blink+0xc0>)
 8000980:	681c      	ldr	r4, [r3, #0]
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <orange_blink+0xc4>)
 8000984:	681d      	ldr	r5, [r3, #0]
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <orange_blink+0xc8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fc20 	bl	80001d0 <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	009a      	lsls	r2, r3, #2
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4629      	mov	r1, r5
 8000998:	4620      	mov	r0, r4
 800099a:	f003 fbbb 	bl	8004114 <xStreamBufferSend>
		  }
		  int i=0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
		  for(i = 0;i<3;i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e016      	b.n	80009d6 <orange_blink+0x9e>
		  {
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <orange_blink+0xcc>)
 80009b0:	f000 fcde 	bl	8001370 <HAL_GPIO_WritePin>
			vTaskDelay(1000);
 80009b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b8:	f004 f842 	bl	8004a40 <vTaskDelay>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <orange_blink+0xcc>)
 80009c4:	f000 fcd4 	bl	8001370 <HAL_GPIO_WritePin>
			vTaskDelay(1000);
 80009c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009cc:	f004 f838 	bl	8004a40 <vTaskDelay>
		  for(i = 0;i<3;i++)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	dde5      	ble.n	80009a8 <orange_blink+0x70>
		  }
		  MEMS_Read(0x5f,&data);                          //reset the register(enable interrupt)
 80009dc:	1cfb      	adds	r3, r7, #3
 80009de:	4619      	mov	r1, r3
 80009e0:	205f      	movs	r0, #95	; 0x5f
 80009e2:	f7ff fda3 	bl	800052c <MEMS_Read>
	 {
 80009e6:	e7aa      	b.n	800093e <orange_blink+0x6>
 80009e8:	20000034 	.word	0x20000034
 80009ec:	20012da4 	.word	0x20012da4
 80009f0:	2000003c 	.word	0x2000003c
 80009f4:	20012e60 	.word	0x20012e60
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000004 	.word	0x20000004
 8000a00:	20000000 	.word	0x20000000
 8000a04:	40020c00 	.word	0x40020c00

08000a08 <HAL_GPIO_EXTI_Callback>:



 }
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)   //ISR function
{
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]

       static portBASE_TYPE xHigherPriorityTaskWoken;
       xHigherPriorityTaskWoken=pdFALSE;
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
       if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14))
 8000a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1c:	481e      	ldr	r0, [pc, #120]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x90>)
 8000a1e:	f000 fc8f 	bl	8001340 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <HAL_GPIO_EXTI_Callback+0x2e>
       {
           HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2e:	481a      	ldr	r0, [pc, #104]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x90>)
 8000a30:	f000 fc9e 	bl	8001370 <HAL_GPIO_WritePin>
 8000a34:	e005      	b.n	8000a42 <HAL_GPIO_EXTI_Callback+0x3a>
       }
       else
       {
           HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3c:	4816      	ldr	r0, [pc, #88]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x90>)
 8000a3e:	f000 fc97 	bl	8001370 <HAL_GPIO_WritePin>
       }
       if(xStreamBufferSendFromISR( xStreamBuffer,( const void * )pcStringToSend,strlen(pcStringToSend)*4,NULL ) > 0){//xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken) == pdTRUE){
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x94>)
 8000a44:	681c      	ldr	r4, [r3, #0]
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a48:	681d      	ldr	r5, [r3, #0]
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fbbe 	bl	80001d0 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	009a      	lsls	r2, r3, #2
 8000a58:	2300      	movs	r3, #0
 8000a5a:	4629      	mov	r1, r5
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	f003 fc0a 	bl	8004276 <xStreamBufferSendFromISR>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d005      	beq.n	8000a74 <HAL_GPIO_EXTI_Callback+0x6c>
    	   HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	480a      	ldr	r0, [pc, #40]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x90>)
 8000a70:	f000 fc7e 	bl	8001370 <HAL_GPIO_WritePin>
       }

       portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d007      	beq.n	8000a8c <HAL_GPIO_EXTI_Callback+0x84>
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	f3bf 8f4f 	dsb	sy
 8000a88:	f3bf 8f6f 	isb	sy


}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bdb0      	pop	{r4, r5, r7, pc}
 8000a94:	20000040 	.word	0x20000040
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	20000034 	.word	0x20000034
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	e000ed04 	.word	0xe000ed04

08000aa8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d101      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aba:	f000 f9a5 	bl	8000e08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40001400 	.word	0x40001400

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <Error_Handler+0x6>

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_SPI_MspInit+0x84>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d12b      	bne.n	8000b9e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_SPI_MspInit+0x88>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a17      	ldr	r2, [pc, #92]	; (8000bac <HAL_SPI_MspInit+0x88>)
 8000b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_SPI_MspInit+0x88>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_SPI_MspInit+0x88>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_SPI_MspInit+0x88>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_SPI_MspInit+0x88>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b7e:	23e0      	movs	r3, #224	; 0xe0
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b8e:	2305      	movs	r3, #5
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_SPI_MspInit+0x8c>)
 8000b9a:	f000 fa37 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3728      	adds	r7, #40	; 0x28
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40013000 	.word	0x40013000
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40020000 	.word	0x40020000

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08a      	sub	sp, #40	; 0x28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a19      	ldr	r2, [pc, #100]	; (8000c38 <HAL_UART_MspInit+0x84>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d12b      	bne.n	8000c2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be4:	6413      	str	r3, [r2, #64]	; 0x40
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	4a10      	ldr	r2, [pc, #64]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	; 0x30
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_UART_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c0e:	230c      	movs	r3, #12
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1e:	2307      	movs	r3, #7
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_UART_MspInit+0x8c>)
 8000c2a:	f000 f9ef 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	; 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40004400 	.word	0x40004400
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020000 	.word	0x40020000

08000c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	2037      	movs	r0, #55	; 0x37
 8000c5a:	f000 f9ad 	bl	8000fb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000c5e:	2037      	movs	r0, #55	; 0x37
 8000c60:	f000 f9c6 	bl	8000ff0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <HAL_InitTick+0xa0>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	4a1d      	ldr	r2, [pc, #116]	; (8000ce4 <HAL_InitTick+0xa0>)
 8000c6e:	f043 0320 	orr.w	r3, r3, #32
 8000c72:	6413      	str	r3, [r2, #64]	; 0x40
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <HAL_InitTick+0xa0>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	f003 0320 	and.w	r3, r3, #32
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c80:	f107 0210 	add.w	r2, r7, #16
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fff8 	bl	8001c80 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c90:	f000 ffce 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 8000c94:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c98:	4a13      	ldr	r2, [pc, #76]	; (8000ce8 <HAL_InitTick+0xa4>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	0c9b      	lsrs	r3, r3, #18
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_InitTick+0xa8>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <HAL_InitTick+0xac>)
 8000ca8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_InitTick+0xa8>)
 8000cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb0:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_InitTick+0xa8>)
 8000cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb6:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_InitTick+0xa8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_InitTick+0xa8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <HAL_InitTick+0xa8>)
 8000cc6:	f001 fd61 	bl	800278c <HAL_TIM_Base_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d104      	bne.n	8000cda <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000cd0:	4806      	ldr	r0, [pc, #24]	; (8000cec <HAL_InitTick+0xa8>)
 8000cd2:	f001 fd90 	bl	80027f6 <HAL_TIM_Base_Start_IT>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	e000      	b.n	8000cdc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3730      	adds	r7, #48	; 0x30
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	431bde83 	.word	0x431bde83
 8000cec:	20012f04 	.word	0x20012f04
 8000cf0:	40001400 	.word	0x40001400

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d24:	2001      	movs	r0, #1
 8000d26:	f000 fb57 	bl	80013d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM7_IRQHandler+0x10>)
 8000d36:	f001 fd82 	bl	800283e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20012f04 	.word	0x20012f04

08000d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <SystemInit+0x28>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <SystemInit+0x28>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SystemInit+0x28>)
 8000d5a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d5e:	609a      	str	r2, [r3, #8]
#endif
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopFillZerobss+0x14>
 8000d74:	2100      	movs	r1, #0
 8000d76:	e003      	b.n	8000d80 <LoopCopyDataInit>

08000d78 <CopyDataInit>:
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <LoopFillZerobss+0x18>)
 8000d7a:	585b      	ldr	r3, [r3, r1]
 8000d7c:	5043      	str	r3, [r0, r1]
 8000d7e:	3104      	adds	r1, #4

08000d80 <LoopCopyDataInit>:
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <LoopFillZerobss+0x1c>)
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <LoopFillZerobss+0x20>)
 8000d84:	1842      	adds	r2, r0, r1
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3f6      	bcc.n	8000d78 <CopyDataInit>
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <LoopFillZerobss+0x24>)
 8000d8c:	e002      	b.n	8000d94 <LoopFillZerobss>

08000d8e <FillZerobss>:
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f842 3b04 	str.w	r3, [r2], #4

08000d94 <LoopFillZerobss>:
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <LoopFillZerobss+0x28>)
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d3f9      	bcc.n	8000d8e <FillZerobss>
 8000d9a:	f7ff ffd3 	bl	8000d44 <SystemInit>
 8000d9e:	f005 fced 	bl	800677c <__libc_init_array>
 8000da2:	f7ff fc19 	bl	80005d8 <main>
 8000da6:	4770      	bx	lr
 8000da8:	20020000 	.word	0x20020000
 8000dac:	0800687c 	.word	0x0800687c
 8000db0:	20000000 	.word	0x20000000
 8000db4:	20000018 	.word	0x20000018
 8000db8:	20000018 	.word	0x20000018
 8000dbc:	20012f88 	.word	0x20012f88

08000dc0 <ADC_IRQHandler>:
 8000dc0:	e7fe      	b.n	8000dc0 <ADC_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	; (8000e04 <HAL_Init+0x40>)
 8000dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_Init+0x40>)
 8000dda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000de0:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <HAL_Init+0x40>)
 8000de6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dec:	2003      	movs	r0, #3
 8000dee:	f000 f8d8 	bl	8000fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff ff26 	bl	8000c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df8:	f7ff fe6c 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40023c00 	.word	0x40023c00

08000e08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_IncTick+0x20>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x24>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	4a04      	ldr	r2, [pc, #16]	; (8000e2c <HAL_IncTick+0x24>)
 8000e1a:	6013      	str	r3, [r2, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000010 	.word	0x20000010
 8000e2c:	20012f44 	.word	0x20012f44

08000e30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b03      	ldr	r3, [pc, #12]	; (8000e44 <HAL_GetTick+0x14>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20012f44 	.word	0x20012f44

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff4c 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
 8000fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fca:	f7ff ff61 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	6978      	ldr	r0, [r7, #20]
 8000fd6:	f7ff ffb1 	bl	8000f3c <NVIC_EncodePriority>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff80 	bl	8000ee8 <__NVIC_SetPriority>
}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff54 	bl	8000eac <__NVIC_EnableIRQ>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
 8001026:	e16b      	b.n	8001300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	429a      	cmp	r2, r3
 8001042:	f040 815a 	bne.w	80012fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d00b      	beq.n	8001066 <HAL_GPIO_Init+0x5a>
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d007      	beq.n	8001066 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105a:	2b11      	cmp	r3, #17
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b12      	cmp	r3, #18
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0xfc>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b12      	cmp	r3, #18
 8001106:	d123      	bne.n	8001150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	08da      	lsrs	r2, r3, #3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3208      	adds	r2, #8
 8001110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	691a      	ldr	r2, [r3, #16]
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	f003 0307 	and.w	r3, r3, #7
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4313      	orrs	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	08da      	lsrs	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	3208      	adds	r2, #8
 800114a:	69b9      	ldr	r1, [r7, #24]
 800114c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0203 	and.w	r2, r3, #3
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80b4 	beq.w	80012fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b5f      	ldr	r3, [pc, #380]	; (8001314 <HAL_GPIO_Init+0x308>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a5e      	ldr	r2, [pc, #376]	; (8001314 <HAL_GPIO_Init+0x308>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b5c      	ldr	r3, [pc, #368]	; (8001314 <HAL_GPIO_Init+0x308>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ae:	4a5a      	ldr	r2, [pc, #360]	; (8001318 <HAL_GPIO_Init+0x30c>)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a51      	ldr	r2, [pc, #324]	; (800131c <HAL_GPIO_Init+0x310>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d02b      	beq.n	8001232 <HAL_GPIO_Init+0x226>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a50      	ldr	r2, [pc, #320]	; (8001320 <HAL_GPIO_Init+0x314>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x222>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4f      	ldr	r2, [pc, #316]	; (8001324 <HAL_GPIO_Init+0x318>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x21e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_GPIO_Init+0x31c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x21a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_GPIO_Init+0x320>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x216>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x324>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x212>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <HAL_GPIO_Init+0x328>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x20e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <HAL_GPIO_Init+0x32c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x20a>
 8001212:	2307      	movs	r3, #7
 8001214:	e00e      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001216:	2308      	movs	r3, #8
 8001218:	e00c      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800121a:	2306      	movs	r3, #6
 800121c:	e00a      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800121e:	2305      	movs	r3, #5
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001222:	2304      	movs	r3, #4
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x228>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x228>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4934      	ldr	r1, [pc, #208]	; (8001318 <HAL_GPIO_Init+0x30c>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001252:	4b3a      	ldr	r3, [pc, #232]	; (800133c <HAL_GPIO_Init+0x330>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001276:	4a31      	ldr	r2, [pc, #196]	; (800133c <HAL_GPIO_Init+0x330>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800127c:	4b2f      	ldr	r3, [pc, #188]	; (800133c <HAL_GPIO_Init+0x330>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a0:	4a26      	ldr	r2, [pc, #152]	; (800133c <HAL_GPIO_Init+0x330>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <HAL_GPIO_Init+0x330>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ca:	4a1c      	ldr	r2, [pc, #112]	; (800133c <HAL_GPIO_Init+0x330>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <HAL_GPIO_Init+0x330>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f4:	4a11      	ldr	r2, [pc, #68]	; (800133c <HAL_GPIO_Init+0x330>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f ae90 	bls.w	8001028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	3724      	adds	r7, #36	; 0x24
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40021c00 	.word	0x40021c00
 800133c:	40013c00 	.word	0x40013c00

08001340 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	887b      	ldrh	r3, [r7, #2]
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
 800135c:	e001      	b.n	8001362 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3714      	adds	r7, #20
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	460b      	mov	r3, r1
 800137a:	807b      	strh	r3, [r7, #2]
 800137c:	4613      	mov	r3, r2
 800137e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001380:	787b      	ldrb	r3, [r7, #1]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001386:	887a      	ldrh	r2, [r7, #2]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800138c:	e003      	b.n	8001396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	041a      	lsls	r2, r3, #16
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	619a      	str	r2, [r3, #24]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695a      	ldr	r2, [r3, #20]
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	401a      	ands	r2, r3
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d104      	bne.n	80013c6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	041a      	lsls	r2, r3, #16
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80013c4:	e002      	b.n	80013cc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fb06 	bl	8000a08 <HAL_GPIO_EXTI_Callback>
  }
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40013c00 	.word	0x40013c00

08001408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e25b      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d075      	beq.n	8001512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001426:	4ba3      	ldr	r3, [pc, #652]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b04      	cmp	r3, #4
 8001430:	d00c      	beq.n	800144c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001432:	4ba0      	ldr	r3, [pc, #640]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800143a:	2b08      	cmp	r3, #8
 800143c:	d112      	bne.n	8001464 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800143e:	4b9d      	ldr	r3, [pc, #628]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800144a:	d10b      	bne.n	8001464 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	4b99      	ldr	r3, [pc, #612]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d05b      	beq.n	8001510 <HAL_RCC_OscConfig+0x108>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d157      	bne.n	8001510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e236      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x74>
 800146e:	4b91      	ldr	r3, [pc, #580]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a90      	ldr	r2, [pc, #576]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e01d      	b.n	80014b8 <HAL_RCC_OscConfig+0xb0>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x98>
 8001486:	4b8b      	ldr	r3, [pc, #556]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a8a      	ldr	r2, [pc, #552]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800148c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	4b88      	ldr	r3, [pc, #544]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a87      	ldr	r2, [pc, #540]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800149c:	6013      	str	r3, [r2, #0]
 800149e:	e00b      	b.n	80014b8 <HAL_RCC_OscConfig+0xb0>
 80014a0:	4b84      	ldr	r3, [pc, #528]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a83      	ldr	r2, [pc, #524]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a80      	ldr	r2, [pc, #512]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80014b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d013      	beq.n	80014e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fcb6 	bl	8000e30 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fcb2 	bl	8000e30 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e1fb      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014da:	4b76      	ldr	r3, [pc, #472]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0xc0>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e8:	f7ff fca2 	bl	8000e30 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fc9e 	bl	8000e30 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e1e7      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001502:	4b6c      	ldr	r3, [pc, #432]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0xe8>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d063      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151e:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00b      	beq.n	8001542 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800152a:	4b62      	ldr	r3, [pc, #392]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001532:	2b08      	cmp	r3, #8
 8001534:	d11c      	bne.n	8001570 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d116      	bne.n	8001570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001542:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b00      	cmp	r3, #0
 800154c:	d005      	beq.n	800155a <HAL_RCC_OscConfig+0x152>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d001      	beq.n	800155a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e1bb      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	4b56      	ldr	r3, [pc, #344]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	4952      	ldr	r1, [pc, #328]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	e03a      	b.n	80015e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001578:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <HAL_RCC_OscConfig+0x2b0>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff fc57 	bl	8000e30 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001586:	f7ff fc53 	bl	8000e30 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e19c      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001598:	4b46      	ldr	r3, [pc, #280]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b43      	ldr	r3, [pc, #268]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4940      	ldr	r1, [pc, #256]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	600b      	str	r3, [r1, #0]
 80015b8:	e015      	b.n	80015e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_RCC_OscConfig+0x2b0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fc36 	bl	8000e30 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fc32 	bl	8000e30 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e17b      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015da:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d030      	beq.n	8001654 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d016      	beq.n	8001628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015fa:	4b30      	ldr	r3, [pc, #192]	; (80016bc <HAL_RCC_OscConfig+0x2b4>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001600:	f7ff fc16 	bl	8000e30 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001608:	f7ff fc12 	bl	8000e30 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e15b      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x200>
 8001626:	e015      	b.n	8001654 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_RCC_OscConfig+0x2b4>)
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162e:	f7ff fbff 	bl	8000e30 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001636:	f7ff fbfb 	bl	8000e30 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e144      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800164a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f0      	bne.n	8001636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a0 	beq.w	80017a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10f      	bne.n	8001692 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_RCC_OscConfig+0x2ac>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_OscConfig+0x2b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d121      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <HAL_RCC_OscConfig+0x2b8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_RCC_OscConfig+0x2b8>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fbc1 	bl	8000e30 <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	e011      	b.n	80016d6 <HAL_RCC_OscConfig+0x2ce>
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	42470000 	.word	0x42470000
 80016bc:	42470e80 	.word	0x42470e80
 80016c0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c4:	f7ff fbb4 	bl	8000e30 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e0fd      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d6:	4b81      	ldr	r3, [pc, #516]	; (80018dc <HAL_RCC_OscConfig+0x4d4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2f0>
 80016ea:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	4a7c      	ldr	r2, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70
 80016f6:	e01c      	b.n	8001732 <HAL_RCC_OscConfig+0x32a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d10c      	bne.n	800171a <HAL_RCC_OscConfig+0x312>
 8001700:	4b77      	ldr	r3, [pc, #476]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	4a76      	ldr	r2, [pc, #472]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001706:	f043 0304 	orr.w	r3, r3, #4
 800170a:	6713      	str	r3, [r2, #112]	; 0x70
 800170c:	4b74      	ldr	r3, [pc, #464]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a73      	ldr	r2, [pc, #460]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
 8001718:	e00b      	b.n	8001732 <HAL_RCC_OscConfig+0x32a>
 800171a:	4b71      	ldr	r3, [pc, #452]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	4a70      	ldr	r2, [pc, #448]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6713      	str	r3, [r2, #112]	; 0x70
 8001726:	4b6e      	ldr	r3, [pc, #440]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800172a:	4a6d      	ldr	r2, [pc, #436]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d015      	beq.n	8001766 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173a:	f7ff fb79 	bl	8000e30 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	e00a      	b.n	8001758 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001742:	f7ff fb75 	bl	8000e30 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0bc      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001758:	4b61      	ldr	r3, [pc, #388]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 800175a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d0ee      	beq.n	8001742 <HAL_RCC_OscConfig+0x33a>
 8001764:	e014      	b.n	8001790 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001766:	f7ff fb63 	bl	8000e30 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	e00a      	b.n	8001784 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800176e:	f7ff fb5f 	bl	8000e30 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	f241 3288 	movw	r2, #5000	; 0x1388
 800177c:	4293      	cmp	r3, r2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0a6      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001784:	4b56      	ldr	r3, [pc, #344]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ee      	bne.n	800176e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001790:	7dfb      	ldrb	r3, [r7, #23]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d105      	bne.n	80017a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001796:	4b52      	ldr	r3, [pc, #328]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a51      	ldr	r2, [pc, #324]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 800179c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8092 	beq.w	80018d0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017ac:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d05c      	beq.n	8001872 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d141      	bne.n	8001844 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b48      	ldr	r3, [pc, #288]	; (80018e4 <HAL_RCC_OscConfig+0x4dc>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7ff fb33 	bl	8000e30 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ce:	f7ff fb2f 	bl	8000e30 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e078      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e0:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69da      	ldr	r2, [r3, #28]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	019b      	lsls	r3, r3, #6
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	085b      	lsrs	r3, r3, #1
 8001804:	3b01      	subs	r3, #1
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180e:	061b      	lsls	r3, r3, #24
 8001810:	4933      	ldr	r1, [pc, #204]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001816:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <HAL_RCC_OscConfig+0x4dc>)
 8001818:	2201      	movs	r2, #1
 800181a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181c:	f7ff fb08 	bl	8000e30 <HAL_GetTick>
 8001820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff fb04 	bl	8000e30 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04d      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d0f0      	beq.n	8001824 <HAL_RCC_OscConfig+0x41c>
 8001842:	e045      	b.n	80018d0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001844:	4b27      	ldr	r3, [pc, #156]	; (80018e4 <HAL_RCC_OscConfig+0x4dc>)
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff faf1 	bl	8000e30 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff faed 	bl	8000e30 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e036      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001864:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x44a>
 8001870:	e02e      	b.n	80018d0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e029      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <HAL_RCC_OscConfig+0x4d8>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	429a      	cmp	r2, r3
 8001890:	d11c      	bne.n	80018cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189c:	429a      	cmp	r2, r3
 800189e:	d115      	bne.n	80018cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a6:	4013      	ands	r3, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d10d      	bne.n	80018cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d106      	bne.n	80018cc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	42470060 	.word	0x42470060

080018e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0cc      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018fc:	4b68      	ldr	r3, [pc, #416]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d90c      	bls.n	8001924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0b8      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d020      	beq.n	8001972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800193c:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	4a58      	ldr	r2, [pc, #352]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001946:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001954:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4a52      	ldr	r2, [pc, #328]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800195e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	494d      	ldr	r1, [pc, #308]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	4313      	orrs	r3, r2
 8001970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d044      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d107      	bne.n	8001996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d119      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e07f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a6:	4b3f      	ldr	r3, [pc, #252]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d109      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0302 	and.w	r3, r3, #2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e067      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c6:	4b37      	ldr	r3, [pc, #220]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f023 0203 	bic.w	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4934      	ldr	r1, [pc, #208]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d8:	f7ff fa2a 	bl	8000e30 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e0:	f7ff fa26 	bl	8000e30 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e04f      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 020c 	and.w	r2, r3, #12
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1eb      	bne.n	80019e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d20c      	bcs.n	8001a30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e032      	b.n	8001a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d008      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4916      	ldr	r1, [pc, #88]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d009      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6e:	f000 f821 	bl	8001ab4 <HAL_RCC_GetSysClockFreq>
 8001a72:	4601      	mov	r1, r0
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	091b      	lsrs	r3, r3, #4
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	5cd3      	ldrb	r3, [r2, r3]
 8001a82:	fa21 f303 	lsr.w	r3, r1, r3
 8001a86:	4a09      	ldr	r2, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f8d8 	bl	8000c44 <HAL_InitTick>

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	08006854 	.word	0x08006854
 8001aac:	20000008 	.word	0x20000008
 8001ab0:	2000000c 	.word	0x2000000c

08001ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aca:	4b50      	ldr	r3, [pc, #320]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d007      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x32>
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d008      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x38>
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 808d 	bne.w	8001bfa <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae0:	4b4b      	ldr	r3, [pc, #300]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001ae2:	60bb      	str	r3, [r7, #8]
       break;
 8001ae4:	e08c      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ae6:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ae8:	60bb      	str	r3, [r7, #8]
      break;
 8001aea:	e089      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aec:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001af6:	4b45      	ldr	r3, [pc, #276]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d023      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	099b      	lsrs	r3, r3, #6
 8001b08:	f04f 0400 	mov.w	r4, #0
 8001b0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	ea03 0501 	and.w	r5, r3, r1
 8001b18:	ea04 0602 	and.w	r6, r4, r2
 8001b1c:	4a3d      	ldr	r2, [pc, #244]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b1e:	fb02 f106 	mul.w	r1, r2, r6
 8001b22:	2200      	movs	r2, #0
 8001b24:	fb02 f205 	mul.w	r2, r2, r5
 8001b28:	440a      	add	r2, r1
 8001b2a:	493a      	ldr	r1, [pc, #232]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b2c:	fba5 0101 	umull	r0, r1, r5, r1
 8001b30:	1853      	adds	r3, r2, r1
 8001b32:	4619      	mov	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f04f 0400 	mov.w	r4, #0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4623      	mov	r3, r4
 8001b3e:	f7fe fb4f 	bl	80001e0 <__aeabi_uldivmod>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	e049      	b.n	8001bde <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	4b30      	ldr	r3, [pc, #192]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	f04f 0400 	mov.w	r4, #0
 8001b54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	ea03 0501 	and.w	r5, r3, r1
 8001b60:	ea04 0602 	and.w	r6, r4, r2
 8001b64:	4629      	mov	r1, r5
 8001b66:	4632      	mov	r2, r6
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	f04f 0400 	mov.w	r4, #0
 8001b70:	0154      	lsls	r4, r2, #5
 8001b72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b76:	014b      	lsls	r3, r1, #5
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	1b49      	subs	r1, r1, r5
 8001b7e:	eb62 0206 	sbc.w	r2, r2, r6
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f04f 0400 	mov.w	r4, #0
 8001b8a:	0194      	lsls	r4, r2, #6
 8001b8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b90:	018b      	lsls	r3, r1, #6
 8001b92:	1a5b      	subs	r3, r3, r1
 8001b94:	eb64 0402 	sbc.w	r4, r4, r2
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	00e2      	lsls	r2, r4, #3
 8001ba2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ba6:	00d9      	lsls	r1, r3, #3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4614      	mov	r4, r2
 8001bac:	195b      	adds	r3, r3, r5
 8001bae:	eb44 0406 	adc.w	r4, r4, r6
 8001bb2:	f04f 0100 	mov.w	r1, #0
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	02a2      	lsls	r2, r4, #10
 8001bbc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bc0:	0299      	lsls	r1, r3, #10
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4621      	mov	r1, r4
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f04f 0400 	mov.w	r4, #0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	f7fe fb04 	bl	80001e0 <__aeabi_uldivmod>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x158>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	3301      	adds	r3, #1
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	60bb      	str	r3, [r7, #8]
      break;
 8001bf8:	e002      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001bfc:	60bb      	str	r3, [r7, #8]
      break;
 8001bfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c00:	68bb      	ldr	r3, [r7, #8]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	00f42400 	.word	0x00f42400
 8001c14:	017d7840 	.word	0x017d7840

08001c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000008 	.word	0x20000008

08001c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c34:	f7ff fff0 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c38:	4601      	mov	r1, r0
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	0a9b      	lsrs	r3, r3, #10
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08006864 	.word	0x08006864

08001c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c5c:	f7ff ffdc 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c60:	4601      	mov	r1, r0
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	0b5b      	lsrs	r3, r3, #13
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	4a03      	ldr	r2, [pc, #12]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6e:	5cd3      	ldrb	r3, [r2, r3]
 8001c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	08006864 	.word	0x08006864

08001c80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_GetClockConfig+0x5c>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_RCC_GetClockConfig+0x60>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 020f 	and.w	r2, r3, #15
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	601a      	str	r2, [r3, #0]
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40023c00 	.word	0x40023c00

08001ce4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e056      	b.n	8001da4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d106      	bne.n	8001d16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7fe ff07 	bl	8000b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	431a      	orrs	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	ea42 0103 	orr.w	r1, r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	0c1b      	lsrs	r3, r3, #16
 8001d74:	f003 0104 	and.w	r1, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	430a      	orrs	r2, r1
 8001d82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	4613      	mov	r3, r2
 8001dba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_SPI_Transmit+0x22>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e11e      	b.n	800200c <HAL_SPI_Transmit+0x260>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dd6:	f7ff f82b 	bl	8000e30 <HAL_GetTick>
 8001dda:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001ddc:	88fb      	ldrh	r3, [r7, #6]
 8001dde:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d002      	beq.n	8001df2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001dec:	2302      	movs	r3, #2
 8001dee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001df0:	e103      	b.n	8001ffa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_SPI_Transmit+0x52>
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d102      	bne.n	8001e04 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e02:	e0fa      	b.n	8001ffa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2203      	movs	r2, #3
 8001e08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	88fa      	ldrh	r2, [r7, #6]
 8001e1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	88fa      	ldrh	r2, [r7, #6]
 8001e22:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2200      	movs	r2, #0
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e4a:	d107      	bne.n	8001e5c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	2b40      	cmp	r3, #64	; 0x40
 8001e68:	d007      	beq.n	8001e7a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e82:	d14b      	bne.n	8001f1c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d002      	beq.n	8001e92 <HAL_SPI_Transmit+0xe6>
 8001e8c:	8afb      	ldrh	r3, [r7, #22]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d13e      	bne.n	8001f10 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	881a      	ldrh	r2, [r3, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	1c9a      	adds	r2, r3, #2
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001eb6:	e02b      	b.n	8001f10 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d112      	bne.n	8001eec <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	881a      	ldrh	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	1c9a      	adds	r2, r3, #2
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001eea:	e011      	b.n	8001f10 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eec:	f7fe ffa0 	bl	8000e30 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d803      	bhi.n	8001f04 <HAL_SPI_Transmit+0x158>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f02:	d102      	bne.n	8001f0a <HAL_SPI_Transmit+0x15e>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f0e:	e074      	b.n	8001ffa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ce      	bne.n	8001eb8 <HAL_SPI_Transmit+0x10c>
 8001f1a:	e04c      	b.n	8001fb6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HAL_SPI_Transmit+0x17e>
 8001f24:	8afb      	ldrh	r3, [r7, #22]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d140      	bne.n	8001fac <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	330c      	adds	r3, #12
 8001f34:	7812      	ldrb	r2, [r2, #0]
 8001f36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001f50:	e02c      	b.n	8001fac <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d113      	bne.n	8001f88 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	330c      	adds	r3, #12
 8001f6a:	7812      	ldrb	r2, [r2, #0]
 8001f6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f86:	e011      	b.n	8001fac <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f88:	f7fe ff52 	bl	8000e30 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d803      	bhi.n	8001fa0 <HAL_SPI_Transmit+0x1f4>
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f9e:	d102      	bne.n	8001fa6 <HAL_SPI_Transmit+0x1fa>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d102      	bne.n	8001fac <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001faa:	e026      	b.n	8001ffa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1cd      	bne.n	8001f52 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	6839      	ldr	r1, [r7, #0]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fba4 	bl	8002708 <SPI_EndRxTxTransaction>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10a      	bne.n	8001fea <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	77fb      	strb	r3, [r7, #31]
 8001ff6:	e000      	b.n	8001ffa <HAL_SPI_Transmit+0x24e>
  }

error:
 8001ff8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800200a:	7ffb      	ldrb	r3, [r7, #31]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af02      	add	r7, sp, #8
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	4613      	mov	r3, r2
 8002022:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002030:	d112      	bne.n	8002058 <HAL_SPI_Receive+0x44>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10e      	bne.n	8002058 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2204      	movs	r2, #4
 800203e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002042:	88fa      	ldrh	r2, [r7, #6]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	68b9      	ldr	r1, [r7, #8]
 800204e:	68f8      	ldr	r0, [r7, #12]
 8002050:	f000 f8e9 	bl	8002226 <HAL_SPI_TransmitReceive>
 8002054:	4603      	mov	r3, r0
 8002056:	e0e2      	b.n	800221e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800205e:	2b01      	cmp	r3, #1
 8002060:	d101      	bne.n	8002066 <HAL_SPI_Receive+0x52>
 8002062:	2302      	movs	r3, #2
 8002064:	e0db      	b.n	800221e <HAL_SPI_Receive+0x20a>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800206e:	f7fe fedf 	bl	8000e30 <HAL_GetTick>
 8002072:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	d002      	beq.n	8002086 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002080:	2302      	movs	r3, #2
 8002082:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002084:	e0c2      	b.n	800220c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <HAL_SPI_Receive+0x7e>
 800208c:	88fb      	ldrh	r3, [r7, #6]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d102      	bne.n	8002098 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002096:	e0b9      	b.n	800220c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2204      	movs	r2, #4
 800209c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	88fa      	ldrh	r2, [r7, #6]
 80020b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020de:	d107      	bne.n	80020f0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b40      	cmp	r3, #64	; 0x40
 80020fc:	d007      	beq.n	800210e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d162      	bne.n	80021dc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002116:	e02e      	b.n	8002176 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d115      	bne.n	8002152 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f103 020c 	add.w	r2, r3, #12
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002150:	e011      	b.n	8002176 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002152:	f7fe fe6d 	bl	8000e30 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d803      	bhi.n	800216a <HAL_SPI_Receive+0x156>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002168:	d102      	bne.n	8002170 <HAL_SPI_Receive+0x15c>
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d102      	bne.n	8002176 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002174:	e04a      	b.n	800220c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800217a:	b29b      	uxth	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1cb      	bne.n	8002118 <HAL_SPI_Receive+0x104>
 8002180:	e031      	b.n	80021e6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d113      	bne.n	80021b8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	b292      	uxth	r2, r2
 800219c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	1c9a      	adds	r2, r3, #2
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021b6:	e011      	b.n	80021dc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021b8:	f7fe fe3a 	bl	8000e30 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d803      	bhi.n	80021d0 <HAL_SPI_Receive+0x1bc>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021ce:	d102      	bne.n	80021d6 <HAL_SPI_Receive+0x1c2>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021da:	e017      	b.n	800220c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1cd      	bne.n	8002182 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	6839      	ldr	r1, [r7, #0]
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fa27 	bl	800263e <SPI_EndRxTransaction>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d002      	beq.n	80021fc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	75fb      	strb	r3, [r7, #23]
 8002208:	e000      	b.n	800220c <HAL_SPI_Receive+0x1f8>
  }

error :
 800220a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800221c:	7dfb      	ldrb	r3, [r7, #23]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b08c      	sub	sp, #48	; 0x30
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002234:	2301      	movs	r3, #1
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002244:	2b01      	cmp	r3, #1
 8002246:	d101      	bne.n	800224c <HAL_SPI_TransmitReceive+0x26>
 8002248:	2302      	movs	r3, #2
 800224a:	e18a      	b.n	8002562 <HAL_SPI_TransmitReceive+0x33c>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002254:	f7fe fdec 	bl	8000e30 <HAL_GetTick>
 8002258:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800226e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002272:	2b01      	cmp	r3, #1
 8002274:	d00f      	beq.n	8002296 <HAL_SPI_TransmitReceive+0x70>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800227c:	d107      	bne.n	800228e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <HAL_SPI_TransmitReceive+0x68>
 8002286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800228a:	2b04      	cmp	r3, #4
 800228c:	d003      	beq.n	8002296 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800228e:	2302      	movs	r3, #2
 8002290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002294:	e15b      	b.n	800254e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_SPI_TransmitReceive+0x82>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_SPI_TransmitReceive+0x82>
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d103      	bne.n	80022b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022ae:	e14e      	b.n	800254e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d003      	beq.n	80022c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2205      	movs	r2, #5
 80022c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2200      	movs	r2, #0
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	887a      	ldrh	r2, [r7, #2]
 80022da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d007      	beq.n	8002318 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002320:	d178      	bne.n	8002414 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <HAL_SPI_TransmitReceive+0x10a>
 800232a:	8b7b      	ldrh	r3, [r7, #26]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d166      	bne.n	80023fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	881a      	ldrh	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	1c9a      	adds	r2, r3, #2
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800234a:	b29b      	uxth	r3, r3
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002354:	e053      	b.n	80023fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d11b      	bne.n	800239c <HAL_SPI_TransmitReceive+0x176>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d016      	beq.n	800239c <HAL_SPI_TransmitReceive+0x176>
 800236e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002370:	2b01      	cmp	r3, #1
 8002372:	d113      	bne.n	800239c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002384:	1c9a      	adds	r2, r3, #2
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d119      	bne.n	80023de <HAL_SPI_TransmitReceive+0x1b8>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d014      	beq.n	80023de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	b292      	uxth	r2, r2
 80023c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	1c9a      	adds	r2, r3, #2
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023da:	2301      	movs	r3, #1
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80023de:	f7fe fd27 	bl	8000e30 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d807      	bhi.n	80023fe <HAL_SPI_TransmitReceive+0x1d8>
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023f4:	d003      	beq.n	80023fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80023fc:	e0a7      	b.n	800254e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1a6      	bne.n	8002356 <HAL_SPI_TransmitReceive+0x130>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1a1      	bne.n	8002356 <HAL_SPI_TransmitReceive+0x130>
 8002412:	e07c      	b.n	800250e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HAL_SPI_TransmitReceive+0x1fc>
 800241c:	8b7b      	ldrh	r3, [r7, #26]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d16b      	bne.n	80024fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	330c      	adds	r3, #12
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002448:	e057      	b.n	80024fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b02      	cmp	r3, #2
 8002456:	d11c      	bne.n	8002492 <HAL_SPI_TransmitReceive+0x26c>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d017      	beq.n	8002492 <HAL_SPI_TransmitReceive+0x26c>
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d114      	bne.n	8002492 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002484:	b29b      	uxth	r3, r3
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d119      	bne.n	80024d4 <HAL_SPI_TransmitReceive+0x2ae>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d014      	beq.n	80024d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80024d4:	f7fe fcac 	bl	8000e30 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d803      	bhi.n	80024ec <HAL_SPI_TransmitReceive+0x2c6>
 80024e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ea:	d102      	bne.n	80024f2 <HAL_SPI_TransmitReceive+0x2cc>
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024f8:	e029      	b.n	800254e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024fe:	b29b      	uxth	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1a2      	bne.n	800244a <HAL_SPI_TransmitReceive+0x224>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d19d      	bne.n	800244a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800250e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002510:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f8f8 	bl	8002708 <SPI_EndRxTxTransaction>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800252a:	e010      	b.n	800254e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10b      	bne.n	800254c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	e000      	b.n	800254e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800254c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800255e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002562:	4618      	mov	r0, r3
 8002564:	3730      	adds	r7, #48	; 0x30
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	603b      	str	r3, [r7, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800257a:	e04c      	b.n	8002616 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002582:	d048      	beq.n	8002616 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002584:	f7fe fc54 	bl	8000e30 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	429a      	cmp	r2, r3
 8002592:	d902      	bls.n	800259a <SPI_WaitFlagStateUntilTimeout+0x30>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d13d      	bne.n	8002616 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80025a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025b2:	d111      	bne.n	80025d8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025bc:	d004      	beq.n	80025c8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c6:	d107      	bne.n	80025d8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025e0:	d10f      	bne.n	8002602 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002600:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e00f      	b.n	8002636 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4013      	ands	r3, r2
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	429a      	cmp	r2, r3
 8002624:	bf0c      	ite	eq
 8002626:	2301      	moveq	r3, #1
 8002628:	2300      	movne	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	429a      	cmp	r2, r3
 8002632:	d1a3      	bne.n	800257c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af02      	add	r7, sp, #8
 8002644:	60f8      	str	r0, [r7, #12]
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002652:	d111      	bne.n	8002678 <SPI_EndRxTransaction+0x3a>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800265c:	d004      	beq.n	8002668 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002666:	d107      	bne.n	8002678 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002676:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002680:	d12a      	bne.n	80026d8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d012      	beq.n	80026b2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2200      	movs	r2, #0
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7ff ff67 	bl	800256a <SPI_WaitFlagStateUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d02d      	beq.n	80026fe <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f043 0220 	orr.w	r2, r3, #32
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e026      	b.n	8002700 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2101      	movs	r1, #1
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7ff ff54 	bl	800256a <SPI_WaitFlagStateUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d01a      	beq.n	80026fe <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026cc:	f043 0220 	orr.w	r2, r3, #32
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e013      	b.n	8002700 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2200      	movs	r2, #0
 80026e0:	2101      	movs	r1, #1
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7ff ff41 	bl	800256a <SPI_WaitFlagStateUntilTimeout>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e000      	b.n	8002700 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af02      	add	r7, sp, #8
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002714:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <SPI_EndRxTxTransaction+0x7c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <SPI_EndRxTxTransaction+0x80>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	0d5b      	lsrs	r3, r3, #21
 8002720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002732:	d112      	bne.n	800275a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2200      	movs	r2, #0
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f7ff ff13 	bl	800256a <SPI_WaitFlagStateUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e00f      	b.n	800277a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00a      	beq.n	8002776 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	3b01      	subs	r3, #1
 8002764:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	d0f2      	beq.n	800275a <SPI_EndRxTxTransaction+0x52>
 8002774:	e000      	b.n	8002778 <SPI_EndRxTxTransaction+0x70>
        break;
 8002776:	bf00      	nop
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000008 	.word	0x20000008
 8002788:	165e9f81 	.word	0x165e9f81

0800278c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e01d      	b.n	80027da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f815 	bl	80027e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3304      	adds	r3, #4
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f000 f968 	bl	8002aa0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr

080027f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027f6:	b480      	push	{r7}
 80027f8:	b085      	sub	sp, #20
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0201 	orr.w	r2, r2, #1
 800280c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2b06      	cmp	r3, #6
 800281e:	d007      	beq.n	8002830 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b082      	sub	sp, #8
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b02      	cmp	r3, #2
 8002852:	d122      	bne.n	800289a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d11b      	bne.n	800289a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f06f 0202 	mvn.w	r2, #2
 800286a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f8ee 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 8002886:	e005      	b.n	8002894 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f8e0 	bl	8002a4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f8f1 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d122      	bne.n	80028ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d11b      	bne.n	80028ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f06f 0204 	mvn.w	r2, #4
 80028be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f8c4 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 80028da:	e005      	b.n	80028e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8b6 	bl	8002a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8c7 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d122      	bne.n	8002942 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b08      	cmp	r3, #8
 8002908:	d11b      	bne.n	8002942 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f06f 0208 	mvn.w	r2, #8
 8002912:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2204      	movs	r2, #4
 8002918:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f89a 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 800292e:	e005      	b.n	800293c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f88c 	bl	8002a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f89d 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	2b10      	cmp	r3, #16
 800294e:	d122      	bne.n	8002996 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b10      	cmp	r3, #16
 800295c:	d11b      	bne.n	8002996 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f06f 0210 	mvn.w	r2, #16
 8002966:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2208      	movs	r2, #8
 800296c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f870 	bl	8002a62 <HAL_TIM_IC_CaptureCallback>
 8002982:	e005      	b.n	8002990 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f862 	bl	8002a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f873 	bl	8002a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d10e      	bne.n	80029c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d107      	bne.n	80029c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f06f 0201 	mvn.w	r2, #1
 80029ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7fe f873 	bl	8000aa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	2b80      	cmp	r3, #128	; 0x80
 80029ce:	d10e      	bne.n	80029ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d107      	bne.n	80029ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f903 	bl	8002bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d10e      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a06:	2b40      	cmp	r3, #64	; 0x40
 8002a08:	d107      	bne.n	8002a1a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 f838 	bl	8002a8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d10e      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0320 	and.w	r3, r3, #32
 8002a32:	2b20      	cmp	r3, #32
 8002a34:	d107      	bne.n	8002a46 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f06f 0220 	mvn.w	r2, #32
 8002a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f8cd 	bl	8002be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a40      	ldr	r2, [pc, #256]	; (8002bb4 <TIM_Base_SetConfig+0x114>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abe:	d00f      	beq.n	8002ae0 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a3d      	ldr	r2, [pc, #244]	; (8002bb8 <TIM_Base_SetConfig+0x118>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d00b      	beq.n	8002ae0 <TIM_Base_SetConfig+0x40>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a3c      	ldr	r2, [pc, #240]	; (8002bbc <TIM_Base_SetConfig+0x11c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <TIM_Base_SetConfig+0x40>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <TIM_Base_SetConfig+0x120>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_Base_SetConfig+0x40>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <TIM_Base_SetConfig+0x124>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <TIM_Base_SetConfig+0x114>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d02b      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d027      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2c      	ldr	r2, [pc, #176]	; (8002bb8 <TIM_Base_SetConfig+0x118>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d023      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <TIM_Base_SetConfig+0x11c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01f      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a2a      	ldr	r2, [pc, #168]	; (8002bc0 <TIM_Base_SetConfig+0x120>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d01b      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <TIM_Base_SetConfig+0x124>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d017      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a28      	ldr	r2, [pc, #160]	; (8002bc8 <TIM_Base_SetConfig+0x128>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a27      	ldr	r2, [pc, #156]	; (8002bcc <TIM_Base_SetConfig+0x12c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00f      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <TIM_Base_SetConfig+0x130>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d00b      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <TIM_Base_SetConfig+0x134>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <TIM_Base_SetConfig+0x138>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d003      	beq.n	8002b52 <TIM_Base_SetConfig+0xb2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a23      	ldr	r2, [pc, #140]	; (8002bdc <TIM_Base_SetConfig+0x13c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d108      	bne.n	8002b64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <TIM_Base_SetConfig+0x114>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <TIM_Base_SetConfig+0xf8>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <TIM_Base_SetConfig+0x124>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d103      	bne.n	8002ba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	615a      	str	r2, [r3, #20]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800
 8002bc0:	40000c00 	.word	0x40000c00
 8002bc4:	40010400 	.word	0x40010400
 8002bc8:	40014000 	.word	0x40014000
 8002bcc:	40014400 	.word	0x40014400
 8002bd0:	40014800 	.word	0x40014800
 8002bd4:	40001800 	.word	0x40001800
 8002bd8:	40001c00 	.word	0x40001c00
 8002bdc:	40002000 	.word	0x40002000

08002be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e03f      	b.n	8002c9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd ffc0 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2224      	movs	r2, #36	; 0x24
 8002c38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 f90b 	bl	8002e68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b088      	sub	sp, #32
 8002ca6:	af02      	add	r7, sp, #8
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	f040 8083 	bne.w	8002dca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <HAL_UART_Transmit+0x2e>
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e07b      	b.n	8002dcc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_UART_Transmit+0x40>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e074      	b.n	8002dcc <HAL_UART_Transmit+0x12a>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2221      	movs	r2, #33	; 0x21
 8002cf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002cf8:	f7fe f89a 	bl	8000e30 <HAL_GetTick>
 8002cfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	88fa      	ldrh	r2, [r7, #6]
 8002d02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	88fa      	ldrh	r2, [r7, #6]
 8002d08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002d12:	e042      	b.n	8002d9a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	d122      	bne.n	8002d72 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f84c 	bl	8002dd4 <UART_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e042      	b.n	8002dcc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d103      	bne.n	8002d6a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	3302      	adds	r3, #2
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	e017      	b.n	8002d9a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	e013      	b.n	8002d9a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2180      	movs	r1, #128	; 0x80
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f829 	bl	8002dd4 <UART_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e01f      	b.n	8002dcc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	60ba      	str	r2, [r7, #8]
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1b7      	bne.n	8002d14 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2200      	movs	r2, #0
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f810 	bl	8002dd4 <UART_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e006      	b.n	8002dcc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e000      	b.n	8002dcc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
  }
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	4613      	mov	r3, r2
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de4:	e02c      	b.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dec:	d028      	beq.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d007      	beq.n	8002e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8002df4:	f7fe f81c 	bl	8000e30 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d21d      	bcs.n	8002e40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e00f      	b.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	461a      	mov	r2, r3
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d0c3      	beq.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002eaa:	f023 030c 	bic.w	r3, r3, #12
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6812      	ldr	r2, [r2, #0]
 8002eb2:	68f9      	ldr	r1, [r7, #12]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699a      	ldr	r2, [r3, #24]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ed6:	f040 818b 	bne.w	80031f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4ac1      	ldr	r2, [pc, #772]	; (80031e4 <UART_SetConfig+0x37c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d005      	beq.n	8002ef0 <UART_SetConfig+0x88>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4abf      	ldr	r2, [pc, #764]	; (80031e8 <UART_SetConfig+0x380>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	f040 80bd 	bne.w	800306a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ef0:	f7fe feb2 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 8002ef4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	461d      	mov	r5, r3
 8002efa:	f04f 0600 	mov.w	r6, #0
 8002efe:	46a8      	mov	r8, r5
 8002f00:	46b1      	mov	r9, r6
 8002f02:	eb18 0308 	adds.w	r3, r8, r8
 8002f06:	eb49 0409 	adc.w	r4, r9, r9
 8002f0a:	4698      	mov	r8, r3
 8002f0c:	46a1      	mov	r9, r4
 8002f0e:	eb18 0805 	adds.w	r8, r8, r5
 8002f12:	eb49 0906 	adc.w	r9, r9, r6
 8002f16:	f04f 0100 	mov.w	r1, #0
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f2a:	4688      	mov	r8, r1
 8002f2c:	4691      	mov	r9, r2
 8002f2e:	eb18 0005 	adds.w	r0, r8, r5
 8002f32:	eb49 0106 	adc.w	r1, r9, r6
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	461d      	mov	r5, r3
 8002f3c:	f04f 0600 	mov.w	r6, #0
 8002f40:	196b      	adds	r3, r5, r5
 8002f42:	eb46 0406 	adc.w	r4, r6, r6
 8002f46:	461a      	mov	r2, r3
 8002f48:	4623      	mov	r3, r4
 8002f4a:	f7fd f949 	bl	80001e0 <__aeabi_uldivmod>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	460c      	mov	r4, r1
 8002f52:	461a      	mov	r2, r3
 8002f54:	4ba5      	ldr	r3, [pc, #660]	; (80031ec <UART_SetConfig+0x384>)
 8002f56:	fba3 2302 	umull	r2, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	461d      	mov	r5, r3
 8002f64:	f04f 0600 	mov.w	r6, #0
 8002f68:	46a9      	mov	r9, r5
 8002f6a:	46b2      	mov	sl, r6
 8002f6c:	eb19 0309 	adds.w	r3, r9, r9
 8002f70:	eb4a 040a 	adc.w	r4, sl, sl
 8002f74:	4699      	mov	r9, r3
 8002f76:	46a2      	mov	sl, r4
 8002f78:	eb19 0905 	adds.w	r9, r9, r5
 8002f7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f80:	f04f 0100 	mov.w	r1, #0
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f94:	4689      	mov	r9, r1
 8002f96:	4692      	mov	sl, r2
 8002f98:	eb19 0005 	adds.w	r0, r9, r5
 8002f9c:	eb4a 0106 	adc.w	r1, sl, r6
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	461d      	mov	r5, r3
 8002fa6:	f04f 0600 	mov.w	r6, #0
 8002faa:	196b      	adds	r3, r5, r5
 8002fac:	eb46 0406 	adc.w	r4, r6, r6
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4623      	mov	r3, r4
 8002fb4:	f7fd f914 	bl	80001e0 <__aeabi_uldivmod>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	460c      	mov	r4, r1
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4b8b      	ldr	r3, [pc, #556]	; (80031ec <UART_SetConfig+0x384>)
 8002fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc4:	095b      	lsrs	r3, r3, #5
 8002fc6:	2164      	movs	r1, #100	; 0x64
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	3332      	adds	r3, #50	; 0x32
 8002fd2:	4a86      	ldr	r2, [pc, #536]	; (80031ec <UART_SetConfig+0x384>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fe0:	4498      	add	r8, r3
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	461d      	mov	r5, r3
 8002fe6:	f04f 0600 	mov.w	r6, #0
 8002fea:	46a9      	mov	r9, r5
 8002fec:	46b2      	mov	sl, r6
 8002fee:	eb19 0309 	adds.w	r3, r9, r9
 8002ff2:	eb4a 040a 	adc.w	r4, sl, sl
 8002ff6:	4699      	mov	r9, r3
 8002ff8:	46a2      	mov	sl, r4
 8002ffa:	eb19 0905 	adds.w	r9, r9, r5
 8002ffe:	eb4a 0a06 	adc.w	sl, sl, r6
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800300e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003012:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003016:	4689      	mov	r9, r1
 8003018:	4692      	mov	sl, r2
 800301a:	eb19 0005 	adds.w	r0, r9, r5
 800301e:	eb4a 0106 	adc.w	r1, sl, r6
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	461d      	mov	r5, r3
 8003028:	f04f 0600 	mov.w	r6, #0
 800302c:	196b      	adds	r3, r5, r5
 800302e:	eb46 0406 	adc.w	r4, r6, r6
 8003032:	461a      	mov	r2, r3
 8003034:	4623      	mov	r3, r4
 8003036:	f7fd f8d3 	bl	80001e0 <__aeabi_uldivmod>
 800303a:	4603      	mov	r3, r0
 800303c:	460c      	mov	r4, r1
 800303e:	461a      	mov	r2, r3
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <UART_SetConfig+0x384>)
 8003042:	fba3 1302 	umull	r1, r3, r3, r2
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2164      	movs	r1, #100	; 0x64
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	3332      	adds	r3, #50	; 0x32
 8003054:	4a65      	ldr	r2, [pc, #404]	; (80031ec <UART_SetConfig+0x384>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	f003 0207 	and.w	r2, r3, #7
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4442      	add	r2, r8
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	e26f      	b.n	800354a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800306a:	f7fe fde1 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 800306e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	461d      	mov	r5, r3
 8003074:	f04f 0600 	mov.w	r6, #0
 8003078:	46a8      	mov	r8, r5
 800307a:	46b1      	mov	r9, r6
 800307c:	eb18 0308 	adds.w	r3, r8, r8
 8003080:	eb49 0409 	adc.w	r4, r9, r9
 8003084:	4698      	mov	r8, r3
 8003086:	46a1      	mov	r9, r4
 8003088:	eb18 0805 	adds.w	r8, r8, r5
 800308c:	eb49 0906 	adc.w	r9, r9, r6
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800309c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030a0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030a4:	4688      	mov	r8, r1
 80030a6:	4691      	mov	r9, r2
 80030a8:	eb18 0005 	adds.w	r0, r8, r5
 80030ac:	eb49 0106 	adc.w	r1, r9, r6
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	461d      	mov	r5, r3
 80030b6:	f04f 0600 	mov.w	r6, #0
 80030ba:	196b      	adds	r3, r5, r5
 80030bc:	eb46 0406 	adc.w	r4, r6, r6
 80030c0:	461a      	mov	r2, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	f7fd f88c 	bl	80001e0 <__aeabi_uldivmod>
 80030c8:	4603      	mov	r3, r0
 80030ca:	460c      	mov	r4, r1
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b47      	ldr	r3, [pc, #284]	; (80031ec <UART_SetConfig+0x384>)
 80030d0:	fba3 2302 	umull	r2, r3, r3, r2
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	461d      	mov	r5, r3
 80030de:	f04f 0600 	mov.w	r6, #0
 80030e2:	46a9      	mov	r9, r5
 80030e4:	46b2      	mov	sl, r6
 80030e6:	eb19 0309 	adds.w	r3, r9, r9
 80030ea:	eb4a 040a 	adc.w	r4, sl, sl
 80030ee:	4699      	mov	r9, r3
 80030f0:	46a2      	mov	sl, r4
 80030f2:	eb19 0905 	adds.w	r9, r9, r5
 80030f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80030fa:	f04f 0100 	mov.w	r1, #0
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003106:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800310a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800310e:	4689      	mov	r9, r1
 8003110:	4692      	mov	sl, r2
 8003112:	eb19 0005 	adds.w	r0, r9, r5
 8003116:	eb4a 0106 	adc.w	r1, sl, r6
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	461d      	mov	r5, r3
 8003120:	f04f 0600 	mov.w	r6, #0
 8003124:	196b      	adds	r3, r5, r5
 8003126:	eb46 0406 	adc.w	r4, r6, r6
 800312a:	461a      	mov	r2, r3
 800312c:	4623      	mov	r3, r4
 800312e:	f7fd f857 	bl	80001e0 <__aeabi_uldivmod>
 8003132:	4603      	mov	r3, r0
 8003134:	460c      	mov	r4, r1
 8003136:	461a      	mov	r2, r3
 8003138:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <UART_SetConfig+0x384>)
 800313a:	fba3 1302 	umull	r1, r3, r3, r2
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2164      	movs	r1, #100	; 0x64
 8003142:	fb01 f303 	mul.w	r3, r1, r3
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	3332      	adds	r3, #50	; 0x32
 800314c:	4a27      	ldr	r2, [pc, #156]	; (80031ec <UART_SetConfig+0x384>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800315a:	4498      	add	r8, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	461d      	mov	r5, r3
 8003160:	f04f 0600 	mov.w	r6, #0
 8003164:	46a9      	mov	r9, r5
 8003166:	46b2      	mov	sl, r6
 8003168:	eb19 0309 	adds.w	r3, r9, r9
 800316c:	eb4a 040a 	adc.w	r4, sl, sl
 8003170:	4699      	mov	r9, r3
 8003172:	46a2      	mov	sl, r4
 8003174:	eb19 0905 	adds.w	r9, r9, r5
 8003178:	eb4a 0a06 	adc.w	sl, sl, r6
 800317c:	f04f 0100 	mov.w	r1, #0
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800318c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003190:	4689      	mov	r9, r1
 8003192:	4692      	mov	sl, r2
 8003194:	eb19 0005 	adds.w	r0, r9, r5
 8003198:	eb4a 0106 	adc.w	r1, sl, r6
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	461d      	mov	r5, r3
 80031a2:	f04f 0600 	mov.w	r6, #0
 80031a6:	196b      	adds	r3, r5, r5
 80031a8:	eb46 0406 	adc.w	r4, r6, r6
 80031ac:	461a      	mov	r2, r3
 80031ae:	4623      	mov	r3, r4
 80031b0:	f7fd f816 	bl	80001e0 <__aeabi_uldivmod>
 80031b4:	4603      	mov	r3, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <UART_SetConfig+0x384>)
 80031bc:	fba3 1302 	umull	r1, r3, r3, r2
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	2164      	movs	r1, #100	; 0x64
 80031c4:	fb01 f303 	mul.w	r3, r1, r3
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	00db      	lsls	r3, r3, #3
 80031cc:	3332      	adds	r3, #50	; 0x32
 80031ce:	4a07      	ldr	r2, [pc, #28]	; (80031ec <UART_SetConfig+0x384>)
 80031d0:	fba2 2303 	umull	r2, r3, r2, r3
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	f003 0207 	and.w	r2, r3, #7
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4442      	add	r2, r8
 80031e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031e2:	e1b2      	b.n	800354a <UART_SetConfig+0x6e2>
 80031e4:	40011000 	.word	0x40011000
 80031e8:	40011400 	.word	0x40011400
 80031ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4ad7      	ldr	r2, [pc, #860]	; (8003554 <UART_SetConfig+0x6ec>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d005      	beq.n	8003206 <UART_SetConfig+0x39e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4ad6      	ldr	r2, [pc, #856]	; (8003558 <UART_SetConfig+0x6f0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	f040 80d1 	bne.w	80033a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003206:	f7fe fd27 	bl	8001c58 <HAL_RCC_GetPCLK2Freq>
 800320a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	469a      	mov	sl, r3
 8003210:	f04f 0b00 	mov.w	fp, #0
 8003214:	46d0      	mov	r8, sl
 8003216:	46d9      	mov	r9, fp
 8003218:	eb18 0308 	adds.w	r3, r8, r8
 800321c:	eb49 0409 	adc.w	r4, r9, r9
 8003220:	4698      	mov	r8, r3
 8003222:	46a1      	mov	r9, r4
 8003224:	eb18 080a 	adds.w	r8, r8, sl
 8003228:	eb49 090b 	adc.w	r9, r9, fp
 800322c:	f04f 0100 	mov.w	r1, #0
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003238:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800323c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003240:	4688      	mov	r8, r1
 8003242:	4691      	mov	r9, r2
 8003244:	eb1a 0508 	adds.w	r5, sl, r8
 8003248:	eb4b 0609 	adc.w	r6, fp, r9
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4619      	mov	r1, r3
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	f04f 0400 	mov.w	r4, #0
 800325e:	0094      	lsls	r4, r2, #2
 8003260:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003264:	008b      	lsls	r3, r1, #2
 8003266:	461a      	mov	r2, r3
 8003268:	4623      	mov	r3, r4
 800326a:	4628      	mov	r0, r5
 800326c:	4631      	mov	r1, r6
 800326e:	f7fc ffb7 	bl	80001e0 <__aeabi_uldivmod>
 8003272:	4603      	mov	r3, r0
 8003274:	460c      	mov	r4, r1
 8003276:	461a      	mov	r2, r3
 8003278:	4bb8      	ldr	r3, [pc, #736]	; (800355c <UART_SetConfig+0x6f4>)
 800327a:	fba3 2302 	umull	r2, r3, r3, r2
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	469b      	mov	fp, r3
 8003288:	f04f 0c00 	mov.w	ip, #0
 800328c:	46d9      	mov	r9, fp
 800328e:	46e2      	mov	sl, ip
 8003290:	eb19 0309 	adds.w	r3, r9, r9
 8003294:	eb4a 040a 	adc.w	r4, sl, sl
 8003298:	4699      	mov	r9, r3
 800329a:	46a2      	mov	sl, r4
 800329c:	eb19 090b 	adds.w	r9, r9, fp
 80032a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032a4:	f04f 0100 	mov.w	r1, #0
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032b8:	4689      	mov	r9, r1
 80032ba:	4692      	mov	sl, r2
 80032bc:	eb1b 0509 	adds.w	r5, fp, r9
 80032c0:	eb4c 060a 	adc.w	r6, ip, sl
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	f04f 0400 	mov.w	r4, #0
 80032d6:	0094      	lsls	r4, r2, #2
 80032d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032dc:	008b      	lsls	r3, r1, #2
 80032de:	461a      	mov	r2, r3
 80032e0:	4623      	mov	r3, r4
 80032e2:	4628      	mov	r0, r5
 80032e4:	4631      	mov	r1, r6
 80032e6:	f7fc ff7b 	bl	80001e0 <__aeabi_uldivmod>
 80032ea:	4603      	mov	r3, r0
 80032ec:	460c      	mov	r4, r1
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b9a      	ldr	r3, [pc, #616]	; (800355c <UART_SetConfig+0x6f4>)
 80032f2:	fba3 1302 	umull	r1, r3, r3, r2
 80032f6:	095b      	lsrs	r3, r3, #5
 80032f8:	2164      	movs	r1, #100	; 0x64
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	3332      	adds	r3, #50	; 0x32
 8003304:	4a95      	ldr	r2, [pc, #596]	; (800355c <UART_SetConfig+0x6f4>)
 8003306:	fba2 2303 	umull	r2, r3, r2, r3
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003310:	4498      	add	r8, r3
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	469b      	mov	fp, r3
 8003316:	f04f 0c00 	mov.w	ip, #0
 800331a:	46d9      	mov	r9, fp
 800331c:	46e2      	mov	sl, ip
 800331e:	eb19 0309 	adds.w	r3, r9, r9
 8003322:	eb4a 040a 	adc.w	r4, sl, sl
 8003326:	4699      	mov	r9, r3
 8003328:	46a2      	mov	sl, r4
 800332a:	eb19 090b 	adds.w	r9, r9, fp
 800332e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800333e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003346:	4689      	mov	r9, r1
 8003348:	4692      	mov	sl, r2
 800334a:	eb1b 0509 	adds.w	r5, fp, r9
 800334e:	eb4c 060a 	adc.w	r6, ip, sl
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4619      	mov	r1, r3
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	f04f 0400 	mov.w	r4, #0
 8003364:	0094      	lsls	r4, r2, #2
 8003366:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800336a:	008b      	lsls	r3, r1, #2
 800336c:	461a      	mov	r2, r3
 800336e:	4623      	mov	r3, r4
 8003370:	4628      	mov	r0, r5
 8003372:	4631      	mov	r1, r6
 8003374:	f7fc ff34 	bl	80001e0 <__aeabi_uldivmod>
 8003378:	4603      	mov	r3, r0
 800337a:	460c      	mov	r4, r1
 800337c:	461a      	mov	r2, r3
 800337e:	4b77      	ldr	r3, [pc, #476]	; (800355c <UART_SetConfig+0x6f4>)
 8003380:	fba3 1302 	umull	r1, r3, r3, r2
 8003384:	095b      	lsrs	r3, r3, #5
 8003386:	2164      	movs	r1, #100	; 0x64
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	3332      	adds	r3, #50	; 0x32
 8003392:	4a72      	ldr	r2, [pc, #456]	; (800355c <UART_SetConfig+0x6f4>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	095b      	lsrs	r3, r3, #5
 800339a:	f003 020f 	and.w	r2, r3, #15
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4442      	add	r2, r8
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	e0d0      	b.n	800354a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80033a8:	f7fe fc42 	bl	8001c30 <HAL_RCC_GetPCLK1Freq>
 80033ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	469a      	mov	sl, r3
 80033b2:	f04f 0b00 	mov.w	fp, #0
 80033b6:	46d0      	mov	r8, sl
 80033b8:	46d9      	mov	r9, fp
 80033ba:	eb18 0308 	adds.w	r3, r8, r8
 80033be:	eb49 0409 	adc.w	r4, r9, r9
 80033c2:	4698      	mov	r8, r3
 80033c4:	46a1      	mov	r9, r4
 80033c6:	eb18 080a 	adds.w	r8, r8, sl
 80033ca:	eb49 090b 	adc.w	r9, r9, fp
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033e2:	4688      	mov	r8, r1
 80033e4:	4691      	mov	r9, r2
 80033e6:	eb1a 0508 	adds.w	r5, sl, r8
 80033ea:	eb4b 0609 	adc.w	r6, fp, r9
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	4619      	mov	r1, r3
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	f04f 0400 	mov.w	r4, #0
 8003400:	0094      	lsls	r4, r2, #2
 8003402:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003406:	008b      	lsls	r3, r1, #2
 8003408:	461a      	mov	r2, r3
 800340a:	4623      	mov	r3, r4
 800340c:	4628      	mov	r0, r5
 800340e:	4631      	mov	r1, r6
 8003410:	f7fc fee6 	bl	80001e0 <__aeabi_uldivmod>
 8003414:	4603      	mov	r3, r0
 8003416:	460c      	mov	r4, r1
 8003418:	461a      	mov	r2, r3
 800341a:	4b50      	ldr	r3, [pc, #320]	; (800355c <UART_SetConfig+0x6f4>)
 800341c:	fba3 2302 	umull	r2, r3, r3, r2
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	469b      	mov	fp, r3
 800342a:	f04f 0c00 	mov.w	ip, #0
 800342e:	46d9      	mov	r9, fp
 8003430:	46e2      	mov	sl, ip
 8003432:	eb19 0309 	adds.w	r3, r9, r9
 8003436:	eb4a 040a 	adc.w	r4, sl, sl
 800343a:	4699      	mov	r9, r3
 800343c:	46a2      	mov	sl, r4
 800343e:	eb19 090b 	adds.w	r9, r9, fp
 8003442:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003452:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003456:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800345a:	4689      	mov	r9, r1
 800345c:	4692      	mov	sl, r2
 800345e:	eb1b 0509 	adds.w	r5, fp, r9
 8003462:	eb4c 060a 	adc.w	r6, ip, sl
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4619      	mov	r1, r3
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f04f 0400 	mov.w	r4, #0
 8003478:	0094      	lsls	r4, r2, #2
 800347a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800347e:	008b      	lsls	r3, r1, #2
 8003480:	461a      	mov	r2, r3
 8003482:	4623      	mov	r3, r4
 8003484:	4628      	mov	r0, r5
 8003486:	4631      	mov	r1, r6
 8003488:	f7fc feaa 	bl	80001e0 <__aeabi_uldivmod>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	461a      	mov	r2, r3
 8003492:	4b32      	ldr	r3, [pc, #200]	; (800355c <UART_SetConfig+0x6f4>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	4a2d      	ldr	r2, [pc, #180]	; (800355c <UART_SetConfig+0x6f4>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b2:	4498      	add	r8, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	469b      	mov	fp, r3
 80034b8:	f04f 0c00 	mov.w	ip, #0
 80034bc:	46d9      	mov	r9, fp
 80034be:	46e2      	mov	sl, ip
 80034c0:	eb19 0309 	adds.w	r3, r9, r9
 80034c4:	eb4a 040a 	adc.w	r4, sl, sl
 80034c8:	4699      	mov	r9, r3
 80034ca:	46a2      	mov	sl, r4
 80034cc:	eb19 090b 	adds.w	r9, r9, fp
 80034d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034d4:	f04f 0100 	mov.w	r1, #0
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e8:	4689      	mov	r9, r1
 80034ea:	4692      	mov	sl, r2
 80034ec:	eb1b 0509 	adds.w	r5, fp, r9
 80034f0:	eb4c 060a 	adc.w	r6, ip, sl
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	4619      	mov	r1, r3
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	f04f 0400 	mov.w	r4, #0
 8003506:	0094      	lsls	r4, r2, #2
 8003508:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800350c:	008b      	lsls	r3, r1, #2
 800350e:	461a      	mov	r2, r3
 8003510:	4623      	mov	r3, r4
 8003512:	4628      	mov	r0, r5
 8003514:	4631      	mov	r1, r6
 8003516:	f7fc fe63 	bl	80001e0 <__aeabi_uldivmod>
 800351a:	4603      	mov	r3, r0
 800351c:	460c      	mov	r4, r1
 800351e:	461a      	mov	r2, r3
 8003520:	4b0e      	ldr	r3, [pc, #56]	; (800355c <UART_SetConfig+0x6f4>)
 8003522:	fba3 1302 	umull	r1, r3, r3, r2
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2164      	movs	r1, #100	; 0x64
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	3332      	adds	r3, #50	; 0x32
 8003534:	4a09      	ldr	r2, [pc, #36]	; (800355c <UART_SetConfig+0x6f4>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	f003 020f 	and.w	r2, r3, #15
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4442      	add	r2, r8
 8003546:	609a      	str	r2, [r3, #8]
}
 8003548:	e7ff      	b.n	800354a <UART_SetConfig+0x6e2>
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003554:	40011000 	.word	0x40011000
 8003558:	40011400 	.word	0x40011400
 800355c:	51eb851f 	.word	0x51eb851f

08003560 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f103 0208 	add.w	r2, r3, #8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003578:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f103 0208 	add.w	r2, r3, #8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f103 0208 	add.w	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
}
 80035f6:	bf00      	nop
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003618:	d103      	bne.n	8003622 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	e00c      	b.n	800363c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3308      	adds	r3, #8
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	e002      	b.n	8003630 <vListInsert+0x2e>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	d2f6      	bcs.n	800362a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	601a      	str	r2, [r3, #0]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6892      	ldr	r2, [r2, #8]
 800368a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6852      	ldr	r2, [r2, #4]
 8003694:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	429a      	cmp	r2, r3
 800369e:	d103      	bne.n	80036a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	1e5a      	subs	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	e7fe      	b.n	80036ee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80036f0:	f002 fd54 	bl	800619c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fc:	68f9      	ldr	r1, [r7, #12]
 80036fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	441a      	add	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003720:	3b01      	subs	r3, #1
 8003722:	68f9      	ldr	r1, [r7, #12]
 8003724:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	441a      	add	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	22ff      	movs	r2, #255	; 0xff
 8003734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	22ff      	movs	r2, #255	; 0xff
 800373c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d114      	bne.n	8003770 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01a      	beq.n	8003784 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3310      	adds	r3, #16
 8003752:	4618      	mov	r0, r3
 8003754:	f001 fc0e 	bl	8004f74 <xTaskRemoveFromEventList>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d012      	beq.n	8003784 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <xQueueGenericReset+0xcc>)
 8003760:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	e009      	b.n	8003784 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	3310      	adds	r3, #16
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fef3 	bl	8003560 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3324      	adds	r3, #36	; 0x24
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff feee 	bl	8003560 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003784:	f002 fd38 	bl	80061f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003788:	2301      	movs	r3, #1
}
 800378a:	4618      	mov	r0, r3
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	e000ed04 	.word	0xe000ed04

08003798 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003798:	b580      	push	{r7, lr}
 800379a:	b08a      	sub	sp, #40	; 0x28
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <xQueueGenericCreate+0x28>
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	e7fe      	b.n	80037be <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d102      	bne.n	80037cc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
 80037ca:	e004      	b.n	80037d6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	fb02 f303 	mul.w	r3, r2, r3
 80037d4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	3350      	adds	r3, #80	; 0x50
 80037da:	4618      	mov	r0, r3
 80037dc:	f002 fdf8 	bl	80063d0 <pvPortMalloc>
 80037e0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00d      	beq.n	8003804 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3350      	adds	r3, #80	; 0x50
 80037f0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037f2:	79fa      	ldrb	r2, [r7, #7]
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	4613      	mov	r3, r2
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	68b9      	ldr	r1, [r7, #8]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f805 	bl	800380e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003804:	69bb      	ldr	r3, [r7, #24]
	}
 8003806:	4618      	mov	r0, r3
 8003808:	3720      	adds	r7, #32
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	e002      	b.n	8003830 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800383c:	2101      	movs	r1, #1
 800383e:	69b8      	ldr	r0, [r7, #24]
 8003840:	f7ff ff42 	bl	80036c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b08e      	sub	sp, #56	; 0x38
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
 8003860:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003862:	2300      	movs	r3, #0
 8003864:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <xQueueGenericSend+0x30>
 8003870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003874:	f383 8811 	msr	BASEPRI, r3
 8003878:	f3bf 8f6f 	isb	sy
 800387c:	f3bf 8f4f 	dsb	sy
 8003880:	62bb      	str	r3, [r7, #40]	; 0x28
 8003882:	e7fe      	b.n	8003882 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <xQueueGenericSend+0x3e>
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <xQueueGenericSend+0x42>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <xQueueGenericSend+0x44>
 8003896:	2300      	movs	r3, #0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <xQueueGenericSend+0x5c>
 800389c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a0:	f383 8811 	msr	BASEPRI, r3
 80038a4:	f3bf 8f6f 	isb	sy
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	627b      	str	r3, [r7, #36]	; 0x24
 80038ae:	e7fe      	b.n	80038ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d103      	bne.n	80038be <xQueueGenericSend+0x6a>
 80038b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <xQueueGenericSend+0x6e>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <xQueueGenericSend+0x70>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d109      	bne.n	80038dc <xQueueGenericSend+0x88>
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	623b      	str	r3, [r7, #32]
 80038da:	e7fe      	b.n	80038da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038dc:	f001 fd18 	bl	8005310 <xTaskGetSchedulerState>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <xQueueGenericSend+0x98>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <xQueueGenericSend+0x9c>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <xQueueGenericSend+0x9e>
 80038f0:	2300      	movs	r3, #0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <xQueueGenericSend+0xb6>
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	e7fe      	b.n	8003908 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800390a:	f002 fc47 	bl	800619c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <xQueueGenericSend+0xcc>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d129      	bne.n	8003974 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003926:	f000 f9ff 	bl	8003d28 <prvCopyDataToQueue>
 800392a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	3324      	adds	r3, #36	; 0x24
 8003938:	4618      	mov	r0, r3
 800393a:	f001 fb1b 	bl	8004f74 <xTaskRemoveFromEventList>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003944:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <xQueueGenericSend+0x1f0>)
 8003946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f3bf 8f4f 	dsb	sy
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	e00a      	b.n	800396c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d007      	beq.n	800396c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800395c:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <xQueueGenericSend+0x1f0>)
 800395e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800396c:	f002 fc44 	bl	80061f8 <vPortExitCritical>
				return pdPASS;
 8003970:	2301      	movs	r3, #1
 8003972:	e063      	b.n	8003a3c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800397a:	f002 fc3d 	bl	80061f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800397e:	2300      	movs	r3, #0
 8003980:	e05c      	b.n	8003a3c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003984:	2b00      	cmp	r3, #0
 8003986:	d106      	bne.n	8003996 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	4618      	mov	r0, r3
 800398e:	f001 fb79 	bl	8005084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003992:	2301      	movs	r3, #1
 8003994:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003996:	f002 fc2f 	bl	80061f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800399a:	f001 f8d1 	bl	8004b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800399e:	f002 fbfd 	bl	800619c <vPortEnterCritical>
 80039a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039a8:	b25b      	sxtb	r3, r3
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ae:	d103      	bne.n	80039b8 <xQueueGenericSend+0x164>
 80039b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039be:	b25b      	sxtb	r3, r3
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c4:	d103      	bne.n	80039ce <xQueueGenericSend+0x17a>
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ce:	f002 fc13 	bl	80061f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039d2:	1d3a      	adds	r2, r7, #4
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f001 fb68 	bl	80050b0 <xTaskCheckForTimeOut>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d124      	bne.n	8003a30 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039e8:	f000 fa96 	bl	8003f18 <prvIsQueueFull>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d018      	beq.n	8003a24 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039f4:	3310      	adds	r3, #16
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fa6c 	bl	8004ed8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a02:	f000 fa21 	bl	8003e48 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a06:	f001 f8a9 	bl	8004b5c <xTaskResumeAll>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f47f af7c 	bne.w	800390a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <xQueueGenericSend+0x1f0>)
 8003a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	e772      	b.n	800390a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a26:	f000 fa0f 	bl	8003e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a2a:	f001 f897 	bl	8004b5c <xTaskResumeAll>
 8003a2e:	e76c      	b.n	800390a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a32:	f000 fa09 	bl	8003e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a36:	f001 f891 	bl	8004b5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3738      	adds	r7, #56	; 0x38
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	e000ed04 	.word	0xe000ed04

08003a48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08e      	sub	sp, #56	; 0x38
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d109      	bne.n	8003a74 <xQueueGenericSendFromISR+0x2c>
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	e7fe      	b.n	8003a72 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <xQueueGenericSendFromISR+0x3a>
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <xQueueGenericSendFromISR+0x3e>
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <xQueueGenericSendFromISR+0x40>
 8003a86:	2300      	movs	r3, #0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <xQueueGenericSendFromISR+0x58>
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	623b      	str	r3, [r7, #32]
 8003a9e:	e7fe      	b.n	8003a9e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d103      	bne.n	8003aae <xQueueGenericSendFromISR+0x66>
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <xQueueGenericSendFromISR+0x6a>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <xQueueGenericSendFromISR+0x6c>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d109      	bne.n	8003acc <xQueueGenericSendFromISR+0x84>
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	61fb      	str	r3, [r7, #28]
 8003aca:	e7fe      	b.n	8003aca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003acc:	f002 fc42 	bl	8006354 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ad0:	f3ef 8211 	mrs	r2, BASEPRI
 8003ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad8:	f383 8811 	msr	BASEPRI, r3
 8003adc:	f3bf 8f6f 	isb	sy
 8003ae0:	f3bf 8f4f 	dsb	sy
 8003ae4:	61ba      	str	r2, [r7, #24]
 8003ae6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003aea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d302      	bcc.n	8003afe <xQueueGenericSendFromISR+0xb6>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d12c      	bne.n	8003b58 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b0e:	f000 f90b 	bl	8003d28 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b12:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1a:	d112      	bne.n	8003b42 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d016      	beq.n	8003b52 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	3324      	adds	r3, #36	; 0x24
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f001 fa23 	bl	8004f74 <xTaskRemoveFromEventList>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00e      	beq.n	8003b52 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e007      	b.n	8003b52 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b46:	3301      	adds	r3, #1
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	b25a      	sxtb	r2, r3
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b52:	2301      	movs	r3, #1
 8003b54:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003b56:	e001      	b.n	8003b5c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3738      	adds	r7, #56	; 0x38
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08c      	sub	sp, #48	; 0x30
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <xQueueReceive+0x2e>
	__asm volatile
 8003b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8e:	f383 8811 	msr	BASEPRI, r3
 8003b92:	f3bf 8f6f 	isb	sy
 8003b96:	f3bf 8f4f 	dsb	sy
 8003b9a:	623b      	str	r3, [r7, #32]
 8003b9c:	e7fe      	b.n	8003b9c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d103      	bne.n	8003bac <xQueueReceive+0x3c>
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <xQueueReceive+0x40>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <xQueueReceive+0x42>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <xQueueReceive+0x5a>
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e7fe      	b.n	8003bc8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bca:	f001 fba1 	bl	8005310 <xTaskGetSchedulerState>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <xQueueReceive+0x6a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <xQueueReceive+0x6e>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <xQueueReceive+0x70>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d109      	bne.n	8003bf8 <xQueueReceive+0x88>
 8003be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be8:	f383 8811 	msr	BASEPRI, r3
 8003bec:	f3bf 8f6f 	isb	sy
 8003bf0:	f3bf 8f4f 	dsb	sy
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	e7fe      	b.n	8003bf6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bf8:	f002 fad0 	bl	800619c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d01f      	beq.n	8003c48 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c0c:	f000 f8f6 	bl	8003dfc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	1e5a      	subs	r2, r3, #1
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00f      	beq.n	8003c40 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	3310      	adds	r3, #16
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 f9a5 	bl	8004f74 <xTaskRemoveFromEventList>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c30:	4b3c      	ldr	r3, [pc, #240]	; (8003d24 <xQueueReceive+0x1b4>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c40:	f002 fada 	bl	80061f8 <vPortExitCritical>
				return pdPASS;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e069      	b.n	8003d1c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c4e:	f002 fad3 	bl	80061f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c52:	2300      	movs	r3, #0
 8003c54:	e062      	b.n	8003d1c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c5c:	f107 0310 	add.w	r3, r7, #16
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 fa0f 	bl	8005084 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c66:	2301      	movs	r3, #1
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c6a:	f002 fac5 	bl	80061f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c6e:	f000 ff67 	bl	8004b40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c72:	f002 fa93 	bl	800619c <vPortEnterCritical>
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c7c:	b25b      	sxtb	r3, r3
 8003c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c82:	d103      	bne.n	8003c8c <xQueueReceive+0x11c>
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c98:	d103      	bne.n	8003ca2 <xQueueReceive+0x132>
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca2:	f002 faa9 	bl	80061f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ca6:	1d3a      	adds	r2, r7, #4
 8003ca8:	f107 0310 	add.w	r3, r7, #16
 8003cac:	4611      	mov	r1, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f001 f9fe 	bl	80050b0 <xTaskCheckForTimeOut>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d123      	bne.n	8003d02 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cbc:	f000 f916 	bl	8003eec <prvIsQueueEmpty>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d017      	beq.n	8003cf6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc8:	3324      	adds	r3, #36	; 0x24
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4611      	mov	r1, r2
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f001 f902 	bl	8004ed8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cd6:	f000 f8b7 	bl	8003e48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cda:	f000 ff3f 	bl	8004b5c <xTaskResumeAll>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d189      	bne.n	8003bf8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	; (8003d24 <xQueueReceive+0x1b4>)
 8003ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	f3bf 8f4f 	dsb	sy
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	e780      	b.n	8003bf8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003cf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cf8:	f000 f8a6 	bl	8003e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cfc:	f000 ff2e 	bl	8004b5c <xTaskResumeAll>
 8003d00:	e77a      	b.n	8003bf8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d04:	f000 f8a0 	bl	8003e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d08:	f000 ff28 	bl	8004b5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0e:	f000 f8ed 	bl	8003eec <prvIsQueueEmpty>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f43f af6f 	beq.w	8003bf8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3730      	adds	r7, #48	; 0x30
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d14d      	bne.n	8003dea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 fafa 	bl	800534c <xTaskPriorityDisinherit>
 8003d58:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	609a      	str	r2, [r3, #8]
 8003d60:	e043      	b.n	8003dea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d119      	bne.n	8003d9c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6858      	ldr	r0, [r3, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	461a      	mov	r2, r3
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	f002 fd26 	bl	80067c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	441a      	add	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d32b      	bcc.n	8003dea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	e026      	b.n	8003dea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68d8      	ldr	r0, [r3, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	461a      	mov	r2, r3
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	f002 fd0c 	bl	80067c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	425b      	negs	r3, r3
 8003db6:	441a      	add	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d207      	bcs.n	8003dd8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd0:	425b      	negs	r3, r3
 8003dd2:	441a      	add	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d105      	bne.n	8003dea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1c5a      	adds	r2, r3, #1
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003df2:	697b      	ldr	r3, [r7, #20]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d018      	beq.n	8003e40 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	441a      	add	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d303      	bcc.n	8003e30 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68d9      	ldr	r1, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6838      	ldr	r0, [r7, #0]
 8003e3c:	f002 fcc2 	bl	80067c4 <memcpy>
	}
}
 8003e40:	bf00      	nop
 8003e42:	3708      	adds	r7, #8
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e50:	f002 f9a4 	bl	800619c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e5a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e5c:	e011      	b.n	8003e82 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d012      	beq.n	8003e8c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3324      	adds	r3, #36	; 0x24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 f882 	bl	8004f74 <xTaskRemoveFromEventList>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e76:	f001 f97b 	bl	8005170 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	dce9      	bgt.n	8003e5e <prvUnlockQueue+0x16>
 8003e8a:	e000      	b.n	8003e8e <prvUnlockQueue+0x46>
					break;
 8003e8c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	22ff      	movs	r2, #255	; 0xff
 8003e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e96:	f002 f9af 	bl	80061f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e9a:	f002 f97f 	bl	800619c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ea4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ea6:	e011      	b.n	8003ecc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d012      	beq.n	8003ed6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	3310      	adds	r3, #16
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f001 f85d 	bl	8004f74 <xTaskRemoveFromEventList>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ec0:	f001 f956 	bl	8005170 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ec4:	7bbb      	ldrb	r3, [r7, #14]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	dce9      	bgt.n	8003ea8 <prvUnlockQueue+0x60>
 8003ed4:	e000      	b.n	8003ed8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ed6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	22ff      	movs	r2, #255	; 0xff
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ee0:	f002 f98a 	bl	80061f8 <vPortExitCritical>
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ef4:	f002 f952 	bl	800619c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e001      	b.n	8003f0a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f0a:	f002 f975 	bl	80061f8 <vPortExitCritical>

	return xReturn;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f20:	f002 f93c 	bl	800619c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d102      	bne.n	8003f36 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	e001      	b.n	8003f3a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f3a:	f002 f95d 	bl	80061f8 <vPortExitCritical>

	return xReturn;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	e014      	b.n	8003f82 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f58:	4a0e      	ldr	r2, [pc, #56]	; (8003f94 <vQueueAddToRegistry+0x4c>)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f64:	490b      	ldr	r1, [pc, #44]	; (8003f94 <vQueueAddToRegistry+0x4c>)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f6e:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <vQueueAddToRegistry+0x4c>)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4413      	add	r3, r2
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f7a:	e005      	b.n	8003f88 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b07      	cmp	r3, #7
 8003f86:	d9e7      	bls.n	8003f58 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f88:	bf00      	nop
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	20012f48 	.word	0x20012f48

08003f98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003fa8:	f002 f8f8 	bl	800619c <vPortEnterCritical>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fb2:	b25b      	sxtb	r3, r3
 8003fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb8:	d103      	bne.n	8003fc2 <vQueueWaitForMessageRestricted+0x2a>
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fc8:	b25b      	sxtb	r3, r3
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fce:	d103      	bne.n	8003fd8 <vQueueWaitForMessageRestricted+0x40>
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fd8:	f002 f90e 	bl	80061f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d106      	bne.n	8003ff2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3324      	adds	r3, #36	; 0x24
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 ff97 	bl	8004f20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ff2:	6978      	ldr	r0, [r7, #20]
 8003ff4:	f7ff ff28 	bl	8003e48 <prvUnlockQueue>
	}
 8003ff8:	bf00      	nop
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08c      	sub	sp, #48	; 0x30
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d10f      	bne.n	8004032 <xStreamBufferGenericCreate+0x32>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8004012:	2301      	movs	r3, #1
 8004014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d819      	bhi.n	8004052 <xStreamBufferGenericCreate+0x52>
 800401e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004022:	f383 8811 	msr	BASEPRI, r3
 8004026:	f3bf 8f6f 	isb	sy
 800402a:	f3bf 8f4f 	dsb	sy
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	e7fe      	b.n	8004030 <xStreamBufferGenericCreate+0x30>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <xStreamBufferGenericCreate+0x52>
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e7fe      	b.n	8004050 <xStreamBufferGenericCreate+0x50>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	429a      	cmp	r2, r3
 8004058:	d909      	bls.n	800406e <xStreamBufferGenericCreate+0x6e>
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	e7fe      	b.n	800406c <xStreamBufferGenericCreate+0x6c>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d101      	bne.n	8004078 <xStreamBufferGenericCreate+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8004074:	2301      	movs	r3, #1
 8004076:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	3301      	adds	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3324      	adds	r3, #36	; 0x24
 8004082:	4618      	mov	r0, r3
 8004084:	f002 f9a4 	bl	80063d0 <pvPortMalloc>
 8004088:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <xStreamBufferGenericCreate+0xa6>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	6a38      	ldr	r0, [r7, #32]
 80040a2:	f000 fb5d 	bl	8004760 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80040a6:	6a3b      	ldr	r3, [r7, #32]
	}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3728      	adds	r7, #40	; 0x28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d109      	bne.n	80040d6 <xStreamBufferSpacesAvailable+0x26>
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	e7fe      	b.n	80040d4 <xStreamBufferSpacesAvailable+0x24>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d304      	bcc.n	8004106 <xStreamBufferSpacesAvailable+0x56>
	{
		xSpace -= pxStreamBuffer->xLength;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8004106:	697b      	ldr	r3, [r7, #20]
}
 8004108:	4618      	mov	r0, r3
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b090      	sub	sp, #64	; 0x40
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <xStreamBufferSend+0x34>
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
 8004146:	e7fe      	b.n	8004146 <xStreamBufferSend+0x32>
	configASSERT( pxStreamBuffer );
 8004148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d109      	bne.n	8004162 <xStreamBufferSend+0x4e>
 800414e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	e7fe      	b.n	8004160 <xStreamBufferSend+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	7f1b      	ldrb	r3, [r3, #28]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d010      	beq.n	8004190 <xStreamBufferSend+0x7c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	3304      	adds	r3, #4
 8004172:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8004174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d809      	bhi.n	8004190 <xStreamBufferSend+0x7c>
 800417c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004180:	f383 8811 	msr	BASEPRI, r3
 8004184:	f3bf 8f6f 	isb	sy
 8004188:	f3bf 8f4f 	dsb	sy
 800418c:	61fb      	str	r3, [r7, #28]
 800418e:	e7fe      	b.n	800418e <xStreamBufferSend+0x7a>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03d      	beq.n	8004212 <xStreamBufferSend+0xfe>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8004196:	f107 0310 	add.w	r3, r7, #16
 800419a:	4618      	mov	r0, r3
 800419c:	f000 ff4c 	bl	8005038 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 80041a0:	f001 fffc 	bl	800619c <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80041a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80041a6:	f7ff ff83 	bl	80040b0 <xStreamBufferSpacesAvailable>
 80041aa:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 80041ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d216      	bcs.n	80041e2 <xStreamBufferSend+0xce>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 80041b4:	2000      	movs	r0, #0
 80041b6:	f001 fb31 	bl	800581c <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80041ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <xStreamBufferSend+0xc2>
 80041c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	61bb      	str	r3, [r7, #24]
 80041d4:	e7fe      	b.n	80041d4 <xStreamBufferSend+0xc0>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 80041d6:	f001 f88b 	bl	80052f0 <xTaskGetCurrentTaskHandle>
 80041da:	4602      	mov	r2, r0
 80041dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041de:	615a      	str	r2, [r3, #20]
 80041e0:	e002      	b.n	80041e8 <xStreamBufferSend+0xd4>
				}
				else
				{
					taskEXIT_CRITICAL();
 80041e2:	f002 f809 	bl	80061f8 <vPortExitCritical>
					break;
 80041e6:	e014      	b.n	8004212 <xStreamBufferSend+0xfe>
				}
			}
			taskEXIT_CRITICAL();
 80041e8:	f002 f806 	bl	80061f8 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	2100      	movs	r1, #0
 80041f2:	2000      	movs	r0, #0
 80041f4:	f001 f92e 	bl	8005454 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	2200      	movs	r2, #0
 80041fc:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80041fe:	463a      	mov	r2, r7
 8004200:	f107 0310 	add.w	r3, r7, #16
 8004204:	4611      	mov	r1, r2
 8004206:	4618      	mov	r0, r3
 8004208:	f000 ff52 	bl	80050b0 <xTaskCheckForTimeOut>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0c6      	beq.n	80041a0 <xStreamBufferSend+0x8c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8004212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <xStreamBufferSend+0x10c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004218:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800421a:	f7ff ff49 	bl	80040b0 <xStreamBufferSpacesAvailable>
 800421e:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8004220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800422c:	f000 f891 	bl	8004352 <prvWriteMessageToBuffer>
 8004230:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	2b00      	cmp	r3, #0
 8004236:	d019      	beq.n	800426c <xStreamBufferSend+0x158>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8004238:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800423a:	f000 fa71 	bl	8004720 <prvBytesInBuffer>
 800423e:	4602      	mov	r2, r0
 8004240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d311      	bcc.n	800426c <xStreamBufferSend+0x158>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8004248:	f000 fc7a 	bl	8004b40 <vTaskSuspendAll>
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <xStreamBufferSend+0x154>
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	6918      	ldr	r0, [r3, #16]
 8004258:	2300      	movs	r3, #0
 800425a:	2200      	movs	r2, #0
 800425c:	2100      	movs	r1, #0
 800425e:	f001 f953 	bl	8005508 <xTaskGenericNotify>
 8004262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004264:	2200      	movs	r2, #0
 8004266:	611a      	str	r2, [r3, #16]
 8004268:	f000 fc78 	bl	8004b5c <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 800426c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800426e:	4618      	mov	r0, r3
 8004270:	3738      	adds	r7, #56	; 0x38
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b090      	sub	sp, #64	; 0x40
 800427a:	af02      	add	r7, sp, #8
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <xStreamBufferSendFromISR+0x30>
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	623b      	str	r3, [r7, #32]
 80042a4:	e7fe      	b.n	80042a4 <xStreamBufferSendFromISR+0x2e>
	configASSERT( pxStreamBuffer );
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d109      	bne.n	80042c0 <xStreamBufferSendFromISR+0x4a>
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	e7fe      	b.n	80042be <xStreamBufferSendFromISR+0x48>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80042c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c2:	7f1b      	ldrb	r3, [r3, #28]
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <xStreamBufferSendFromISR+0x5c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80042cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ce:	3304      	adds	r3, #4
 80042d0:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80042d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d4:	f7ff feec 	bl	80040b0 <xStreamBufferSpacesAvailable>
 80042d8:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80042da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042e6:	f000 f834 	bl	8004352 <prvWriteMessageToBuffer>
 80042ea:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80042ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d02a      	beq.n	8004348 <xStreamBufferSendFromISR+0xd2>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80042f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042f4:	f000 fa14 	bl	8004720 <prvBytesInBuffer>
 80042f8:	4602      	mov	r2, r0
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d322      	bcc.n	8004348 <xStreamBufferSendFromISR+0xd2>
	__asm volatile
 8004302:	f3ef 8211 	mrs	r2, BASEPRI
 8004306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	61ba      	str	r2, [r7, #24]
 8004318:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800431a:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <xStreamBufferSendFromISR+0xc8>
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	6918      	ldr	r0, [r3, #16]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	2200      	movs	r2, #0
 8004332:	2100      	movs	r1, #0
 8004334:	f001 f99a 	bl	800566c <xTaskGenericNotifyFromISR>
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	2200      	movs	r2, #0
 800433c:	611a      	str	r2, [r3, #16]
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f383 8811 	msr	BASEPRI, r3
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800434a:	4618      	mov	r0, r3
 800434c:	3738      	adds	r7, #56	; 0x38
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b086      	sub	sp, #24
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
 800435e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e01d      	b.n	80043a8 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	7f1b      	ldrb	r3, [r3, #28]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d108      	bne.n	800438a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8004378:	2301      	movs	r3, #1
 800437a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	4293      	cmp	r3, r2
 8004382:	bf28      	it	cs
 8004384:	4613      	movcs	r3, r2
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	e00e      	b.n	80043a8 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	429a      	cmp	r2, r3
 8004390:	d308      	bcc.n	80043a4 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8004392:	2301      	movs	r3, #1
 8004394:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004396:	1d3b      	adds	r3, r7, #4
 8004398:	2204      	movs	r2, #4
 800439a:	4619      	mov	r1, r3
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 f8d9 	bl	8004554 <prvWriteBytesToBuffer>
 80043a2:	e001      	b.n	80043a8 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	461a      	mov	r2, r3
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f8cd 	bl	8004554 <prvWriteBytesToBuffer>
 80043ba:	6138      	str	r0, [r7, #16]
 80043bc:	e001      	b.n	80043c2 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80043c2:	693b      	ldr	r3, [r7, #16]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08e      	sub	sp, #56	; 0x38
 80043d0:	af02      	add	r7, sp, #8
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80043de:	2300      	movs	r3, #0
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <xStreamBufferReceive+0x30>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	e7fe      	b.n	80043fa <xStreamBufferReceive+0x2e>
	configASSERT( pxStreamBuffer );
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <xStreamBufferReceive+0x4a>
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	e7fe      	b.n	8004414 <xStreamBufferReceive+0x48>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	7f1b      	ldrb	r3, [r3, #28]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <xStreamBufferReceive+0x5c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004422:	2304      	movs	r3, #4
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
 8004426:	e001      	b.n	800442c <xStreamBufferReceive+0x60>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d033      	beq.n	800449a <xStreamBufferReceive+0xce>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8004432:	f001 feb3 	bl	800619c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004436:	6a38      	ldr	r0, [r7, #32]
 8004438:	f000 f972 	bl	8004720 <prvBytesInBuffer>
 800443c:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800443e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	429a      	cmp	r2, r3
 8004444:	d815      	bhi.n	8004472 <xStreamBufferReceive+0xa6>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8004446:	2000      	movs	r0, #0
 8004448:	f001 f9e8 	bl	800581c <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d009      	beq.n	8004468 <xStreamBufferReceive+0x9c>
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e7fe      	b.n	8004466 <xStreamBufferReceive+0x9a>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8004468:	f000 ff42 	bl	80052f0 <xTaskGetCurrentTaskHandle>
 800446c:	4602      	mov	r2, r0
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004472:	f001 fec1 	bl	80061f8 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	429a      	cmp	r2, r3
 800447c:	d811      	bhi.n	80044a2 <xStreamBufferReceive+0xd6>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2200      	movs	r2, #0
 8004482:	2100      	movs	r1, #0
 8004484:	2000      	movs	r0, #0
 8004486:	f000 ffe5 	bl	8005454 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	2200      	movs	r2, #0
 800448e:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004490:	6a38      	ldr	r0, [r7, #32]
 8004492:	f000 f945 	bl	8004720 <prvBytesInBuffer>
 8004496:	62b8      	str	r0, [r7, #40]	; 0x28
 8004498:	e003      	b.n	80044a2 <xStreamBufferReceive+0xd6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800449a:	6a38      	ldr	r0, [r7, #32]
 800449c:	f000 f940 	bl	8004720 <prvBytesInBuffer>
 80044a0:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80044a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d91d      	bls.n	80044e6 <xStreamBufferReceive+0x11a>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	6a38      	ldr	r0, [r7, #32]
 80044b6:	f000 f81b 	bl	80044f0 <prvReadMessageFromBuffer>
 80044ba:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d011      	beq.n	80044e6 <xStreamBufferReceive+0x11a>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80044c2:	f000 fb3d 	bl	8004b40 <vTaskSuspendAll>
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <xStreamBufferReceive+0x116>
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	6958      	ldr	r0, [r3, #20]
 80044d2:	2300      	movs	r3, #0
 80044d4:	2200      	movs	r2, #0
 80044d6:	2100      	movs	r1, #0
 80044d8:	f001 f816 	bl	8005508 <xTaskGenericNotify>
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2200      	movs	r2, #0
 80044e0:	615a      	str	r2, [r3, #20]
 80044e2:	f000 fb3b 	bl	8004b5c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3730      	adds	r7, #48	; 0x30
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80044fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004500:	2b00      	cmp	r3, #0
 8004502:	d019      	beq.n	8004538 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800450a:	f107 0110 	add.w	r1, r7, #16
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 f88d 	bl	8004632 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8004524:	69fa      	ldr	r2, [r7, #28]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	429a      	cmp	r2, r3
 800452a:	d907      	bls.n	800453c <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e001      	b.n	800453c <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f875 	bl	8004632 <prvReadBytesFromBuffer>
 8004548:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800454a:	697b      	ldr	r3, [r7, #20]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3720      	adds	r7, #32
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08a      	sub	sp, #40	; 0x28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <prvWriteBytesToBuffer+0x26>
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	61fb      	str	r3, [r7, #28]
 8004578:	e7fe      	b.n	8004578 <prvWriteBytesToBuffer+0x24>

	xNextHead = pxStreamBuffer->xHead;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4293      	cmp	r3, r2
 800458c:	bf28      	it	cs
 800458e:	4613      	movcs	r3, r2
 8004590:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8004592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	441a      	add	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	429a      	cmp	r2, r3
 800459e:	d909      	bls.n	80045b4 <prvWriteBytesToBuffer+0x60>
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e7fe      	b.n	80045b2 <prvWriteBytesToBuffer+0x5e>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	699a      	ldr	r2, [r3, #24]
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	4413      	add	r3, r2
 80045bc:	6a3a      	ldr	r2, [r7, #32]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f002 f8ff 	bl	80067c4 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6a3b      	ldr	r3, [r7, #32]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d91b      	bls.n	8004606 <prvWriteBytesToBuffer+0xb2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	1ad2      	subs	r2, r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d909      	bls.n	80045f0 <prvWriteBytesToBuffer+0x9c>
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e7fe      	b.n	80045ee <prvWriteBytesToBuffer+0x9a>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6998      	ldr	r0, [r3, #24]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	18d1      	adds	r1, r2, r3
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	461a      	mov	r2, r3
 8004602:	f002 f8df 	bl	80067c4 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8004606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004614:	429a      	cmp	r2, r3
 8004616:	d304      	bcc.n	8004622 <prvWriteBytesToBuffer+0xce>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004626:	605a      	str	r2, [r3, #4]

	return xCount;
 8004628:	687b      	ldr	r3, [r7, #4]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3728      	adds	r7, #40	; 0x28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b08a      	sub	sp, #40	; 0x28
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	4293      	cmp	r3, r2
 8004646:	bf28      	it	cs
 8004648:	4613      	movcs	r3, r2
 800464a:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d061      	beq.n	8004716 <prvReadBytesFromBuffer+0xe4>
	{
		xNextTail = pxStreamBuffer->xTail;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	689a      	ldr	r2, [r3, #8]
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	6a3a      	ldr	r2, [r7, #32]
 8004662:	4293      	cmp	r3, r2
 8004664:	bf28      	it	cs
 8004666:	4613      	movcs	r3, r2
 8004668:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	429a      	cmp	r2, r3
 8004670:	d909      	bls.n	8004686 <prvReadBytesFromBuffer+0x54>
 8004672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e7fe      	b.n	8004684 <prvReadBytesFromBuffer+0x52>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8004686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	441a      	add	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	429a      	cmp	r2, r3
 8004692:	d909      	bls.n	80046a8 <prvReadBytesFromBuffer+0x76>
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e7fe      	b.n	80046a6 <prvReadBytesFromBuffer+0x74>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	699a      	ldr	r2, [r3, #24]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	4413      	add	r3, r2
 80046b0:	69fa      	ldr	r2, [r7, #28]
 80046b2:	4619      	mov	r1, r3
 80046b4:	68b8      	ldr	r0, [r7, #8]
 80046b6:	f002 f885 	bl	80067c4 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80046ba:	6a3a      	ldr	r2, [r7, #32]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d918      	bls.n	80046f4 <prvReadBytesFromBuffer+0xc2>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80046c2:	6a3a      	ldr	r2, [r7, #32]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d909      	bls.n	80046de <prvReadBytesFromBuffer+0xac>
 80046ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	e7fe      	b.n	80046dc <prvReadBytesFromBuffer+0xaa>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	18d0      	adds	r0, r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6999      	ldr	r1, [r3, #24]
 80046e8:	6a3a      	ldr	r2, [r7, #32]
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	f002 f868 	bl	80067c4 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80046f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	4413      	add	r3, r2
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004702:	429a      	cmp	r2, r3
 8004704:	d304      	bcc.n	8004710 <prvReadBytesFromBuffer+0xde>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004714:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8004716:	6a3b      	ldr	r3, [r7, #32]
}
 8004718:	4618      	mov	r0, r3
 800471a:	3728      	adds	r7, #40	; 0x28
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	4413      	add	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	429a      	cmp	r2, r3
 8004746:	d304      	bcc.n	8004752 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8004752:	68fb      	ldr	r3, [r7, #12]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800476e:	2355      	movs	r3, #85	; 0x55
 8004770:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6979      	ldr	r1, [r7, #20]
 8004776:	68b8      	ldr	r0, [r7, #8]
 8004778:	f002 f82f 	bl	80067da <memset>
 800477c:	4602      	mov	r2, r0
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <prvInitialiseNewStreamBuffer+0x38>
 8004784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	e7fe      	b.n	8004796 <prvInitialiseNewStreamBuffer+0x36>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8004798:	2224      	movs	r2, #36	; 0x24
 800479a:	2100      	movs	r1, #0
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f002 f81c 	bl	80067da <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80047ba:	771a      	strb	r2, [r3, #28]
}
 80047bc:	bf00      	nop
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	; 0x30
 80047c8:	af04      	add	r7, sp, #16
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047d4:	88fb      	ldrh	r3, [r7, #6]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4618      	mov	r0, r3
 80047da:	f001 fdf9 	bl	80063d0 <pvPortMalloc>
 80047de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00e      	beq.n	8004804 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047e6:	2058      	movs	r0, #88	; 0x58
 80047e8:	f001 fdf2 	bl	80063d0 <pvPortMalloc>
 80047ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
 80047fa:	e005      	b.n	8004808 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047fc:	6978      	ldr	r0, [r7, #20]
 80047fe:	f001 fea9 	bl	8006554 <vPortFree>
 8004802:	e001      	b.n	8004808 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d013      	beq.n	8004836 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800480e:	88fa      	ldrh	r2, [r7, #6]
 8004810:	2300      	movs	r3, #0
 8004812:	9303      	str	r3, [sp, #12]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	9302      	str	r3, [sp, #8]
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	68b9      	ldr	r1, [r7, #8]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f80e 	bl	8004846 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800482a:	69f8      	ldr	r0, [r7, #28]
 800482c:	f000 f89a 	bl	8004964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004830:	2301      	movs	r3, #1
 8004832:	61bb      	str	r3, [r7, #24]
 8004834:	e002      	b.n	800483c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800483a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800483c:	69bb      	ldr	r3, [r7, #24]
	}
 800483e:	4618      	mov	r0, r3
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b088      	sub	sp, #32
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	60b9      	str	r1, [r7, #8]
 8004850:	607a      	str	r2, [r7, #4]
 8004852:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	461a      	mov	r2, r3
 800485e:	21a5      	movs	r1, #165	; 0xa5
 8004860:	f001 ffbb 	bl	80067da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004866:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800486e:	3b01      	subs	r3, #1
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	f023 0307 	bic.w	r3, r3, #7
 800487c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	2b00      	cmp	r3, #0
 8004886:	d009      	beq.n	800489c <prvInitialiseNewTask+0x56>
 8004888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488c:	f383 8811 	msr	BASEPRI, r3
 8004890:	f3bf 8f6f 	isb	sy
 8004894:	f3bf 8f4f 	dsb	sy
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	e7fe      	b.n	800489a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01f      	beq.n	80048e2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	e012      	b.n	80048ce <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4413      	add	r3, r2
 80048ae:	7819      	ldrb	r1, [r3, #0]
 80048b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	4413      	add	r3, r2
 80048b6:	3334      	adds	r3, #52	; 0x34
 80048b8:	460a      	mov	r2, r1
 80048ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d006      	beq.n	80048d6 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	3301      	adds	r3, #1
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	2b09      	cmp	r3, #9
 80048d2:	d9e9      	bls.n	80048a8 <prvInitialiseNewTask+0x62>
 80048d4:	e000      	b.n	80048d8 <prvInitialiseNewTask+0x92>
			{
				break;
 80048d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80048e0:	e003      	b.n	80048ea <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d901      	bls.n	80048f4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048f0:	2304      	movs	r3, #4
 80048f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048fe:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8004900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004902:	2200      	movs	r2, #0
 8004904:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004908:	3304      	adds	r3, #4
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fe48 	bl	80035a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	3318      	adds	r3, #24
 8004914:	4618      	mov	r0, r3
 8004916:	f7fe fe43 	bl	80035a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800491e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004922:	f1c3 0205 	rsb	r2, r3, #5
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800492e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004932:	2200      	movs	r2, #0
 8004934:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	69b8      	ldr	r0, [r7, #24]
 8004944:	f001 fb04 	bl	8005f50 <pxPortInitialiseStack>
 8004948:	4602      	mov	r2, r0
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800494e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800495a:	bf00      	nop
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800496c:	f001 fc16 	bl	800619c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004970:	4b2c      	ldr	r3, [pc, #176]	; (8004a24 <prvAddNewTaskToReadyList+0xc0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	4a2b      	ldr	r2, [pc, #172]	; (8004a24 <prvAddNewTaskToReadyList+0xc0>)
 8004978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800497a:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <prvAddNewTaskToReadyList+0xc4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004982:	4a29      	ldr	r2, [pc, #164]	; (8004a28 <prvAddNewTaskToReadyList+0xc4>)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004988:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <prvAddNewTaskToReadyList+0xc0>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d110      	bne.n	80049b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004990:	f000 fc12 	bl	80051b8 <prvInitialiseTaskLists>
 8004994:	e00d      	b.n	80049b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004996:	4b25      	ldr	r3, [pc, #148]	; (8004a2c <prvAddNewTaskToReadyList+0xc8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800499e:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <prvAddNewTaskToReadyList+0xc4>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d802      	bhi.n	80049b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049ac:	4a1e      	ldr	r2, [pc, #120]	; (8004a28 <prvAddNewTaskToReadyList+0xc4>)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049b2:	4b1f      	ldr	r3, [pc, #124]	; (8004a30 <prvAddNewTaskToReadyList+0xcc>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3301      	adds	r3, #1
 80049b8:	4a1d      	ldr	r2, [pc, #116]	; (8004a30 <prvAddNewTaskToReadyList+0xcc>)
 80049ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049bc:	4b1c      	ldr	r3, [pc, #112]	; (8004a30 <prvAddNewTaskToReadyList+0xcc>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	2201      	movs	r2, #1
 80049ca:	409a      	lsls	r2, r3
 80049cc:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <prvAddNewTaskToReadyList+0xd0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	4a18      	ldr	r2, [pc, #96]	; (8004a34 <prvAddNewTaskToReadyList+0xd0>)
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <prvAddNewTaskToReadyList+0xd4>)
 80049e4:	441a      	add	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3304      	adds	r3, #4
 80049ea:	4619      	mov	r1, r3
 80049ec:	4610      	mov	r0, r2
 80049ee:	f7fe fde4 	bl	80035ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049f2:	f001 fc01 	bl	80061f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049f6:	4b0d      	ldr	r3, [pc, #52]	; (8004a2c <prvAddNewTaskToReadyList+0xc8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00e      	beq.n	8004a1c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049fe:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <prvAddNewTaskToReadyList+0xc4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d207      	bcs.n	8004a1c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <prvAddNewTaskToReadyList+0xd8>)
 8004a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	2000011c 	.word	0x2000011c
 8004a28:	20000044 	.word	0x20000044
 8004a2c:	20000128 	.word	0x20000128
 8004a30:	20000138 	.word	0x20000138
 8004a34:	20000124 	.word	0x20000124
 8004a38:	20000048 	.word	0x20000048
 8004a3c:	e000ed04 	.word	0xe000ed04

08004a40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d016      	beq.n	8004a80 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <vTaskDelay+0x60>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d009      	beq.n	8004a6e <vTaskDelay+0x2e>
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	60bb      	str	r3, [r7, #8]
 8004a6c:	e7fe      	b.n	8004a6c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004a6e:	f000 f867 	bl	8004b40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a72:	2100      	movs	r1, #0
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fef7 	bl	8005868 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a7a:	f000 f86f 	bl	8004b5c <xTaskResumeAll>
 8004a7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d107      	bne.n	8004a96 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004a86:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <vTaskDelay+0x64>)
 8004a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20000144 	.word	0x20000144
 8004aa4:	e000ed04 	.word	0xe000ed04

08004aa8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004aae:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <vTaskStartScheduler+0x80>)
 8004ab0:	9301      	str	r3, [sp, #4]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2282      	movs	r2, #130	; 0x82
 8004aba:	491c      	ldr	r1, [pc, #112]	; (8004b2c <vTaskStartScheduler+0x84>)
 8004abc:	481c      	ldr	r0, [pc, #112]	; (8004b30 <vTaskStartScheduler+0x88>)
 8004abe:	f7ff fe81 	bl	80047c4 <xTaskCreate>
 8004ac2:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d102      	bne.n	8004ad0 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004aca:	f000 ff33 	bl	8005934 <xTimerCreateTimerTask>
 8004ace:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d115      	bne.n	8004b02 <vTaskStartScheduler+0x5a>
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ae8:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <vTaskStartScheduler+0x8c>)
 8004aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004af0:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <vTaskStartScheduler+0x90>)
 8004af2:	2201      	movs	r2, #1
 8004af4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004af6:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <vTaskStartScheduler+0x94>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004afc:	f001 fab0 	bl	8006060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b00:	e00d      	b.n	8004b1e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b08:	d109      	bne.n	8004b1e <vTaskStartScheduler+0x76>
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	607b      	str	r3, [r7, #4]
 8004b1c:	e7fe      	b.n	8004b1c <vTaskStartScheduler+0x74>
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000140 	.word	0x20000140
 8004b2c:	0800683c 	.word	0x0800683c
 8004b30:	08005189 	.word	0x08005189
 8004b34:	2000013c 	.word	0x2000013c
 8004b38:	20000128 	.word	0x20000128
 8004b3c:	20000120 	.word	0x20000120

08004b40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b44:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <vTaskSuspendAll+0x18>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	4a03      	ldr	r2, [pc, #12]	; (8004b58 <vTaskSuspendAll+0x18>)
 8004b4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004b4e:	bf00      	nop
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	20000144 	.word	0x20000144

08004b5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b6a:	4b41      	ldr	r3, [pc, #260]	; (8004c70 <xTaskResumeAll+0x114>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <xTaskResumeAll+0x2a>
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	e7fe      	b.n	8004b84 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b86:	f001 fb09 	bl	800619c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b8a:	4b39      	ldr	r3, [pc, #228]	; (8004c70 <xTaskResumeAll+0x114>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	4a37      	ldr	r2, [pc, #220]	; (8004c70 <xTaskResumeAll+0x114>)
 8004b92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b94:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <xTaskResumeAll+0x114>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d161      	bne.n	8004c60 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b9c:	4b35      	ldr	r3, [pc, #212]	; (8004c74 <xTaskResumeAll+0x118>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d05d      	beq.n	8004c60 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ba4:	e02e      	b.n	8004c04 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba6:	4b34      	ldr	r3, [pc, #208]	; (8004c78 <xTaskResumeAll+0x11c>)
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe fd5e 	bl	8003674 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fe fd59 	bl	8003674 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	409a      	lsls	r2, r3
 8004bca:	4b2c      	ldr	r3, [pc, #176]	; (8004c7c <xTaskResumeAll+0x120>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	4a2a      	ldr	r2, [pc, #168]	; (8004c7c <xTaskResumeAll+0x120>)
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <xTaskResumeAll+0x124>)
 8004be2:	441a      	add	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f7fe fce5 	bl	80035ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bf4:	4b23      	ldr	r3, [pc, #140]	; (8004c84 <xTaskResumeAll+0x128>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d302      	bcc.n	8004c04 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004bfe:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <xTaskResumeAll+0x12c>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c04:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <xTaskResumeAll+0x11c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1cc      	bne.n	8004ba6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c12:	f000 fb4d 	bl	80052b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c16:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <xTaskResumeAll+0x130>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d010      	beq.n	8004c44 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c22:	f000 f847 	bl	8004cb4 <xTaskIncrementTick>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d002      	beq.n	8004c32 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004c2c:	4b16      	ldr	r3, [pc, #88]	; (8004c88 <xTaskResumeAll+0x12c>)
 8004c2e:	2201      	movs	r2, #1
 8004c30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f1      	bne.n	8004c22 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004c3e:	4b13      	ldr	r3, [pc, #76]	; (8004c8c <xTaskResumeAll+0x130>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c44:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <xTaskResumeAll+0x12c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c50:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <xTaskResumeAll+0x134>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c60:	f001 faca 	bl	80061f8 <vPortExitCritical>

	return xAlreadyYielded;
 8004c64:	68bb      	ldr	r3, [r7, #8]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20000144 	.word	0x20000144
 8004c74:	2000011c 	.word	0x2000011c
 8004c78:	200000dc 	.word	0x200000dc
 8004c7c:	20000124 	.word	0x20000124
 8004c80:	20000048 	.word	0x20000048
 8004c84:	20000044 	.word	0x20000044
 8004c88:	20000130 	.word	0x20000130
 8004c8c:	2000012c 	.word	0x2000012c
 8004c90:	e000ed04 	.word	0xe000ed04

08004c94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c9a:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <xTaskGetTickCount+0x1c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ca0:	687b      	ldr	r3, [r7, #4]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000120 	.word	0x20000120

08004cb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cbe:	4b4e      	ldr	r3, [pc, #312]	; (8004df8 <xTaskIncrementTick+0x144>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f040 8087 	bne.w	8004dd6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cc8:	4b4c      	ldr	r3, [pc, #304]	; (8004dfc <xTaskIncrementTick+0x148>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3301      	adds	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cd0:	4a4a      	ldr	r2, [pc, #296]	; (8004dfc <xTaskIncrementTick+0x148>)
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d11f      	bne.n	8004d1c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cdc:	4b48      	ldr	r3, [pc, #288]	; (8004e00 <xTaskIncrementTick+0x14c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <xTaskIncrementTick+0x46>
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	e7fe      	b.n	8004cf8 <xTaskIncrementTick+0x44>
 8004cfa:	4b41      	ldr	r3, [pc, #260]	; (8004e00 <xTaskIncrementTick+0x14c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	4b40      	ldr	r3, [pc, #256]	; (8004e04 <xTaskIncrementTick+0x150>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a3e      	ldr	r2, [pc, #248]	; (8004e00 <xTaskIncrementTick+0x14c>)
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4a3e      	ldr	r2, [pc, #248]	; (8004e04 <xTaskIncrementTick+0x150>)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6013      	str	r3, [r2, #0]
 8004d0e:	4b3e      	ldr	r3, [pc, #248]	; (8004e08 <xTaskIncrementTick+0x154>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	4a3c      	ldr	r2, [pc, #240]	; (8004e08 <xTaskIncrementTick+0x154>)
 8004d16:	6013      	str	r3, [r2, #0]
 8004d18:	f000 faca 	bl	80052b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d1c:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <xTaskIncrementTick+0x158>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d348      	bcc.n	8004db8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <xTaskIncrementTick+0x14c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d104      	bne.n	8004d3a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d30:	4b36      	ldr	r3, [pc, #216]	; (8004e0c <xTaskIncrementTick+0x158>)
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d36:	601a      	str	r2, [r3, #0]
					break;
 8004d38:	e03e      	b.n	8004db8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d3a:	4b31      	ldr	r3, [pc, #196]	; (8004e00 <xTaskIncrementTick+0x14c>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d203      	bcs.n	8004d5a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d52:	4a2e      	ldr	r2, [pc, #184]	; (8004e0c <xTaskIncrementTick+0x158>)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d58:	e02e      	b.n	8004db8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe fc88 	bl	8003674 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	3318      	adds	r3, #24
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fe fc7f 	bl	8003674 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <xTaskIncrementTick+0x15c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	4a22      	ldr	r2, [pc, #136]	; (8004e10 <xTaskIncrementTick+0x15c>)
 8004d86:	6013      	str	r3, [r2, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4a1f      	ldr	r2, [pc, #124]	; (8004e14 <xTaskIncrementTick+0x160>)
 8004d96:	441a      	add	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4610      	mov	r0, r2
 8004da0:	f7fe fc0b 	bl	80035ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da8:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <xTaskIncrementTick+0x164>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d3b9      	bcc.n	8004d26 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004db2:	2301      	movs	r3, #1
 8004db4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004db6:	e7b6      	b.n	8004d26 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004db8:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <xTaskIncrementTick+0x164>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dbe:	4915      	ldr	r1, [pc, #84]	; (8004e14 <xTaskIncrementTick+0x160>)
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d907      	bls.n	8004de0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e004      	b.n	8004de0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004dd6:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <xTaskIncrementTick+0x168>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	4a0f      	ldr	r2, [pc, #60]	; (8004e1c <xTaskIncrementTick+0x168>)
 8004dde:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004de0:	4b0f      	ldr	r3, [pc, #60]	; (8004e20 <xTaskIncrementTick+0x16c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d001      	beq.n	8004dec <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004de8:	2301      	movs	r3, #1
 8004dea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004dec:	697b      	ldr	r3, [r7, #20]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000144 	.word	0x20000144
 8004dfc:	20000120 	.word	0x20000120
 8004e00:	200000d4 	.word	0x200000d4
 8004e04:	200000d8 	.word	0x200000d8
 8004e08:	20000134 	.word	0x20000134
 8004e0c:	2000013c 	.word	0x2000013c
 8004e10:	20000124 	.word	0x20000124
 8004e14:	20000048 	.word	0x20000048
 8004e18:	20000044 	.word	0x20000044
 8004e1c:	2000012c 	.word	0x2000012c
 8004e20:	20000130 	.word	0x20000130

08004e24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e2a:	4b26      	ldr	r3, [pc, #152]	; (8004ec4 <vTaskSwitchContext+0xa0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e32:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <vTaskSwitchContext+0xa4>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e38:	e03e      	b.n	8004eb8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004e3a:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <vTaskSwitchContext+0xa4>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e40:	4b22      	ldr	r3, [pc, #136]	; (8004ecc <vTaskSwitchContext+0xa8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	fab3 f383 	clz	r3, r3
 8004e4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e4e:	7afb      	ldrb	r3, [r7, #11]
 8004e50:	f1c3 031f 	rsb	r3, r3, #31
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	491e      	ldr	r1, [pc, #120]	; (8004ed0 <vTaskSwitchContext+0xac>)
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <vTaskSwitchContext+0x5a>
	__asm volatile
 8004e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	607b      	str	r3, [r7, #4]
 8004e7c:	e7fe      	b.n	8004e7c <vTaskSwitchContext+0x58>
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4a11      	ldr	r2, [pc, #68]	; (8004ed0 <vTaskSwitchContext+0xac>)
 8004e8a:	4413      	add	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d104      	bne.n	8004eae <vTaskSwitchContext+0x8a>
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	4a07      	ldr	r2, [pc, #28]	; (8004ed4 <vTaskSwitchContext+0xb0>)
 8004eb6:	6013      	str	r3, [r2, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	20000144 	.word	0x20000144
 8004ec8:	20000130 	.word	0x20000130
 8004ecc:	20000124 	.word	0x20000124
 8004ed0:	20000048 	.word	0x20000048
 8004ed4:	20000044 	.word	0x20000044

08004ed8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <vTaskPlaceOnEventList+0x24>
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e7fe      	b.n	8004efa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004efc:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <vTaskPlaceOnEventList+0x44>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3318      	adds	r3, #24
 8004f02:	4619      	mov	r1, r3
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fe fb7c 	bl	8003602 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	6838      	ldr	r0, [r7, #0]
 8004f0e:	f000 fcab 	bl	8005868 <prvAddCurrentTaskToDelayedList>
}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000044 	.word	0x20000044

08004f20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d109      	bne.n	8004f46 <vTaskPlaceOnEventListRestricted+0x26>
 8004f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	e7fe      	b.n	8004f44 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f46:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <vTaskPlaceOnEventListRestricted+0x50>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3318      	adds	r3, #24
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7fe fb33 	bl	80035ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	68b8      	ldr	r0, [r7, #8]
 8004f64:	f000 fc80 	bl	8005868 <prvAddCurrentTaskToDelayedList>
	}
 8004f68:	bf00      	nop
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000044 	.word	0x20000044

08004f74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <xTaskRemoveFromEventList+0x2a>
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	60fb      	str	r3, [r7, #12]
 8004f9c:	e7fe      	b.n	8004f9c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	3318      	adds	r3, #24
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fe fb66 	bl	8003674 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	; (8005020 <xTaskRemoveFromEventList+0xac>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d11c      	bne.n	8004fea <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe fb5d 	bl	8003674 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	409a      	lsls	r2, r3
 8004fc2:	4b18      	ldr	r3, [pc, #96]	; (8005024 <xTaskRemoveFromEventList+0xb0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	4a16      	ldr	r2, [pc, #88]	; (8005024 <xTaskRemoveFromEventList+0xb0>)
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4a13      	ldr	r2, [pc, #76]	; (8005028 <xTaskRemoveFromEventList+0xb4>)
 8004fda:	441a      	add	r2, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f7fe fae9 	bl	80035ba <vListInsertEnd>
 8004fe8:	e005      	b.n	8004ff6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3318      	adds	r3, #24
 8004fee:	4619      	mov	r1, r3
 8004ff0:	480e      	ldr	r0, [pc, #56]	; (800502c <xTaskRemoveFromEventList+0xb8>)
 8004ff2:	f7fe fae2 	bl	80035ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffa:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <xTaskRemoveFromEventList+0xbc>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	429a      	cmp	r2, r3
 8005002:	d905      	bls.n	8005010 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005004:	2301      	movs	r3, #1
 8005006:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005008:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <xTaskRemoveFromEventList+0xc0>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e001      	b.n	8005014 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005010:	2300      	movs	r3, #0
 8005012:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005014:	697b      	ldr	r3, [r7, #20]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000144 	.word	0x20000144
 8005024:	20000124 	.word	0x20000124
 8005028:	20000048 	.word	0x20000048
 800502c:	200000dc 	.word	0x200000dc
 8005030:	20000044 	.word	0x20000044
 8005034:	20000130 	.word	0x20000130

08005038 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <vTaskSetTimeOutState+0x22>
 8005046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	e7fe      	b.n	8005058 <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 800505a:	f001 f89f 	bl	800619c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800505e:	4b07      	ldr	r3, [pc, #28]	; (800507c <vTaskSetTimeOutState+0x44>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <vTaskSetTimeOutState+0x48>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800506e:	f001 f8c3 	bl	80061f8 <vPortExitCritical>
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000134 	.word	0x20000134
 8005080:	20000120 	.word	0x20000120

08005084 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <vTaskInternalSetTimeOutState+0x24>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005094:	4b05      	ldr	r3, [pc, #20]	; (80050ac <vTaskInternalSetTimeOutState+0x28>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	605a      	str	r2, [r3, #4]
}
 800509c:	bf00      	nop
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	20000134 	.word	0x20000134
 80050ac:	20000120 	.word	0x20000120

080050b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d109      	bne.n	80050d4 <xTaskCheckForTimeOut+0x24>
 80050c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e7fe      	b.n	80050d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <xTaskCheckForTimeOut+0x3e>
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	e7fe      	b.n	80050ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80050ee:	f001 f855 	bl	800619c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050f2:	4b1d      	ldr	r3, [pc, #116]	; (8005168 <xTaskCheckForTimeOut+0xb8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800510a:	d102      	bne.n	8005112 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	e023      	b.n	800515a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4b15      	ldr	r3, [pc, #84]	; (800516c <xTaskCheckForTimeOut+0xbc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d007      	beq.n	800512e <xTaskCheckForTimeOut+0x7e>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	429a      	cmp	r2, r3
 8005126:	d302      	bcc.n	800512e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005128:	2301      	movs	r3, #1
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e015      	b.n	800515a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	d20b      	bcs.n	8005150 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	1ad2      	subs	r2, r2, r3
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f7ff ff9d 	bl	8005084 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800514a:	2300      	movs	r3, #0
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	e004      	b.n	800515a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005156:	2301      	movs	r3, #1
 8005158:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800515a:	f001 f84d 	bl	80061f8 <vPortExitCritical>

	return xReturn;
 800515e:	69fb      	ldr	r3, [r7, #28]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3720      	adds	r7, #32
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000120 	.word	0x20000120
 800516c:	20000134 	.word	0x20000134

08005170 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005174:	4b03      	ldr	r3, [pc, #12]	; (8005184 <vTaskMissedYield+0x14>)
 8005176:	2201      	movs	r2, #1
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	20000130 	.word	0x20000130

08005188 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005190:	f000 f852 	bl	8005238 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <prvIdleTask+0x28>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d9f9      	bls.n	8005190 <prvIdleTask+0x8>
			{
				taskYIELD();
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <prvIdleTask+0x2c>)
 800519e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051ac:	e7f0      	b.n	8005190 <prvIdleTask+0x8>
 80051ae:	bf00      	nop
 80051b0:	20000048 	.word	0x20000048
 80051b4:	e000ed04 	.word	0xe000ed04

080051b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051be:	2300      	movs	r3, #0
 80051c0:	607b      	str	r3, [r7, #4]
 80051c2:	e00c      	b.n	80051de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4a12      	ldr	r2, [pc, #72]	; (8005218 <prvInitialiseTaskLists+0x60>)
 80051d0:	4413      	add	r3, r2
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe f9c4 	bl	8003560 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3301      	adds	r3, #1
 80051dc:	607b      	str	r3, [r7, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d9ef      	bls.n	80051c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051e4:	480d      	ldr	r0, [pc, #52]	; (800521c <prvInitialiseTaskLists+0x64>)
 80051e6:	f7fe f9bb 	bl	8003560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051ea:	480d      	ldr	r0, [pc, #52]	; (8005220 <prvInitialiseTaskLists+0x68>)
 80051ec:	f7fe f9b8 	bl	8003560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051f0:	480c      	ldr	r0, [pc, #48]	; (8005224 <prvInitialiseTaskLists+0x6c>)
 80051f2:	f7fe f9b5 	bl	8003560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051f6:	480c      	ldr	r0, [pc, #48]	; (8005228 <prvInitialiseTaskLists+0x70>)
 80051f8:	f7fe f9b2 	bl	8003560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051fc:	480b      	ldr	r0, [pc, #44]	; (800522c <prvInitialiseTaskLists+0x74>)
 80051fe:	f7fe f9af 	bl	8003560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005202:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <prvInitialiseTaskLists+0x78>)
 8005204:	4a05      	ldr	r2, [pc, #20]	; (800521c <prvInitialiseTaskLists+0x64>)
 8005206:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005208:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <prvInitialiseTaskLists+0x7c>)
 800520a:	4a05      	ldr	r2, [pc, #20]	; (8005220 <prvInitialiseTaskLists+0x68>)
 800520c:	601a      	str	r2, [r3, #0]
}
 800520e:	bf00      	nop
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000048 	.word	0x20000048
 800521c:	200000ac 	.word	0x200000ac
 8005220:	200000c0 	.word	0x200000c0
 8005224:	200000dc 	.word	0x200000dc
 8005228:	200000f0 	.word	0x200000f0
 800522c:	20000108 	.word	0x20000108
 8005230:	200000d4 	.word	0x200000d4
 8005234:	200000d8 	.word	0x200000d8

08005238 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800523e:	e019      	b.n	8005274 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005240:	f000 ffac 	bl	800619c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <prvCheckTasksWaitingTermination+0x4c>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3304      	adds	r3, #4
 8005250:	4618      	mov	r0, r3
 8005252:	f7fe fa0f 	bl	8003674 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005256:	4b0c      	ldr	r3, [pc, #48]	; (8005288 <prvCheckTasksWaitingTermination+0x50>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3b01      	subs	r3, #1
 800525c:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <prvCheckTasksWaitingTermination+0x50>)
 800525e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005260:	4b0a      	ldr	r3, [pc, #40]	; (800528c <prvCheckTasksWaitingTermination+0x54>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	3b01      	subs	r3, #1
 8005266:	4a09      	ldr	r2, [pc, #36]	; (800528c <prvCheckTasksWaitingTermination+0x54>)
 8005268:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800526a:	f000 ffc5 	bl	80061f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f80e 	bl	8005290 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <prvCheckTasksWaitingTermination+0x54>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1e1      	bne.n	8005240 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	200000f0 	.word	0x200000f0
 8005288:	2000011c 	.word	0x2000011c
 800528c:	20000104 	.word	0x20000104

08005290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529c:	4618      	mov	r0, r3
 800529e:	f001 f959 	bl	8006554 <vPortFree>
			vPortFree( pxTCB );
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f001 f956 	bl	8006554 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052a8:	bf00      	nop
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052b6:	4b0c      	ldr	r3, [pc, #48]	; (80052e8 <prvResetNextTaskUnblockTime+0x38>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052c0:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <prvResetNextTaskUnblockTime+0x3c>)
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052c8:	e008      	b.n	80052dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ca:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <prvResetNextTaskUnblockTime+0x38>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	4a04      	ldr	r2, [pc, #16]	; (80052ec <prvResetNextTaskUnblockTime+0x3c>)
 80052da:	6013      	str	r3, [r2, #0]
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	200000d4 	.word	0x200000d4
 80052ec:	2000013c 	.word	0x2000013c

080052f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <xTaskGetCurrentTaskHandle+0x1c>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80052fc:	687b      	ldr	r3, [r7, #4]
	}
 80052fe:	4618      	mov	r0, r3
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000044 	.word	0x20000044

08005310 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <xTaskGetSchedulerState+0x34>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d102      	bne.n	8005324 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800531e:	2301      	movs	r3, #1
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	e008      	b.n	8005336 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005324:	4b08      	ldr	r3, [pc, #32]	; (8005348 <xTaskGetSchedulerState+0x38>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d102      	bne.n	8005332 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800532c:	2302      	movs	r3, #2
 800532e:	607b      	str	r3, [r7, #4]
 8005330:	e001      	b.n	8005336 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005332:	2300      	movs	r3, #0
 8005334:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005336:	687b      	ldr	r3, [r7, #4]
	}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	20000128 	.word	0x20000128
 8005348:	20000144 	.word	0x20000144

0800534c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d06c      	beq.n	800543c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005362:	4b39      	ldr	r3, [pc, #228]	; (8005448 <xTaskPriorityDisinherit+0xfc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	429a      	cmp	r2, r3
 800536a:	d009      	beq.n	8005380 <xTaskPriorityDisinherit+0x34>
 800536c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005370:	f383 8811 	msr	BASEPRI, r3
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	f3bf 8f4f 	dsb	sy
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e7fe      	b.n	800537e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <xTaskPriorityDisinherit+0x50>
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	e7fe      	b.n	800539a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a0:	1e5a      	subs	r2, r3, #1
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d044      	beq.n	800543c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d140      	bne.n	800543c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	3304      	adds	r3, #4
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe f958 	bl	8003674 <uxListRemove>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d115      	bne.n	80053f6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ce:	491f      	ldr	r1, [pc, #124]	; (800544c <xTaskPriorityDisinherit+0x100>)
 80053d0:	4613      	mov	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xTaskPriorityDisinherit+0xaa>
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	2201      	movs	r2, #1
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43da      	mvns	r2, r3
 80053ec:	4b18      	ldr	r3, [pc, #96]	; (8005450 <xTaskPriorityDisinherit+0x104>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4013      	ands	r3, r2
 80053f2:	4a17      	ldr	r2, [pc, #92]	; (8005450 <xTaskPriorityDisinherit+0x104>)
 80053f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	f1c3 0205 	rsb	r2, r3, #5
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800540e:	2201      	movs	r2, #1
 8005410:	409a      	lsls	r2, r3
 8005412:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <xTaskPriorityDisinherit+0x104>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4313      	orrs	r3, r2
 8005418:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <xTaskPriorityDisinherit+0x104>)
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	4a08      	ldr	r2, [pc, #32]	; (800544c <xTaskPriorityDisinherit+0x100>)
 800542a:	441a      	add	r2, r3
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	4610      	mov	r0, r2
 8005434:	f7fe f8c1 	bl	80035ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800543c:	697b      	ldr	r3, [r7, #20]
	}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000044 	.word	0x20000044
 800544c:	20000048 	.word	0x20000048
 8005450:	20000124 	.word	0x20000124

08005454 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005462:	f000 fe9b 	bl	800619c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005466:	4b26      	ldr	r3, [pc, #152]	; (8005500 <xTaskNotifyWait+0xac>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b02      	cmp	r3, #2
 8005472:	d01a      	beq.n	80054aa <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005474:	4b22      	ldr	r3, [pc, #136]	; (8005500 <xTaskNotifyWait+0xac>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	43d2      	mvns	r2, r2
 800547e:	400a      	ands	r2, r1
 8005480:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005482:	4b1f      	ldr	r3, [pc, #124]	; (8005500 <xTaskNotifyWait+0xac>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005492:	2101      	movs	r1, #1
 8005494:	6838      	ldr	r0, [r7, #0]
 8005496:	f000 f9e7 	bl	8005868 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800549a:	4b1a      	ldr	r3, [pc, #104]	; (8005504 <xTaskNotifyWait+0xb0>)
 800549c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80054aa:	f000 fea5 	bl	80061f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 80054ae:	f000 fe75 	bl	800619c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d004      	beq.n	80054c2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80054b8:	4b11      	ldr	r3, [pc, #68]	; (8005500 <xTaskNotifyWait+0xac>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80054c2:	4b0f      	ldr	r3, [pc, #60]	; (8005500 <xTaskNotifyWait+0xac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d002      	beq.n	80054d6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80054d0:	2300      	movs	r3, #0
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	e008      	b.n	80054e8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80054d6:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <xTaskNotifyWait+0xac>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	43d2      	mvns	r2, r2
 80054e0:	400a      	ands	r2, r1
 80054e2:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 80054e4:	2301      	movs	r3, #1
 80054e6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80054e8:	4b05      	ldr	r3, [pc, #20]	; (8005500 <xTaskNotifyWait+0xac>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 80054f2:	f000 fe81 	bl	80061f8 <vPortExitCritical>

		return xReturn;
 80054f6:	697b      	ldr	r3, [r7, #20]
	}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3718      	adds	r7, #24
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000044 	.word	0x20000044
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005508:	b580      	push	{r7, lr}
 800550a:	b08a      	sub	sp, #40	; 0x28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4613      	mov	r3, r2
 8005516:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005518:	2301      	movs	r3, #1
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <xTaskGenericNotify+0x2e>
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	e7fe      	b.n	8005534 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800553a:	f000 fe2f 	bl	800619c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005552:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	2b04      	cmp	r3, #4
 8005560:	d827      	bhi.n	80055b2 <xTaskGenericNotify+0xaa>
 8005562:	a201      	add	r2, pc, #4	; (adr r2, 8005568 <xTaskGenericNotify+0x60>)
 8005564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005568:	080055d1 	.word	0x080055d1
 800556c:	0800557d 	.word	0x0800557d
 8005570:	0800558b 	.word	0x0800558b
 8005574:	08005597 	.word	0x08005597
 8005578:	0800559f 	.word	0x0800559f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	431a      	orrs	r2, r3
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005588:	e025      	b.n	80055d6 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558e:	1c5a      	adds	r2, r3, #1
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005594:	e01f      	b.n	80055d6 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800559c:	e01b      	b.n	80055d6 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800559e:	7ffb      	ldrb	r3, [r7, #31]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d003      	beq.n	80055ac <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80055aa:	e014      	b.n	80055d6 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80055b0:	e011      	b.n	80055d6 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ba:	d00b      	beq.n	80055d4 <xTaskGenericNotify+0xcc>
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e7fe      	b.n	80055ce <xTaskGenericNotify+0xc6>
					break;
 80055d0:	bf00      	nop
 80055d2:	e000      	b.n	80055d6 <xTaskGenericNotify+0xce>

					break;
 80055d4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80055d6:	7ffb      	ldrb	r3, [r7, #31]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d138      	bne.n	800564e <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	3304      	adds	r3, #4
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fe f847 	bl	8003674 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ea:	2201      	movs	r2, #1
 80055ec:	409a      	lsls	r2, r3
 80055ee:	4b1b      	ldr	r3, [pc, #108]	; (800565c <xTaskGenericNotify+0x154>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	4a19      	ldr	r2, [pc, #100]	; (800565c <xTaskGenericNotify+0x154>)
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4a16      	ldr	r2, [pc, #88]	; (8005660 <xTaskGenericNotify+0x158>)
 8005606:	441a      	add	r2, r3
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	3304      	adds	r3, #4
 800560c:	4619      	mov	r1, r3
 800560e:	4610      	mov	r0, r2
 8005610:	f7fd ffd3 	bl	80035ba <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <xTaskGenericNotify+0x128>
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	e7fe      	b.n	800562e <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <xTaskGenericNotify+0x15c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563a:	429a      	cmp	r2, r3
 800563c:	d907      	bls.n	800564e <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800563e:	4b0a      	ldr	r3, [pc, #40]	; (8005668 <xTaskGenericNotify+0x160>)
 8005640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800564e:	f000 fdd3 	bl	80061f8 <vPortExitCritical>

		return xReturn;
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005654:	4618      	mov	r0, r3
 8005656:	3728      	adds	r7, #40	; 0x28
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000124 	.word	0x20000124
 8005660:	20000048 	.word	0x20000048
 8005664:	20000044 	.word	0x20000044
 8005668:	e000ed04 	.word	0xe000ed04

0800566c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08e      	sub	sp, #56	; 0x38
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800567c:	2301      	movs	r3, #1
 800567e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d109      	bne.n	800569a <xTaskGenericNotifyFromISR+0x2e>
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
 8005698:	e7fe      	b.n	8005698 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800569a:	f000 fe5b 	bl	8006354 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80056a2:	f3ef 8211 	mrs	r2, BASEPRI
 80056a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	623a      	str	r2, [r7, #32]
 80056b8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80056ba:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d003      	beq.n	80056cc <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	2202      	movs	r2, #2
 80056da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d829      	bhi.n	8005738 <xTaskGenericNotifyFromISR+0xcc>
 80056e4:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <xTaskGenericNotifyFromISR+0x80>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	08005757 	.word	0x08005757
 80056f0:	08005701 	.word	0x08005701
 80056f4:	0800570f 	.word	0x0800570f
 80056f8:	0800571b 	.word	0x0800571b
 80056fc:	08005723 	.word	0x08005723
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	431a      	orrs	r2, r3
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800570c:	e026      	b.n	800575c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005718:	e020      	b.n	800575c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005720:	e01c      	b.n	800575c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005722:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005726:	2b02      	cmp	r3, #2
 8005728:	d003      	beq.n	8005732 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005730:	e014      	b.n	800575c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8005732:	2300      	movs	r3, #0
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005736:	e011      	b.n	800575c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005740:	d00b      	beq.n	800575a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	61bb      	str	r3, [r7, #24]
 8005754:	e7fe      	b.n	8005754 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8005756:	bf00      	nop
 8005758:	e000      	b.n	800575c <xTaskGenericNotifyFromISR+0xf0>
					break;
 800575a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800575c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005760:	2b01      	cmp	r3, #1
 8005762:	d144      	bne.n	80057ee <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <xTaskGenericNotifyFromISR+0x114>
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e7fe      	b.n	800577e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005780:	4b20      	ldr	r3, [pc, #128]	; (8005804 <xTaskGenericNotifyFromISR+0x198>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d11c      	bne.n	80057c2 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	3304      	adds	r3, #4
 800578c:	4618      	mov	r0, r3
 800578e:	f7fd ff71 	bl	8003674 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	2201      	movs	r2, #1
 8005798:	409a      	lsls	r2, r3
 800579a:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <xTaskGenericNotifyFromISR+0x19c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4313      	orrs	r3, r2
 80057a0:	4a19      	ldr	r2, [pc, #100]	; (8005808 <xTaskGenericNotifyFromISR+0x19c>)
 80057a2:	6013      	str	r3, [r2, #0]
 80057a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	4a16      	ldr	r2, [pc, #88]	; (800580c <xTaskGenericNotifyFromISR+0x1a0>)
 80057b2:	441a      	add	r2, r3
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7fd fefd 	bl	80035ba <vListInsertEnd>
 80057c0:	e005      	b.n	80057ce <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	3318      	adds	r3, #24
 80057c6:	4619      	mov	r1, r3
 80057c8:	4811      	ldr	r0, [pc, #68]	; (8005810 <xTaskGenericNotifyFromISR+0x1a4>)
 80057ca:	f7fd fef6 	bl	80035ba <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d2:	4b10      	ldr	r3, [pc, #64]	; (8005814 <xTaskGenericNotifyFromISR+0x1a8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	429a      	cmp	r2, r3
 80057da:	d908      	bls.n	80057ee <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80057dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80057e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80057e8:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <xTaskGenericNotifyFromISR+0x1ac>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80057f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3738      	adds	r7, #56	; 0x38
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000144 	.word	0x20000144
 8005808:	20000124 	.word	0x20000124
 800580c:	20000048 	.word	0x20000048
 8005810:	200000dc 	.word	0x200000dc
 8005814:	20000044 	.word	0x20000044
 8005818:	20000130 	.word	0x20000130

0800581c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d102      	bne.n	8005830 <xTaskNotifyStateClear+0x14>
 800582a:	4b0e      	ldr	r3, [pc, #56]	; (8005864 <xTaskNotifyStateClear+0x48>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	e000      	b.n	8005832 <xTaskNotifyStateClear+0x16>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8005834:	f000 fcb2 	bl	800619c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b02      	cmp	r3, #2
 8005842:	d106      	bne.n	8005852 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				xReturn = pdPASS;
 800584c:	2301      	movs	r3, #1
 800584e:	60fb      	str	r3, [r7, #12]
 8005850:	e001      	b.n	8005856 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8005856:	f000 fccf 	bl	80061f8 <vPortExitCritical>

		return xReturn;
 800585a:	68fb      	ldr	r3, [r7, #12]
	}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000044 	.word	0x20000044

08005868 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005872:	4b29      	ldr	r3, [pc, #164]	; (8005918 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005878:	4b28      	ldr	r3, [pc, #160]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3304      	adds	r3, #4
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd fef8 	bl	8003674 <uxListRemove>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800588a:	4b24      	ldr	r3, [pc, #144]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	2201      	movs	r2, #1
 8005892:	fa02 f303 	lsl.w	r3, r2, r3
 8005896:	43da      	mvns	r2, r3
 8005898:	4b21      	ldr	r3, [pc, #132]	; (8005920 <prvAddCurrentTaskToDelayedList+0xb8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4013      	ands	r3, r2
 800589e:	4a20      	ldr	r2, [pc, #128]	; (8005920 <prvAddCurrentTaskToDelayedList+0xb8>)
 80058a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a8:	d10a      	bne.n	80058c0 <prvAddCurrentTaskToDelayedList+0x58>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d007      	beq.n	80058c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058b0:	4b1a      	ldr	r3, [pc, #104]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3304      	adds	r3, #4
 80058b6:	4619      	mov	r1, r3
 80058b8:	481a      	ldr	r0, [pc, #104]	; (8005924 <prvAddCurrentTaskToDelayedList+0xbc>)
 80058ba:	f7fd fe7e 	bl	80035ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058be:	e026      	b.n	800590e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4413      	add	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058c8:	4b14      	ldr	r3, [pc, #80]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d209      	bcs.n	80058ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d8:	4b13      	ldr	r3, [pc, #76]	; (8005928 <prvAddCurrentTaskToDelayedList+0xc0>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b0f      	ldr	r3, [pc, #60]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7fd fe8c 	bl	8003602 <vListInsert>
}
 80058ea:	e010      	b.n	800590e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ec:	4b0f      	ldr	r3, [pc, #60]	; (800592c <prvAddCurrentTaskToDelayedList+0xc4>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	4b0a      	ldr	r3, [pc, #40]	; (800591c <prvAddCurrentTaskToDelayedList+0xb4>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3304      	adds	r3, #4
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7fd fe82 	bl	8003602 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	429a      	cmp	r2, r3
 8005906:	d202      	bcs.n	800590e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005908:	4a09      	ldr	r2, [pc, #36]	; (8005930 <prvAddCurrentTaskToDelayedList+0xc8>)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6013      	str	r3, [r2, #0]
}
 800590e:	bf00      	nop
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000120 	.word	0x20000120
 800591c:	20000044 	.word	0x20000044
 8005920:	20000124 	.word	0x20000124
 8005924:	20000108 	.word	0x20000108
 8005928:	200000d8 	.word	0x200000d8
 800592c:	200000d4 	.word	0x200000d4
 8005930:	2000013c 	.word	0x2000013c

08005934 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800593a:	2300      	movs	r3, #0
 800593c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800593e:	f000 fad1 	bl	8005ee4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005942:	4b11      	ldr	r3, [pc, #68]	; (8005988 <xTimerCreateTimerTask+0x54>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800594a:	4b10      	ldr	r3, [pc, #64]	; (800598c <xTimerCreateTimerTask+0x58>)
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	2302      	movs	r3, #2
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	2300      	movs	r3, #0
 8005954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005958:	490d      	ldr	r1, [pc, #52]	; (8005990 <xTimerCreateTimerTask+0x5c>)
 800595a:	480e      	ldr	r0, [pc, #56]	; (8005994 <xTimerCreateTimerTask+0x60>)
 800595c:	f7fe ff32 	bl	80047c4 <xTaskCreate>
 8005960:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d109      	bne.n	800597c <xTimerCreateTimerTask+0x48>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	603b      	str	r3, [r7, #0]
 800597a:	e7fe      	b.n	800597a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800597c:	687b      	ldr	r3, [r7, #4]
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20000178 	.word	0x20000178
 800598c:	2000017c 	.word	0x2000017c
 8005990:	08006844 	.word	0x08006844
 8005994:	08005ac9 	.word	0x08005ac9

08005998 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b08a      	sub	sp, #40	; 0x28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <xTimerGenericCommand+0x2c>
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	e7fe      	b.n	80059c2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059c4:	4b19      	ldr	r3, [pc, #100]	; (8005a2c <xTimerGenericCommand+0x94>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d02a      	beq.n	8005a22 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b05      	cmp	r3, #5
 80059dc:	dc18      	bgt.n	8005a10 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059de:	f7ff fc97 	bl	8005310 <xTaskGetSchedulerState>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d109      	bne.n	80059fc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059e8:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <xTimerGenericCommand+0x94>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	f107 0114 	add.w	r1, r7, #20
 80059f0:	2300      	movs	r3, #0
 80059f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f4:	f7fd ff2e 	bl	8003854 <xQueueGenericSend>
 80059f8:	6278      	str	r0, [r7, #36]	; 0x24
 80059fa:	e012      	b.n	8005a22 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <xTimerGenericCommand+0x94>)
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	f107 0114 	add.w	r1, r7, #20
 8005a04:	2300      	movs	r3, #0
 8005a06:	2200      	movs	r2, #0
 8005a08:	f7fd ff24 	bl	8003854 <xQueueGenericSend>
 8005a0c:	6278      	str	r0, [r7, #36]	; 0x24
 8005a0e:	e008      	b.n	8005a22 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a10:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <xTimerGenericCommand+0x94>)
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	f107 0114 	add.w	r1, r7, #20
 8005a18:	2300      	movs	r3, #0
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	f7fe f814 	bl	8003a48 <xQueueGenericSendFromISR>
 8005a20:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3728      	adds	r7, #40	; 0x28
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000178 	.word	0x20000178

08005a30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a3a:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <prvProcessExpiredTimer+0x94>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	3304      	adds	r3, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fd fe13 	bl	8003674 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a54:	f003 0304 	and.w	r3, r3, #4
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d021      	beq.n	8005aa0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	699a      	ldr	r2, [r3, #24]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	18d1      	adds	r1, r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	6978      	ldr	r0, [r7, #20]
 8005a6a:	f000 f8d1 	bl	8005c10 <prvInsertTimerInActiveList>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01e      	beq.n	8005ab2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a74:	2300      	movs	r3, #0
 8005a76:	9300      	str	r3, [sp, #0]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	2100      	movs	r1, #0
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f7ff ff8a 	bl	8005998 <xTimerGenericCommand>
 8005a84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d112      	bne.n	8005ab2 <prvProcessExpiredTimer+0x82>
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e7fe      	b.n	8005a9e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aa6:	f023 0301 	bic.w	r3, r3, #1
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	6978      	ldr	r0, [r7, #20]
 8005ab8:	4798      	blx	r3
}
 8005aba:	bf00      	nop
 8005abc:	3718      	adds	r7, #24
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000170 	.word	0x20000170

08005ac8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ad0:	f107 0308 	add.w	r3, r7, #8
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f857 	bl	8005b88 <prvGetNextExpireTime>
 8005ada:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 f803 	bl	8005aec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ae6:	f000 f8d5 	bl	8005c94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005aea:	e7f1      	b.n	8005ad0 <prvTimerTask+0x8>

08005aec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005af6:	f7ff f823 	bl	8004b40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005afa:	f107 0308 	add.w	r3, r7, #8
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f866 	bl	8005bd0 <prvSampleTimeNow>
 8005b04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d130      	bne.n	8005b6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <prvProcessTimerOrBlockTask+0x3c>
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d806      	bhi.n	8005b28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b1a:	f7ff f81f 	bl	8004b5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff ff85 	bl	8005a30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b26:	e024      	b.n	8005b72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d008      	beq.n	8005b40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b2e:	4b13      	ldr	r3, [pc, #76]	; (8005b7c <prvProcessTimerOrBlockTask+0x90>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <prvProcessTimerOrBlockTask+0x50>
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e000      	b.n	8005b3e <prvProcessTimerOrBlockTask+0x52>
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b40:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <prvProcessTimerOrBlockTask+0x94>)
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	f7fe fa23 	bl	8003f98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b52:	f7ff f803 	bl	8004b5c <xTaskResumeAll>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <prvProcessTimerOrBlockTask+0x98>)
 8005b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	f3bf 8f6f 	isb	sy
}
 8005b6c:	e001      	b.n	8005b72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b6e:	f7fe fff5 	bl	8004b5c <xTaskResumeAll>
}
 8005b72:	bf00      	nop
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000174 	.word	0x20000174
 8005b80:	20000178 	.word	0x20000178
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b90:	4b0e      	ldr	r3, [pc, #56]	; (8005bcc <prvGetNextExpireTime+0x44>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <prvGetNextExpireTime+0x16>
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	e000      	b.n	8005ba0 <prvGetNextExpireTime+0x18>
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d105      	bne.n	8005bb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bac:	4b07      	ldr	r3, [pc, #28]	; (8005bcc <prvGetNextExpireTime+0x44>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	e001      	b.n	8005bbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20000170 	.word	0x20000170

08005bd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bd8:	f7ff f85c 	bl	8004c94 <xTaskGetTickCount>
 8005bdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bde:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <prvSampleTimeNow+0x3c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d205      	bcs.n	8005bf4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005be8:	f000 f918 	bl	8005e1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	e002      	b.n	8005bfa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bfa:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <prvSampleTimeNow+0x3c>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c00:	68fb      	ldr	r3, [r7, #12]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000180 	.word	0x20000180

08005c10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d812      	bhi.n	8005c5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	1ad2      	subs	r2, r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d302      	bcc.n	8005c4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c44:	2301      	movs	r3, #1
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	e01b      	b.n	8005c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c4a:	4b10      	ldr	r3, [pc, #64]	; (8005c8c <prvInsertTimerInActiveList+0x7c>)
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3304      	adds	r3, #4
 8005c52:	4619      	mov	r1, r3
 8005c54:	4610      	mov	r0, r2
 8005c56:	f7fd fcd4 	bl	8003602 <vListInsert>
 8005c5a:	e012      	b.n	8005c82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d206      	bcs.n	8005c72 <prvInsertTimerInActiveList+0x62>
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d302      	bcc.n	8005c72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	e007      	b.n	8005c82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c72:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <prvInsertTimerInActiveList+0x80>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	f7fd fcc0 	bl	8003602 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c82:	697b      	ldr	r3, [r7, #20]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20000174 	.word	0x20000174
 8005c90:	20000170 	.word	0x20000170

08005c94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08c      	sub	sp, #48	; 0x30
 8005c98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c9a:	e0ac      	b.n	8005df6 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f2c0 80a8 	blt.w	8005df4 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d004      	beq.n	8005cba <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fd fcdd 	bl	8003674 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cba:	1d3b      	adds	r3, r7, #4
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff ff87 	bl	8005bd0 <prvSampleTimeNow>
 8005cc2:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	2b09      	cmp	r3, #9
 8005cc8:	f200 8095 	bhi.w	8005df6 <prvProcessReceivedCommands+0x162>
 8005ccc:	a201      	add	r2, pc, #4	; (adr r2, 8005cd4 <prvProcessReceivedCommands+0x40>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005cfd 	.word	0x08005cfd
 8005ce0:	08005d6f 	.word	0x08005d6f
 8005ce4:	08005d83 	.word	0x08005d83
 8005ce8:	08005dcb 	.word	0x08005dcb
 8005cec:	08005cfd 	.word	0x08005cfd
 8005cf0:	08005cfd 	.word	0x08005cfd
 8005cf4:	08005d6f 	.word	0x08005d6f
 8005cf8:	08005d83 	.word	0x08005d83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	18d1      	adds	r1, r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6a3a      	ldr	r2, [r7, #32]
 8005d1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d1c:	f7ff ff78 	bl	8005c10 <prvInsertTimerInActiveList>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d067      	beq.n	8005df6 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d05c      	beq.n	8005df6 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	441a      	add	r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d4e:	f7ff fe23 	bl	8005998 <xTimerGenericCommand>
 8005d52:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d14d      	bne.n	8005df6 <prvProcessReceivedCommands+0x162>
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	61bb      	str	r3, [r7, #24]
 8005d6c:	e7fe      	b.n	8005d6c <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005d80:	e039      	b.n	8005df6 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d88:	f043 0301 	orr.w	r3, r3, #1
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <prvProcessReceivedCommands+0x122>
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	617b      	str	r3, [r7, #20]
 8005db4:	e7fe      	b.n	8005db4 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	699a      	ldr	r2, [r3, #24]
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	18d1      	adds	r1, r2, r3
 8005dbe:	6a3b      	ldr	r3, [r7, #32]
 8005dc0:	6a3a      	ldr	r2, [r7, #32]
 8005dc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dc4:	f7ff ff24 	bl	8005c10 <prvInsertTimerInActiveList>
					break;
 8005dc8:	e015      	b.n	8005df6 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dd0:	f003 0302 	and.w	r3, r3, #2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d103      	bne.n	8005de0 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8005dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dda:	f000 fbbb 	bl	8006554 <vPortFree>
 8005dde:	e00a      	b.n	8005df6 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de6:	f023 0301 	bic.w	r3, r3, #1
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005df2:	e000      	b.n	8005df6 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005df4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005df6:	4b08      	ldr	r3, [pc, #32]	; (8005e18 <prvProcessReceivedCommands+0x184>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f107 0108 	add.w	r1, r7, #8
 8005dfe:	2200      	movs	r2, #0
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fd feb5 	bl	8003b70 <xQueueReceive>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f47f af47 	bne.w	8005c9c <prvProcessReceivedCommands+0x8>
	}
}
 8005e0e:	bf00      	nop
 8005e10:	3728      	adds	r7, #40	; 0x28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000178 	.word	0x20000178

08005e1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e22:	e047      	b.n	8005eb4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e24:	4b2d      	ldr	r3, [pc, #180]	; (8005edc <prvSwitchTimerLists+0xc0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2e:	4b2b      	ldr	r3, [pc, #172]	; (8005edc <prvSwitchTimerLists+0xc0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fd fc19 	bl	8003674 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d02d      	beq.n	8005eb4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d90e      	bls.n	8005e88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e76:	4b19      	ldr	r3, [pc, #100]	; (8005edc <prvSwitchTimerLists+0xc0>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3304      	adds	r3, #4
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f7fd fbbe 	bl	8003602 <vListInsert>
 8005e86:	e015      	b.n	8005eb4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	2100      	movs	r1, #0
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fd80 	bl	8005998 <xTimerGenericCommand>
 8005e98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <prvSwitchTimerLists+0x98>
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	e7fe      	b.n	8005eb2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eb4:	4b09      	ldr	r3, [pc, #36]	; (8005edc <prvSwitchTimerLists+0xc0>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1b2      	bne.n	8005e24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ebe:	4b07      	ldr	r3, [pc, #28]	; (8005edc <prvSwitchTimerLists+0xc0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <prvSwitchTimerLists+0xc4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a04      	ldr	r2, [pc, #16]	; (8005edc <prvSwitchTimerLists+0xc0>)
 8005eca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ecc:	4a04      	ldr	r2, [pc, #16]	; (8005ee0 <prvSwitchTimerLists+0xc4>)
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	6013      	str	r3, [r2, #0]
}
 8005ed2:	bf00      	nop
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	20000170 	.word	0x20000170
 8005ee0:	20000174 	.word	0x20000174

08005ee4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ee8:	f000 f958 	bl	800619c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005eec:	4b12      	ldr	r3, [pc, #72]	; (8005f38 <prvCheckForValidListAndQueue+0x54>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11d      	bne.n	8005f30 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005ef4:	4811      	ldr	r0, [pc, #68]	; (8005f3c <prvCheckForValidListAndQueue+0x58>)
 8005ef6:	f7fd fb33 	bl	8003560 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005efa:	4811      	ldr	r0, [pc, #68]	; (8005f40 <prvCheckForValidListAndQueue+0x5c>)
 8005efc:	f7fd fb30 	bl	8003560 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f00:	4b10      	ldr	r3, [pc, #64]	; (8005f44 <prvCheckForValidListAndQueue+0x60>)
 8005f02:	4a0e      	ldr	r2, [pc, #56]	; (8005f3c <prvCheckForValidListAndQueue+0x58>)
 8005f04:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f06:	4b10      	ldr	r3, [pc, #64]	; (8005f48 <prvCheckForValidListAndQueue+0x64>)
 8005f08:	4a0d      	ldr	r2, [pc, #52]	; (8005f40 <prvCheckForValidListAndQueue+0x5c>)
 8005f0a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	210c      	movs	r1, #12
 8005f10:	200a      	movs	r0, #10
 8005f12:	f7fd fc41 	bl	8003798 <xQueueGenericCreate>
 8005f16:	4602      	mov	r2, r0
 8005f18:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <prvCheckForValidListAndQueue+0x54>)
 8005f1a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <prvCheckForValidListAndQueue+0x54>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <prvCheckForValidListAndQueue+0x54>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4908      	ldr	r1, [pc, #32]	; (8005f4c <prvCheckForValidListAndQueue+0x68>)
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fe f80c 	bl	8003f48 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f30:	f000 f962 	bl	80061f8 <vPortExitCritical>
}
 8005f34:	bf00      	nop
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	20000178 	.word	0x20000178
 8005f3c:	20000148 	.word	0x20000148
 8005f40:	2000015c 	.word	0x2000015c
 8005f44:	20000170 	.word	0x20000170
 8005f48:	20000174 	.word	0x20000174
 8005f4c:	0800684c 	.word	0x0800684c

08005f50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3b04      	subs	r3, #4
 8005f60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3b04      	subs	r3, #4
 8005f6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f023 0201 	bic.w	r2, r3, #1
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f80:	4a0c      	ldr	r2, [pc, #48]	; (8005fb4 <pxPortInitialiseStack+0x64>)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3b14      	subs	r3, #20
 8005f8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	3b04      	subs	r3, #4
 8005f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f06f 0202 	mvn.w	r2, #2
 8005f9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3b20      	subs	r3, #32
 8005fa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	08005fb9 	.word	0x08005fb9

08005fb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005fc2:	4b11      	ldr	r3, [pc, #68]	; (8006008 <prvTaskExitError+0x50>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fca:	d009      	beq.n	8005fe0 <prvTaskExitError+0x28>
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	60fb      	str	r3, [r7, #12]
 8005fde:	e7fe      	b.n	8005fde <prvTaskExitError+0x26>
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ff2:	bf00      	nop
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0fc      	beq.n	8005ff4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ffa:	bf00      	nop
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000014 	.word	0x20000014
 800600c:	00000000 	.word	0x00000000

08006010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <pxCurrentTCBConst2>)
 8006012:	6819      	ldr	r1, [r3, #0]
 8006014:	6808      	ldr	r0, [r1, #0]
 8006016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800601a:	f380 8809 	msr	PSP, r0
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f04f 0000 	mov.w	r0, #0
 8006026:	f380 8811 	msr	BASEPRI, r0
 800602a:	4770      	bx	lr
 800602c:	f3af 8000 	nop.w

08006030 <pxCurrentTCBConst2>:
 8006030:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop

08006038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006038:	4808      	ldr	r0, [pc, #32]	; (800605c <prvPortStartFirstTask+0x24>)
 800603a:	6800      	ldr	r0, [r0, #0]
 800603c:	6800      	ldr	r0, [r0, #0]
 800603e:	f380 8808 	msr	MSP, r0
 8006042:	f04f 0000 	mov.w	r0, #0
 8006046:	f380 8814 	msr	CONTROL, r0
 800604a:	b662      	cpsie	i
 800604c:	b661      	cpsie	f
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	df00      	svc	0
 8006058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800605a:	bf00      	nop
 800605c:	e000ed08 	.word	0xe000ed08

08006060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006066:	4b44      	ldr	r3, [pc, #272]	; (8006178 <xPortStartScheduler+0x118>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a44      	ldr	r2, [pc, #272]	; (800617c <xPortStartScheduler+0x11c>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d109      	bne.n	8006084 <xPortStartScheduler+0x24>
 8006070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	613b      	str	r3, [r7, #16]
 8006082:	e7fe      	b.n	8006082 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006084:	4b3c      	ldr	r3, [pc, #240]	; (8006178 <xPortStartScheduler+0x118>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a3d      	ldr	r2, [pc, #244]	; (8006180 <xPortStartScheduler+0x120>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d109      	bne.n	80060a2 <xPortStartScheduler+0x42>
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	e7fe      	b.n	80060a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060a2:	4b38      	ldr	r3, [pc, #224]	; (8006184 <xPortStartScheduler+0x124>)
 80060a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	22ff      	movs	r2, #255	; 0xff
 80060b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	4b30      	ldr	r3, [pc, #192]	; (8006188 <xPortStartScheduler+0x128>)
 80060c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ca:	4b30      	ldr	r3, [pc, #192]	; (800618c <xPortStartScheduler+0x12c>)
 80060cc:	2207      	movs	r2, #7
 80060ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060d0:	e009      	b.n	80060e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80060d2:	4b2e      	ldr	r3, [pc, #184]	; (800618c <xPortStartScheduler+0x12c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3b01      	subs	r3, #1
 80060d8:	4a2c      	ldr	r2, [pc, #176]	; (800618c <xPortStartScheduler+0x12c>)
 80060da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060e6:	78fb      	ldrb	r3, [r7, #3]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ee:	2b80      	cmp	r3, #128	; 0x80
 80060f0:	d0ef      	beq.n	80060d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060f2:	4b26      	ldr	r3, [pc, #152]	; (800618c <xPortStartScheduler+0x12c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f1c3 0307 	rsb	r3, r3, #7
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d009      	beq.n	8006112 <xPortStartScheduler+0xb2>
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	60bb      	str	r3, [r7, #8]
 8006110:	e7fe      	b.n	8006110 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006112:	4b1e      	ldr	r3, [pc, #120]	; (800618c <xPortStartScheduler+0x12c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	4a1c      	ldr	r2, [pc, #112]	; (800618c <xPortStartScheduler+0x12c>)
 800611a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800611c:	4b1b      	ldr	r3, [pc, #108]	; (800618c <xPortStartScheduler+0x12c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006124:	4a19      	ldr	r2, [pc, #100]	; (800618c <xPortStartScheduler+0x12c>)
 8006126:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	b2da      	uxtb	r2, r3
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006130:	4b17      	ldr	r3, [pc, #92]	; (8006190 <xPortStartScheduler+0x130>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a16      	ldr	r2, [pc, #88]	; (8006190 <xPortStartScheduler+0x130>)
 8006136:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800613a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800613c:	4b14      	ldr	r3, [pc, #80]	; (8006190 <xPortStartScheduler+0x130>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a13      	ldr	r2, [pc, #76]	; (8006190 <xPortStartScheduler+0x130>)
 8006142:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006146:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006148:	f000 f8d6 	bl	80062f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800614c:	4b11      	ldr	r3, [pc, #68]	; (8006194 <xPortStartScheduler+0x134>)
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006152:	f000 f8f5 	bl	8006340 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006156:	4b10      	ldr	r3, [pc, #64]	; (8006198 <xPortStartScheduler+0x138>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a0f      	ldr	r2, [pc, #60]	; (8006198 <xPortStartScheduler+0x138>)
 800615c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006160:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006162:	f7ff ff69 	bl	8006038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006166:	f7fe fe5d 	bl	8004e24 <vTaskSwitchContext>
	prvTaskExitError();
 800616a:	f7ff ff25 	bl	8005fb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	e000ed00 	.word	0xe000ed00
 800617c:	410fc271 	.word	0x410fc271
 8006180:	410fc270 	.word	0x410fc270
 8006184:	e000e400 	.word	0xe000e400
 8006188:	20000184 	.word	0x20000184
 800618c:	20000188 	.word	0x20000188
 8006190:	e000ed20 	.word	0xe000ed20
 8006194:	20000014 	.word	0x20000014
 8006198:	e000ef34 	.word	0xe000ef34

0800619c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061b4:	4b0e      	ldr	r3, [pc, #56]	; (80061f0 <vPortEnterCritical+0x54>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	3301      	adds	r3, #1
 80061ba:	4a0d      	ldr	r2, [pc, #52]	; (80061f0 <vPortEnterCritical+0x54>)
 80061bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061be:	4b0c      	ldr	r3, [pc, #48]	; (80061f0 <vPortEnterCritical+0x54>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d10e      	bne.n	80061e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <vPortEnterCritical+0x58>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <vPortEnterCritical+0x48>
 80061d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d4:	f383 8811 	msr	BASEPRI, r3
 80061d8:	f3bf 8f6f 	isb	sy
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	603b      	str	r3, [r7, #0]
 80061e2:	e7fe      	b.n	80061e2 <vPortEnterCritical+0x46>
	}
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	20000014 	.word	0x20000014
 80061f4:	e000ed04 	.word	0xe000ed04

080061f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061fe:	4b11      	ldr	r3, [pc, #68]	; (8006244 <vPortExitCritical+0x4c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <vPortExitCritical+0x22>
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	607b      	str	r3, [r7, #4]
 8006218:	e7fe      	b.n	8006218 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800621a:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <vPortExitCritical+0x4c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3b01      	subs	r3, #1
 8006220:	4a08      	ldr	r2, [pc, #32]	; (8006244 <vPortExitCritical+0x4c>)
 8006222:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006224:	4b07      	ldr	r3, [pc, #28]	; (8006244 <vPortExitCritical+0x4c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d104      	bne.n	8006236 <vPortExitCritical+0x3e>
 800622c:	2300      	movs	r3, #0
 800622e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	20000014 	.word	0x20000014
	...

08006250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006250:	f3ef 8009 	mrs	r0, PSP
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	4b15      	ldr	r3, [pc, #84]	; (80062b0 <pxCurrentTCBConst>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	f01e 0f10 	tst.w	lr, #16
 8006260:	bf08      	it	eq
 8006262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626a:	6010      	str	r0, [r2, #0]
 800626c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006270:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006274:	f380 8811 	msr	BASEPRI, r0
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	f3bf 8f6f 	isb	sy
 8006280:	f7fe fdd0 	bl	8004e24 <vTaskSwitchContext>
 8006284:	f04f 0000 	mov.w	r0, #0
 8006288:	f380 8811 	msr	BASEPRI, r0
 800628c:	bc09      	pop	{r0, r3}
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	6808      	ldr	r0, [r1, #0]
 8006292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006296:	f01e 0f10 	tst.w	lr, #16
 800629a:	bf08      	it	eq
 800629c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062a0:	f380 8809 	msr	PSP, r0
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	f3af 8000 	nop.w

080062b0 <pxCurrentTCBConst>:
 80062b0:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop

080062b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062d0:	f7fe fcf0 	bl	8004cb4 <xTaskIncrementTick>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <SysTick_Handler+0x3c>)
 80062dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	2300      	movs	r3, #0
 80062e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80062ec:	bf00      	nop
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	e000ed04 	.word	0xe000ed04

080062f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062fc:	4b0b      	ldr	r3, [pc, #44]	; (800632c <vPortSetupTimerInterrupt+0x34>)
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006302:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <vPortSetupTimerInterrupt+0x38>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006308:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <vPortSetupTimerInterrupt+0x3c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a0a      	ldr	r2, [pc, #40]	; (8006338 <vPortSetupTimerInterrupt+0x40>)
 800630e:	fba2 2303 	umull	r2, r3, r2, r3
 8006312:	099b      	lsrs	r3, r3, #6
 8006314:	4a09      	ldr	r2, [pc, #36]	; (800633c <vPortSetupTimerInterrupt+0x44>)
 8006316:	3b01      	subs	r3, #1
 8006318:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800631a:	4b04      	ldr	r3, [pc, #16]	; (800632c <vPortSetupTimerInterrupt+0x34>)
 800631c:	2207      	movs	r2, #7
 800631e:	601a      	str	r2, [r3, #0]
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	e000e010 	.word	0xe000e010
 8006330:	e000e018 	.word	0xe000e018
 8006334:	20000008 	.word	0x20000008
 8006338:	10624dd3 	.word	0x10624dd3
 800633c:	e000e014 	.word	0xe000e014

08006340 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006340:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006350 <vPortEnableVFP+0x10>
 8006344:	6801      	ldr	r1, [r0, #0]
 8006346:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800634a:	6001      	str	r1, [r0, #0]
 800634c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800634e:	bf00      	nop
 8006350:	e000ed88 	.word	0xe000ed88

08006354 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800635a:	f3ef 8305 	mrs	r3, IPSR
 800635e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2b0f      	cmp	r3, #15
 8006364:	d913      	bls.n	800638e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006366:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <vPortValidateInterruptPriority+0x6c>)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006370:	4b14      	ldr	r3, [pc, #80]	; (80063c4 <vPortValidateInterruptPriority+0x70>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	7afa      	ldrb	r2, [r7, #11]
 8006376:	429a      	cmp	r2, r3
 8006378:	d209      	bcs.n	800638e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	607b      	str	r3, [r7, #4]
 800638c:	e7fe      	b.n	800638c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800638e:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <vPortValidateInterruptPriority+0x74>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006396:	4b0d      	ldr	r3, [pc, #52]	; (80063cc <vPortValidateInterruptPriority+0x78>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d909      	bls.n	80063b2 <vPortValidateInterruptPriority+0x5e>
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	e7fe      	b.n	80063b0 <vPortValidateInterruptPriority+0x5c>
	}
 80063b2:	bf00      	nop
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	e000e3f0 	.word	0xe000e3f0
 80063c4:	20000184 	.word	0x20000184
 80063c8:	e000ed0c 	.word	0xe000ed0c
 80063cc:	20000188 	.word	0x20000188

080063d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063d8:	2300      	movs	r3, #0
 80063da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063dc:	f7fe fbb0 	bl	8004b40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063e0:	4b57      	ldr	r3, [pc, #348]	; (8006540 <pvPortMalloc+0x170>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063e8:	f000 f90c 	bl	8006604 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063ec:	4b55      	ldr	r3, [pc, #340]	; (8006544 <pvPortMalloc+0x174>)
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4013      	ands	r3, r2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f040 808c 	bne.w	8006512 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01c      	beq.n	800643a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006400:	2208      	movs	r2, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4413      	add	r3, r2
 8006406:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	2b00      	cmp	r3, #0
 8006410:	d013      	beq.n	800643a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f023 0307 	bic.w	r3, r3, #7
 8006418:	3308      	adds	r3, #8
 800641a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <pvPortMalloc+0x6a>
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e7fe      	b.n	8006438 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d068      	beq.n	8006512 <pvPortMalloc+0x142>
 8006440:	4b41      	ldr	r3, [pc, #260]	; (8006548 <pvPortMalloc+0x178>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d863      	bhi.n	8006512 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800644a:	4b40      	ldr	r3, [pc, #256]	; (800654c <pvPortMalloc+0x17c>)
 800644c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800644e:	4b3f      	ldr	r3, [pc, #252]	; (800654c <pvPortMalloc+0x17c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006454:	e004      	b.n	8006460 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	429a      	cmp	r2, r3
 8006468:	d903      	bls.n	8006472 <pvPortMalloc+0xa2>
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f1      	bne.n	8006456 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006472:	4b33      	ldr	r3, [pc, #204]	; (8006540 <pvPortMalloc+0x170>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006478:	429a      	cmp	r2, r3
 800647a:	d04a      	beq.n	8006512 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2208      	movs	r2, #8
 8006482:	4413      	add	r3, r2
 8006484:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	1ad2      	subs	r2, r2, r3
 8006496:	2308      	movs	r3, #8
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	429a      	cmp	r2, r3
 800649c:	d91e      	bls.n	80064dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800649e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4413      	add	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d009      	beq.n	80064c4 <pvPortMalloc+0xf4>
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	613b      	str	r3, [r7, #16]
 80064c2:	e7fe      	b.n	80064c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	1ad2      	subs	r2, r2, r3
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064d6:	69b8      	ldr	r0, [r7, #24]
 80064d8:	f000 f8f6 	bl	80066c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064dc:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <pvPortMalloc+0x178>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	4a18      	ldr	r2, [pc, #96]	; (8006548 <pvPortMalloc+0x178>)
 80064e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064ea:	4b17      	ldr	r3, [pc, #92]	; (8006548 <pvPortMalloc+0x178>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	4b18      	ldr	r3, [pc, #96]	; (8006550 <pvPortMalloc+0x180>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d203      	bcs.n	80064fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <pvPortMalloc+0x178>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a15      	ldr	r2, [pc, #84]	; (8006550 <pvPortMalloc+0x180>)
 80064fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	4b10      	ldr	r3, [pc, #64]	; (8006544 <pvPortMalloc+0x174>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	431a      	orrs	r2, r3
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006512:	f7fe fb23 	bl	8004b5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	f003 0307 	and.w	r3, r3, #7
 800651c:	2b00      	cmp	r3, #0
 800651e:	d009      	beq.n	8006534 <pvPortMalloc+0x164>
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	e7fe      	b.n	8006532 <pvPortMalloc+0x162>
	return pvReturn;
 8006534:	69fb      	ldr	r3, [r7, #28]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3728      	adds	r7, #40	; 0x28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20012d94 	.word	0x20012d94
 8006544:	20012da0 	.word	0x20012da0
 8006548:	20012d98 	.word	0x20012d98
 800654c:	20012d8c 	.word	0x20012d8c
 8006550:	20012d9c 	.word	0x20012d9c

08006554 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d046      	beq.n	80065f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006566:	2308      	movs	r3, #8
 8006568:	425b      	negs	r3, r3
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4413      	add	r3, r2
 800656e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	4b20      	ldr	r3, [pc, #128]	; (80065fc <vPortFree+0xa8>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4013      	ands	r3, r2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d109      	bne.n	8006596 <vPortFree+0x42>
 8006582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006586:	f383 8811 	msr	BASEPRI, r3
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	e7fe      	b.n	8006594 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <vPortFree+0x5e>
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	60bb      	str	r3, [r7, #8]
 80065b0:	e7fe      	b.n	80065b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	4b11      	ldr	r3, [pc, #68]	; (80065fc <vPortFree+0xa8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4013      	ands	r3, r2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d019      	beq.n	80065f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d115      	bne.n	80065f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	685a      	ldr	r2, [r3, #4]
 80065cc:	4b0b      	ldr	r3, [pc, #44]	; (80065fc <vPortFree+0xa8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	401a      	ands	r2, r3
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065d8:	f7fe fab2 	bl	8004b40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	4b07      	ldr	r3, [pc, #28]	; (8006600 <vPortFree+0xac>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4413      	add	r3, r2
 80065e6:	4a06      	ldr	r2, [pc, #24]	; (8006600 <vPortFree+0xac>)
 80065e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065ea:	6938      	ldr	r0, [r7, #16]
 80065ec:	f000 f86c 	bl	80066c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80065f0:	f7fe fab4 	bl	8004b5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065f4:	bf00      	nop
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	20012da0 	.word	0x20012da0
 8006600:	20012d98 	.word	0x20012d98

08006604 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800660a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800660e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006610:	4b27      	ldr	r3, [pc, #156]	; (80066b0 <prvHeapInit+0xac>)
 8006612:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00c      	beq.n	8006638 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3307      	adds	r3, #7
 8006622:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f023 0307 	bic.w	r3, r3, #7
 800662a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <prvHeapInit+0xac>)
 8006634:	4413      	add	r3, r2
 8006636:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800663c:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <prvHeapInit+0xb0>)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006642:	4b1c      	ldr	r3, [pc, #112]	; (80066b4 <prvHeapInit+0xb0>)
 8006644:	2200      	movs	r2, #0
 8006646:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	4413      	add	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006650:	2208      	movs	r2, #8
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0307 	bic.w	r3, r3, #7
 800665e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4a15      	ldr	r2, [pc, #84]	; (80066b8 <prvHeapInit+0xb4>)
 8006664:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006666:	4b14      	ldr	r3, [pc, #80]	; (80066b8 <prvHeapInit+0xb4>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2200      	movs	r2, #0
 800666c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800666e:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <prvHeapInit+0xb4>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	1ad2      	subs	r2, r2, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006684:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <prvHeapInit+0xb4>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	4a0a      	ldr	r2, [pc, #40]	; (80066bc <prvHeapInit+0xb8>)
 8006692:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <prvHeapInit+0xbc>)
 800669a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800669c:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <prvHeapInit+0xc0>)
 800669e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066a2:	601a      	str	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	2000018c 	.word	0x2000018c
 80066b4:	20012d8c 	.word	0x20012d8c
 80066b8:	20012d94 	.word	0x20012d94
 80066bc:	20012d9c 	.word	0x20012d9c
 80066c0:	20012d98 	.word	0x20012d98
 80066c4:	20012da0 	.word	0x20012da0

080066c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066d0:	4b28      	ldr	r3, [pc, #160]	; (8006774 <prvInsertBlockIntoFreeList+0xac>)
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	e002      	b.n	80066dc <prvInsertBlockIntoFreeList+0x14>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d8f7      	bhi.n	80066d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	4413      	add	r3, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d108      	bne.n	800670a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	441a      	add	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	441a      	add	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d118      	bne.n	8006750 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <prvInsertBlockIntoFreeList+0xb0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d00d      	beq.n	8006746 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	441a      	add	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	e008      	b.n	8006758 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006746:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <prvInsertBlockIntoFreeList+0xb0>)
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e003      	b.n	8006758 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	429a      	cmp	r2, r3
 800675e:	d002      	beq.n	8006766 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20012d8c 	.word	0x20012d8c
 8006778:	20012d94 	.word	0x20012d94

0800677c <__libc_init_array>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	4e0d      	ldr	r6, [pc, #52]	; (80067b4 <__libc_init_array+0x38>)
 8006780:	4c0d      	ldr	r4, [pc, #52]	; (80067b8 <__libc_init_array+0x3c>)
 8006782:	1ba4      	subs	r4, r4, r6
 8006784:	10a4      	asrs	r4, r4, #2
 8006786:	2500      	movs	r5, #0
 8006788:	42a5      	cmp	r5, r4
 800678a:	d109      	bne.n	80067a0 <__libc_init_array+0x24>
 800678c:	4e0b      	ldr	r6, [pc, #44]	; (80067bc <__libc_init_array+0x40>)
 800678e:	4c0c      	ldr	r4, [pc, #48]	; (80067c0 <__libc_init_array+0x44>)
 8006790:	f000 f82c 	bl	80067ec <_init>
 8006794:	1ba4      	subs	r4, r4, r6
 8006796:	10a4      	asrs	r4, r4, #2
 8006798:	2500      	movs	r5, #0
 800679a:	42a5      	cmp	r5, r4
 800679c:	d105      	bne.n	80067aa <__libc_init_array+0x2e>
 800679e:	bd70      	pop	{r4, r5, r6, pc}
 80067a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067a4:	4798      	blx	r3
 80067a6:	3501      	adds	r5, #1
 80067a8:	e7ee      	b.n	8006788 <__libc_init_array+0xc>
 80067aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067ae:	4798      	blx	r3
 80067b0:	3501      	adds	r5, #1
 80067b2:	e7f2      	b.n	800679a <__libc_init_array+0x1e>
 80067b4:	08006874 	.word	0x08006874
 80067b8:	08006874 	.word	0x08006874
 80067bc:	08006874 	.word	0x08006874
 80067c0:	08006878 	.word	0x08006878

080067c4 <memcpy>:
 80067c4:	b510      	push	{r4, lr}
 80067c6:	1e43      	subs	r3, r0, #1
 80067c8:	440a      	add	r2, r1
 80067ca:	4291      	cmp	r1, r2
 80067cc:	d100      	bne.n	80067d0 <memcpy+0xc>
 80067ce:	bd10      	pop	{r4, pc}
 80067d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067d8:	e7f7      	b.n	80067ca <memcpy+0x6>

080067da <memset>:
 80067da:	4402      	add	r2, r0
 80067dc:	4603      	mov	r3, r0
 80067de:	4293      	cmp	r3, r2
 80067e0:	d100      	bne.n	80067e4 <memset+0xa>
 80067e2:	4770      	bx	lr
 80067e4:	f803 1b01 	strb.w	r1, [r3], #1
 80067e8:	e7f9      	b.n	80067de <memset+0x4>
	...

080067ec <_init>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	bf00      	nop
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr

080067f8 <_fini>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	bf00      	nop
 80067fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fe:	bc08      	pop	{r3}
 8006800:	469e      	mov	lr, r3
 8006802:	4770      	bx	lr
