
Embedded_OS_Lab2-2_P76091307.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c0  080068c0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080068c0  080068c0  000168c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068c8  080068c8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c8  080068c8  000168c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068cc  080068cc  000168cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080068d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012f70  20000018  080068e8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f88  080068e8  00022f88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001504a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d55  00000000  00000000  00035092  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f0  00000000  00000000  00037de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a8  00000000  00000000  000390d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021da8  00000000  00000000  0003a280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e422  00000000  00000000  0005c028  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d29eb  00000000  00000000  0006a44a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ce35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  0013ceb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800682c 	.word	0x0800682c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	0800682c 	.word	0x0800682c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MEMS_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address,uint8_t data){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	4603      	mov	r3, r0
 80004e8:	460a      	mov	r2, r1
 80004ea:	71fb      	strb	r3, [r7, #7]
 80004ec:	4613      	mov	r3, r2
 80004ee:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2108      	movs	r1, #8
 80004f4:	480b      	ldr	r0, [pc, #44]	; (8000524 <MEMS_Write+0x44>)
 80004f6:	f000 ff69 	bl	80013cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004fa:	1df9      	adds	r1, r7, #7
 80004fc:	230a      	movs	r3, #10
 80004fe:	2201      	movs	r2, #1
 8000500:	4809      	ldr	r0, [pc, #36]	; (8000528 <MEMS_Write+0x48>)
 8000502:	f001 fc81 	bl	8001e08 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 8000506:	1db9      	adds	r1, r7, #6
 8000508:	230a      	movs	r3, #10
 800050a:	2201      	movs	r2, #1
 800050c:	4806      	ldr	r0, [pc, #24]	; (8000528 <MEMS_Write+0x48>)
 800050e:	f001 fc7b 	bl	8001e08 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2108      	movs	r1, #8
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <MEMS_Write+0x44>)
 8000518:	f000 ff58 	bl	80013cc <HAL_GPIO_WritePin>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40021000 	.word	0x40021000
 8000528:	20012e08 	.word	0x20012e08

0800052c <MEMS_Read>:
void MEMS_Read(uint8_t address,uint8_t *data){
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
    address |= 0x80;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800053e:	b2db      	uxtb	r3, r3
 8000540:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2108      	movs	r1, #8
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <MEMS_Read+0x4c>)
 8000548:	f000 ff40 	bl	80013cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 800054c:	1df9      	adds	r1, r7, #7
 800054e:	230a      	movs	r3, #10
 8000550:	2201      	movs	r2, #1
 8000552:	480a      	ldr	r0, [pc, #40]	; (800057c <MEMS_Read+0x50>)
 8000554:	f001 fc58 	bl	8001e08 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,data,1,10);
 8000558:	230a      	movs	r3, #10
 800055a:	2201      	movs	r2, #1
 800055c:	6839      	ldr	r1, [r7, #0]
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <MEMS_Read+0x50>)
 8000560:	f001 fd86 	bl	8002070 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	4803      	ldr	r0, [pc, #12]	; (8000578 <MEMS_Read+0x4c>)
 800056a:	f000 ff2f 	bl	80013cc <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000
 800057c:	20012e08 	.word	0x20012e08

08000580 <MEMS_init>:
void MEMS_init(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	MEMS_Write(0x21, 0x01);
 8000584:	2101      	movs	r1, #1
 8000586:	2021      	movs	r0, #33	; 0x21
 8000588:	f7ff ffaa 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x23, 0x48);
 800058c:	2148      	movs	r1, #72	; 0x48
 800058e:	2023      	movs	r0, #35	; 0x23
 8000590:	f7ff ffa6 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x20, 0x67);
 8000594:	2167      	movs	r1, #103	; 0x67
 8000596:	2020      	movs	r0, #32
 8000598:	f7ff ffa2 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x24, 0x00);
 800059c:	2100      	movs	r1, #0
 800059e:	2024      	movs	r0, #36	; 0x24
 80005a0:	f7ff ff9e 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x57, 0x55);
 80005a4:	2155      	movs	r1, #85	; 0x55
 80005a6:	2057      	movs	r0, #87	; 0x57
 80005a8:	f7ff ff9a 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x40, 0x05);
 80005ac:	2105      	movs	r1, #5
 80005ae:	2040      	movs	r0, #64	; 0x40
 80005b0:	f7ff ff96 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x41, 0x11);
 80005b4:	2111      	movs	r1, #17
 80005b6:	2041      	movs	r0, #65	; 0x41
 80005b8:	f7ff ff92 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x59, 0xFC);
 80005bc:	21fc      	movs	r1, #252	; 0xfc
 80005be:	2059      	movs	r0, #89	; 0x59
 80005c0:	f7ff ff8e 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x5A, 0xFC);
 80005c4:	21fc      	movs	r1, #252	; 0xfc
 80005c6:	205a      	movs	r0, #90	; 0x5a
 80005c8:	f7ff ff8a 	bl	80004e0 <MEMS_Write>
	MEMS_Write(0x5B, 0x01);
 80005cc:	2101      	movs	r1, #1
 80005ce:	205b      	movs	r0, #91	; 0x5b
 80005d0:	f7ff ff86 	bl	80004e0 <MEMS_Write>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005de:	f000 fc1f 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e2:	f000 f83d 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e6:	f000 f8f9 	bl	80007dc <MX_GPIO_Init>
  MX_SPI1_Init();
 80005ea:	f000 f897 	bl	800071c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f8cb 	bl	8000788 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MEMS_init();
 80005f2:	f7ff ffc5 	bl	8000580 <MEMS_init>
	/* Create the stream buffer that sends data from the interrupt to the
	task, and create the task. */
	xStreamBuffer = xStreamBufferCreate( /* The buffer length in bytes. */
 80005f6:	2200      	movs	r2, #0
 80005f8:	210a      	movs	r1, #10
 80005fa:	2064      	movs	r0, #100	; 0x64
 80005fc:	f003 fd2e 	bl	800405c <xStreamBufferGenericCreate>
 8000600:	4602      	mov	r2, r0
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <main+0x70>)
 8000604:	601a      	str	r2, [r3, #0]
										 sbiSTREAM_BUFFER_LENGTH_BYTES,
										 /* The stream buffer's trigger level. */
										 sbiSTREAM_BUFFER_TRIGGER_LEVEL_10 );
	xStreamBuffer2 = xStreamBufferCreate( /* The buffer length in bytes. */
 8000606:	2200      	movs	r2, #0
 8000608:	210a      	movs	r1, #10
 800060a:	2064      	movs	r0, #100	; 0x64
 800060c:	f003 fd26 	bl	800405c <xStreamBufferGenericCreate>
 8000610:	4602      	mov	r2, r0
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <main+0x74>)
 8000614:	601a      	str	r2, [r3, #0]
											 sbiSTREAM_BUFFER_LENGTH_BYTES,
											 /* The stream buffer's trigger level. */
											 sbiSTREAM_BUFFER_TRIGGER_LEVEL_10 );
  //xSemaphore = xSemaphoreCreateBinary();
  xTaskCreate(green_blink,"task1",1024,(void *)1,1,NULL);
 8000616:	2300      	movs	r3, #0
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2301      	movs	r3, #1
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2301      	movs	r3, #1
 8000620:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000624:	490a      	ldr	r1, [pc, #40]	; (8000650 <main+0x78>)
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <main+0x7c>)
 8000628:	f004 f8eb 	bl	8004802 <xTaskCreate>
  xTaskCreate(orange_blink,"task2",1024,(void *)1,3,NULL);
 800062c:	2300      	movs	r3, #0
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	2303      	movs	r3, #3
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	2301      	movs	r3, #1
 8000636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800063a:	4907      	ldr	r1, [pc, #28]	; (8000658 <main+0x80>)
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <main+0x84>)
 800063e:	f004 f8e0 	bl	8004802 <xTaskCreate>
  vTaskStartScheduler();
 8000642:	f004 fa4f 	bl	8004ae4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0x6e>
 8000648:	20000034 	.word	0x20000034
 800064c:	20000038 	.word	0x20000038
 8000650:	0800686c 	.word	0x0800686c
 8000654:	080008d9 	.word	0x080008d9
 8000658:	08006874 	.word	0x08006874
 800065c:	08000939 	.word	0x08000939

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 f8d3 	bl	800681a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xb4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xb4>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xb4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <SystemClock_Config+0xb8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <SystemClock_Config+0xb8>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <SystemClock_Config+0xb8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fec7 	bl	8001464 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006dc:	f000 fa24 	bl	8000b28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f922 	bl	8001944 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000706:	f000 fa0f 	bl	8000b28 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f001 fae7 	bl	8001d40 <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f9d6 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20012e08 	.word	0x20012e08
 8000784:	40013000 	.word	0x40013000

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f002 fa50 	bl	8002c64 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f9ad 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20012e60 	.word	0x20012e60
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_GPIO_Init+0xec>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a33      	ldr	r2, [pc, #204]	; (80008c8 <MX_GPIO_Init+0xec>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	60bb      	str	r3, [r7, #8]
 800080c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a2c      	ldr	r2, [pc, #176]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b2a      	ldr	r3, [pc, #168]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	603b      	str	r3, [r7, #0]
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a25      	ldr	r2, [pc, #148]	; (80008c8 <MX_GPIO_Init+0xec>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MX_GPIO_Init+0xec>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	4820      	ldr	r0, [pc, #128]	; (80008cc <MX_GPIO_Init+0xf0>)
 800084c:	f000 fdbe 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000856:	481e      	ldr	r0, [pc, #120]	; (80008d0 <MX_GPIO_Init+0xf4>)
 8000858:	f000 fdb8 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800085c:	2308      	movs	r3, #8
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	4816      	ldr	r0, [pc, #88]	; (80008cc <MX_GPIO_Init+0xf0>)
 8000874:	f000 fbf8 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000878:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	480f      	ldr	r0, [pc, #60]	; (80008d0 <MX_GPIO_Init+0xf4>)
 8000892:	f000 fbe9 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000896:	2301      	movs	r3, #1
 8000898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_GPIO_Init+0xf8>)
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	4619      	mov	r1, r3
 80008a8:	4808      	ldr	r0, [pc, #32]	; (80008cc <MX_GPIO_Init+0xf0>)
 80008aa:	f000 fbdd 	bl	8001068 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2106      	movs	r1, #6
 80008b2:	2006      	movs	r0, #6
 80008b4:	f000 fbae 	bl	8001014 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008b8:	2006      	movs	r0, #6
 80008ba:	f000 fbc7 	bl	800104c <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3720      	adds	r7, #32
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40021000 	.word	0x40021000
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	10110000 	.word	0x10110000

080008d8 <green_blink>:

/* USER CODE BEGIN 4 */
void green_blink()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	for(;;)
	{
		if(ret > 0){
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <green_blink+0x4c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d015      	beq.n	8000910 <green_blink+0x38>
			xStreamBufferReceive(
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <green_blink+0x50>)
 80008e6:	6818      	ldr	r0, [r3, #0]
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008ec:	2264      	movs	r2, #100	; 0x64
 80008ee:	490f      	ldr	r1, [pc, #60]	; (800092c <green_blink+0x54>)
 80008f0:	f003 fd8b 	bl	800440a <xStreamBufferReceive>
								  xStreamBuffer2,
								  ( void * ) &( cRxBuffer2[ 0 ]) ,
								  sizeof( char )*100,
								  portMAX_DELAY );
			HAL_UART_Transmit(&huart2,(uint8_t*)cRxBuffer2,strlen(cRxBuffer2),0xffff);
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <green_blink+0x54>)
 80008f6:	f7ff fc6b 	bl	80001d0 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000902:	490a      	ldr	r1, [pc, #40]	; (800092c <green_blink+0x54>)
 8000904:	480a      	ldr	r0, [pc, #40]	; (8000930 <green_blink+0x58>)
 8000906:	f002 f9fa 	bl	8002cfe <HAL_UART_Transmit>
			ret = 0;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <green_blink+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
		}
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <green_blink+0x5c>)
 8000916:	f000 fd72 	bl	80013fe <HAL_GPIO_TogglePin>
	  vTaskDelay(1000);
 800091a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091e:	f004 f8ad 	bl	8004a7c <vTaskDelay>
		if(ret > 0){
 8000922:	e7db      	b.n	80008dc <green_blink+0x4>
 8000924:	2000003c 	.word	0x2000003c
 8000928:	20000038 	.word	0x20000038
 800092c:	20012ea0 	.word	0x20012ea0
 8000930:	20012e60 	.word	0x20012e60
 8000934:	40020c00 	.word	0x40020c00

08000938 <orange_blink>:
	}
}
void orange_blink()   //handler
{
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
	 for(;;)                         //interrupt is disabled until we execute MEMS_READ
	 {
		  int8_t data;
		  BaseType_t xNextByte = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
		  const TickType_t x100ms = pdMS_TO_TICKS( 100 );
 8000942:	2364      	movs	r3, #100	; 0x64
 8000944:	607b      	str	r3, [r7, #4]
		  ret = xStreamBufferReceive( /* The stream buffer data is being received from. */
 8000946:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <orange_blink+0xb0>)
 8000948:	6818      	ldr	r0, [r3, #0]
								  xStreamBuffer,
								  /* Where to place received data. */
								  ( void * ) &( cRxBuffer[ xNextByte ] ),
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	4a27      	ldr	r2, [pc, #156]	; (80009ec <orange_blink+0xb4>)
 800094e:	1899      	adds	r1, r3, r2
		  ret = xStreamBufferReceive( /* The stream buffer data is being received from. */
 8000950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000954:	2264      	movs	r2, #100	; 0x64
 8000956:	f003 fd58 	bl	800440a <xStreamBufferReceive>
 800095a:	4602      	mov	r2, r0
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <orange_blink+0xb8>)
 800095e:	601a      	str	r2, [r3, #0]
								  sizeof( char )*100,
								  /* The time to wait for the next data if the buffer
								  is empty. */
								  portMAX_DELAY );

		  HAL_UART_Transmit(&huart2,(uint8_t*)cRxBuffer,strlen(cRxBuffer),0xffff);
 8000960:	4822      	ldr	r0, [pc, #136]	; (80009ec <orange_blink+0xb4>)
 8000962:	f7ff fc35 	bl	80001d0 <strlen>
 8000966:	4603      	mov	r3, r0
 8000968:	b29a      	uxth	r2, r3
 800096a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800096e:	491f      	ldr	r1, [pc, #124]	; (80009ec <orange_blink+0xb4>)
 8000970:	4820      	ldr	r0, [pc, #128]	; (80009f4 <orange_blink+0xbc>)
 8000972:	f002 f9c4 	bl	8002cfe <HAL_UART_Transmit>
		  if(ret > 0){
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <orange_blink+0xb8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00f      	beq.n	800099e <orange_blink+0x66>
			  xStreamBufferSend(xStreamBuffer2,( const void * ) pcStringToSend2,  strlen(pcStringToSend)*4,x100ms);
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <orange_blink+0xc0>)
 8000980:	681c      	ldr	r4, [r3, #0]
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <orange_blink+0xc4>)
 8000984:	681d      	ldr	r5, [r3, #0]
 8000986:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <orange_blink+0xc8>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fc20 	bl	80001d0 <strlen>
 8000990:	4603      	mov	r3, r0
 8000992:	009a      	lsls	r2, r3, #2
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4629      	mov	r1, r5
 8000998:	4620      	mov	r0, r4
 800099a:	f003 fbe9 	bl	8004170 <xStreamBufferSend>
		  }
		  int i=0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
		  for(i = 0;i<3;i++)
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	e016      	b.n	80009d6 <orange_blink+0x9e>
		  {
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ae:	4815      	ldr	r0, [pc, #84]	; (8000a04 <orange_blink+0xcc>)
 80009b0:	f000 fd0c 	bl	80013cc <HAL_GPIO_WritePin>
			vTaskDelay(1000);
 80009b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b8:	f004 f860 	bl	8004a7c <vTaskDelay>
			HAL_GPIO_WritePin(GPIOD,GPIO_PIN_13,GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c2:	4810      	ldr	r0, [pc, #64]	; (8000a04 <orange_blink+0xcc>)
 80009c4:	f000 fd02 	bl	80013cc <HAL_GPIO_WritePin>
			vTaskDelay(1000);
 80009c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009cc:	f004 f856 	bl	8004a7c <vTaskDelay>
		  for(i = 0;i<3;i++)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	dde5      	ble.n	80009a8 <orange_blink+0x70>
		  }
		  MEMS_Read(0x5f,&data);                          //reset the register(enable interrupt)
 80009dc:	1cfb      	adds	r3, r7, #3
 80009de:	4619      	mov	r1, r3
 80009e0:	205f      	movs	r0, #95	; 0x5f
 80009e2:	f7ff fda3 	bl	800052c <MEMS_Read>
	 {
 80009e6:	e7aa      	b.n	800093e <orange_blink+0x6>
 80009e8:	20000034 	.word	0x20000034
 80009ec:	20012da4 	.word	0x20012da4
 80009f0:	2000003c 	.word	0x2000003c
 80009f4:	20012e60 	.word	0x20012e60
 80009f8:	20000038 	.word	0x20000038
 80009fc:	20000004 	.word	0x20000004
 8000a00:	20000000 	.word	0x20000000
 8000a04:	40020c00 	.word	0x40020c00

08000a08 <HAL_GPIO_EXTI_Callback>:



 }
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)   //ISR function
{
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	80fb      	strh	r3, [r7, #6]

       static portBASE_TYPE xHigherPriorityTaskWoken;
       xHigherPriorityTaskWoken=pdFALSE;
 8000a12:	4b20      	ldr	r3, [pc, #128]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
       if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14))
 8000a18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a1c:	481e      	ldr	r0, [pc, #120]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x90>)
 8000a1e:	f000 fcbd 	bl	800139c <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <HAL_GPIO_EXTI_Callback+0x2e>
       {
           HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2e:	481a      	ldr	r0, [pc, #104]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x90>)
 8000a30:	f000 fccc 	bl	80013cc <HAL_GPIO_WritePin>
 8000a34:	e005      	b.n	8000a42 <HAL_GPIO_EXTI_Callback+0x3a>
       }
       else
       {
           HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3c:	4816      	ldr	r0, [pc, #88]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x90>)
 8000a3e:	f000 fcc5 	bl	80013cc <HAL_GPIO_WritePin>
       }
       if(xStreamBufferSendFromISR( xStreamBuffer,( const void * )pcStringToSend,strlen(pcStringToSend)*4,NULL ) > 0){//xSemaphoreGiveFromISR(xSemaphore, &xHigherPriorityTaskWoken) == pdTRUE){
 8000a42:	4b16      	ldr	r3, [pc, #88]	; (8000a9c <HAL_GPIO_EXTI_Callback+0x94>)
 8000a44:	681c      	ldr	r4, [r3, #0]
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a48:	681d      	ldr	r5, [r3, #0]
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_GPIO_EXTI_Callback+0x98>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fbbe 	bl	80001d0 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	009a      	lsls	r2, r3, #2
 8000a58:	2300      	movs	r3, #0
 8000a5a:	4629      	mov	r1, r5
 8000a5c:	4620      	mov	r0, r4
 8000a5e:	f003 fc29 	bl	80042b4 <xStreamBufferSendFromISR>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d005      	beq.n	8000a74 <HAL_GPIO_EXTI_Callback+0x6c>
    	   HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	480a      	ldr	r0, [pc, #40]	; (8000a98 <HAL_GPIO_EXTI_Callback+0x90>)
 8000a70:	f000 fcac 	bl	80013cc <HAL_GPIO_WritePin>
       }

       portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d007      	beq.n	8000a8c <HAL_GPIO_EXTI_Callback+0x84>
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	f3bf 8f4f 	dsb	sy
 8000a88:	f3bf 8f6f 	isb	sy


}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bdb0      	pop	{r4, r5, r7, pc}
 8000a94:	20000040 	.word	0x20000040
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	20000034 	.word	0x20000034
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	e000ed04 	.word	0xe000ed04

08000aa8 <vGenerateCoreBInterrupt>:

void vGenerateCoreBInterrupt( void * xUpdatedMessageBuffer )
{
 8000aa8:	b5b0      	push	{r4, r5, r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	char msg[30];
	memset(msg,'\0',sizeof(msg));
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	221e      	movs	r2, #30
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f005 feae 	bl	800681a <memset>
	sprintf(msg,"sbSEND_COMPLETED\n\r");
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <vGenerateCoreBInterrupt+0x54>)
 8000ac4:	461c      	mov	r4, r3
 8000ac6:	4615      	mov	r5, r2
 8000ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000acc:	682b      	ldr	r3, [r5, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	8022      	strh	r2, [r4, #0]
 8000ad2:	3402      	adds	r4, #2
 8000ad4:	0c1b      	lsrs	r3, r3, #16
 8000ad6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),0xffff);
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb77 	bl	80001d0 <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	f107 0108 	add.w	r1, r7, #8
 8000aea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <vGenerateCoreBInterrupt+0x58>)
 8000af0:	f002 f905 	bl	8002cfe <HAL_UART_Transmit>
}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	; 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bdb0      	pop	{r4, r5, r7, pc}
 8000afc:	0800687c 	.word	0x0800687c
 8000b00:	20012e60 	.word	0x20012e60

08000b04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b16:	f000 f9a5 	bl	8000e64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40001400 	.word	0x40001400

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <Error_Handler+0x6>

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_SPI_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_SPI_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000bda:	23e0      	movs	r3, #224	; 0xe0
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_SPI_MspInit+0x8c>)
 8000bf6:	f000 fa37 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_UART_MspInit+0x84>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12b      	bne.n	8000c8a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_UART_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c7a:	2307      	movs	r3, #7
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <HAL_UART_MspInit+0x8c>)
 8000c86:	f000 f9ef 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c8a:	bf00      	nop
 8000c8c:	3728      	adds	r7, #40	; 0x28
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40004400 	.word	0x40004400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	; 0x30
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	2037      	movs	r0, #55	; 0x37
 8000cb6:	f000 f9ad 	bl	8001014 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000cba:	2037      	movs	r0, #55	; 0x37
 8000cbc:	f000 f9c6 	bl	800104c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	4b1e      	ldr	r3, [pc, #120]	; (8000d40 <HAL_InitTick+0xa0>)
 8000cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc8:	4a1d      	ldr	r2, [pc, #116]	; (8000d40 <HAL_InitTick+0xa0>)
 8000cca:	f043 0320 	orr.w	r3, r3, #32
 8000cce:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	; (8000d40 <HAL_InitTick+0xa0>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	f003 0320 	and.w	r3, r3, #32
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cdc:	f107 0210 	add.w	r2, r7, #16
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fff8 	bl	8001cdc <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cec:	f000 ffce 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8000cf0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cf4:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <HAL_InitTick+0xa4>)
 8000cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfa:	0c9b      	lsrs	r3, r3, #18
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_InitTick+0xa8>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <HAL_InitTick+0xac>)
 8000d04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_InitTick+0xa8>)
 8000d08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d0c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_InitTick+0xa8>)
 8000d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d12:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_InitTick+0xa8>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_InitTick+0xa8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <HAL_InitTick+0xa8>)
 8000d22:	f001 fd61 	bl	80027e8 <HAL_TIM_Base_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d104      	bne.n	8000d36 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8000d2c:	4806      	ldr	r0, [pc, #24]	; (8000d48 <HAL_InitTick+0xa8>)
 8000d2e:	f001 fd90 	bl	8002852 <HAL_TIM_Base_Start_IT>
 8000d32:	4603      	mov	r3, r0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3730      	adds	r7, #48	; 0x30
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	431bde83 	.word	0x431bde83
 8000d48:	20012f04 	.word	0x20012f04
 8000d4c:	40001400 	.word	0x40001400

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d80:	2001      	movs	r0, #1
 8000d82:	f000 fb57 	bl	8001434 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM7_IRQHandler+0x10>)
 8000d92:	f001 fd82 	bl	800289a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20012f04 	.word	0x20012f04

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <SystemInit+0x28>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <SystemInit+0x28>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <SystemInit+0x28>)
 8000db6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dba:	609a      	str	r2, [r3, #8]
#endif
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <Reset_Handler>:
 8000dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e04 <LoopFillZerobss+0x14>
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	e003      	b.n	8000ddc <LoopCopyDataInit>

08000dd4 <CopyDataInit>:
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <LoopFillZerobss+0x18>)
 8000dd6:	585b      	ldr	r3, [r3, r1]
 8000dd8:	5043      	str	r3, [r0, r1]
 8000dda:	3104      	adds	r1, #4

08000ddc <LoopCopyDataInit>:
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <LoopFillZerobss+0x1c>)
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <LoopFillZerobss+0x20>)
 8000de0:	1842      	adds	r2, r0, r1
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d3f6      	bcc.n	8000dd4 <CopyDataInit>
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopFillZerobss+0x24>)
 8000de8:	e002      	b.n	8000df0 <LoopFillZerobss>

08000dea <FillZerobss>:
 8000dea:	2300      	movs	r3, #0
 8000dec:	f842 3b04 	str.w	r3, [r2], #4

08000df0 <LoopFillZerobss>:
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <LoopFillZerobss+0x28>)
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d3f9      	bcc.n	8000dea <FillZerobss>
 8000df6:	f7ff ffd3 	bl	8000da0 <SystemInit>
 8000dfa:	f005 fcdf 	bl	80067bc <__libc_init_array>
 8000dfe:	f7ff fbeb 	bl	80005d8 <main>
 8000e02:	4770      	bx	lr
 8000e04:	20020000 	.word	0x20020000
 8000e08:	080068d0 	.word	0x080068d0
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000018 	.word	0x20000018
 8000e14:	20000018 	.word	0x20000018
 8000e18:	20012f88 	.word	0x20012f88

08000e1c <ADC_IRQHandler>:
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <HAL_Init+0x40>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e30:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_Init+0x40>)
 8000e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_Init+0x40>)
 8000e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f000 f8d8 	bl	8000ffe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff ff26 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e54:	f7ff fe6c 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023c00 	.word	0x40023c00

08000e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_IncTick+0x20>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x24>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4413      	add	r3, r2
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <HAL_IncTick+0x24>)
 8000e76:	6013      	str	r3, [r2, #0]
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	20000010 	.word	0x20000010
 8000e88:	20012f44 	.word	0x20012f44

08000e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_GetTick+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20012f44 	.word	0x20012f44

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	db0b      	blt.n	8000f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <__NVIC_EnableIRQ+0x38>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	; (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	; (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff4c 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001026:	f7ff ff61 	bl	8000eec <__NVIC_GetPriorityGrouping>
 800102a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	6978      	ldr	r0, [r7, #20]
 8001032:	f7ff ffb1 	bl	8000f98 <NVIC_EncodePriority>
 8001036:	4602      	mov	r2, r0
 8001038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff80 	bl	8000f44 <__NVIC_SetPriority>
}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff54 	bl	8000f08 <__NVIC_EnableIRQ>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	e16b      	b.n	800135c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	4013      	ands	r3, r2
 8001096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	f040 815a 	bne.w	8001356 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d00b      	beq.n	80010c2 <HAL_GPIO_Init+0x5a>
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d007      	beq.n	80010c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b6:	2b11      	cmp	r3, #17
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b12      	cmp	r3, #18
 80010c0:	d130      	bne.n	8001124 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	2203      	movs	r2, #3
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43db      	mvns	r3, r3
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	4013      	ands	r3, r2
 80010d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	68da      	ldr	r2, [r3, #12]
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f8:	2201      	movs	r2, #1
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	f003 0201 	and.w	r2, r3, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	2203      	movs	r2, #3
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0xfc>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b12      	cmp	r3, #18
 8001162:	d123      	bne.n	80011ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	08da      	lsrs	r2, r3, #3
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	3208      	adds	r2, #8
 800116c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	08da      	lsrs	r2, r3, #3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3208      	adds	r2, #8
 80011a6:	69b9      	ldr	r1, [r7, #24]
 80011a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4013      	ands	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0203 	and.w	r2, r3, #3
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	f000 80b4 	beq.w	8001356 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <HAL_GPIO_Init+0x308>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a5e      	ldr	r2, [pc, #376]	; (8001370 <HAL_GPIO_Init+0x308>)
 80011f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b5c      	ldr	r3, [pc, #368]	; (8001370 <HAL_GPIO_Init+0x308>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120a:	4a5a      	ldr	r2, [pc, #360]	; (8001374 <HAL_GPIO_Init+0x30c>)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a51      	ldr	r2, [pc, #324]	; (8001378 <HAL_GPIO_Init+0x310>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d02b      	beq.n	800128e <HAL_GPIO_Init+0x226>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a50      	ldr	r2, [pc, #320]	; (800137c <HAL_GPIO_Init+0x314>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d025      	beq.n	800128a <HAL_GPIO_Init+0x222>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a4f      	ldr	r2, [pc, #316]	; (8001380 <HAL_GPIO_Init+0x318>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d01f      	beq.n	8001286 <HAL_GPIO_Init+0x21e>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a4e      	ldr	r2, [pc, #312]	; (8001384 <HAL_GPIO_Init+0x31c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d019      	beq.n	8001282 <HAL_GPIO_Init+0x21a>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <HAL_GPIO_Init+0x320>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0x216>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4c      	ldr	r2, [pc, #304]	; (800138c <HAL_GPIO_Init+0x324>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00d      	beq.n	800127a <HAL_GPIO_Init+0x212>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a4b      	ldr	r2, [pc, #300]	; (8001390 <HAL_GPIO_Init+0x328>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d007      	beq.n	8001276 <HAL_GPIO_Init+0x20e>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a4a      	ldr	r2, [pc, #296]	; (8001394 <HAL_GPIO_Init+0x32c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_GPIO_Init+0x20a>
 800126e:	2307      	movs	r3, #7
 8001270:	e00e      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001272:	2308      	movs	r3, #8
 8001274:	e00c      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001276:	2306      	movs	r3, #6
 8001278:	e00a      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800127a:	2305      	movs	r3, #5
 800127c:	e008      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800127e:	2304      	movs	r3, #4
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001282:	2303      	movs	r3, #3
 8001284:	e004      	b.n	8001290 <HAL_GPIO_Init+0x228>
 8001286:	2302      	movs	r3, #2
 8001288:	e002      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800128a:	2301      	movs	r3, #1
 800128c:	e000      	b.n	8001290 <HAL_GPIO_Init+0x228>
 800128e:	2300      	movs	r3, #0
 8001290:	69fa      	ldr	r2, [r7, #28]
 8001292:	f002 0203 	and.w	r2, r2, #3
 8001296:	0092      	lsls	r2, r2, #2
 8001298:	4093      	lsls	r3, r2
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a0:	4934      	ldr	r1, [pc, #208]	; (8001374 <HAL_GPIO_Init+0x30c>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ae:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <HAL_GPIO_Init+0x330>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <HAL_GPIO_Init+0x330>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d8:	4b2f      	ldr	r3, [pc, #188]	; (8001398 <HAL_GPIO_Init+0x330>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012fc:	4a26      	ldr	r2, [pc, #152]	; (8001398 <HAL_GPIO_Init+0x330>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001302:	4b25      	ldr	r3, [pc, #148]	; (8001398 <HAL_GPIO_Init+0x330>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	43db      	mvns	r3, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4013      	ands	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d003      	beq.n	8001326 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4313      	orrs	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001326:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <HAL_GPIO_Init+0x330>)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HAL_GPIO_Init+0x330>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001350:	4a11      	ldr	r2, [pc, #68]	; (8001398 <HAL_GPIO_Init+0x330>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3301      	adds	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	2b0f      	cmp	r3, #15
 8001360:	f67f ae90 	bls.w	8001084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001364:	bf00      	nop
 8001366:	3724      	adds	r7, #36	; 0x24
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40021400 	.word	0x40021400
 8001390:	40021800 	.word	0x40021800
 8001394:	40021c00 	.word	0x40021c00
 8001398:	40013c00 	.word	0x40013c00

0800139c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	4013      	ands	r3, r2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e001      	b.n	80013be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013be:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	887b      	ldrh	r3, [r7, #2]
 8001410:	401a      	ands	r2, r3
 8001412:	887b      	ldrh	r3, [r7, #2]
 8001414:	429a      	cmp	r2, r3
 8001416:	d104      	bne.n	8001422 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	041a      	lsls	r2, r3, #16
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001420:	e002      	b.n	8001428 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800143e:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4013      	ands	r3, r2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fad8 	bl	8000a08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e25b      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d075      	beq.n	800156e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001482:	4ba3      	ldr	r3, [pc, #652]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 030c 	and.w	r3, r3, #12
 800148a:	2b04      	cmp	r3, #4
 800148c:	d00c      	beq.n	80014a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148e:	4ba0      	ldr	r3, [pc, #640]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001496:	2b08      	cmp	r3, #8
 8001498:	d112      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b9d      	ldr	r3, [pc, #628]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014a6:	d10b      	bne.n	80014c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	4b99      	ldr	r3, [pc, #612]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d05b      	beq.n	800156c <HAL_RCC_OscConfig+0x108>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d157      	bne.n	800156c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e236      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c8:	d106      	bne.n	80014d8 <HAL_RCC_OscConfig+0x74>
 80014ca:	4b91      	ldr	r3, [pc, #580]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a90      	ldr	r2, [pc, #576]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xb0>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x98>
 80014e2:	4b8b      	ldr	r3, [pc, #556]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a8a      	ldr	r2, [pc, #552]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b88      	ldr	r3, [pc, #544]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a87      	ldr	r2, [pc, #540]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xb0>
 80014fc:	4b84      	ldr	r3, [pc, #528]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a83      	ldr	r2, [pc, #524]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b81      	ldr	r3, [pc, #516]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a80      	ldr	r2, [pc, #512]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fcb6 	bl	8000e8c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fcb2 	bl	8000e8c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	; 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e1fb      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b76      	ldr	r3, [pc, #472]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xc0>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fca2 	bl	8000e8c <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fc9e 	bl	8000e8c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	; 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e1e7      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155e:	4b6c      	ldr	r3, [pc, #432]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0xe8>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d063      	beq.n	8001642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800157a:	4b65      	ldr	r3, [pc, #404]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00b      	beq.n	800159e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001586:	4b62      	ldr	r3, [pc, #392]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800158e:	2b08      	cmp	r3, #8
 8001590:	d11c      	bne.n	80015cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d116      	bne.n	80015cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159e:	4b5c      	ldr	r3, [pc, #368]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d005      	beq.n	80015b6 <HAL_RCC_OscConfig+0x152>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e1bb      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b6:	4b56      	ldr	r3, [pc, #344]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4952      	ldr	r1, [pc, #328]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	e03a      	b.n	8001642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d020      	beq.n	8001616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d4:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <HAL_RCC_OscConfig+0x2b0>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fc57 	bl	8000e8c <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fc53 	bl	8000e8c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e19c      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	4b46      	ldr	r3, [pc, #280]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b43      	ldr	r3, [pc, #268]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4940      	ldr	r1, [pc, #256]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	4313      	orrs	r3, r2
 8001612:	600b      	str	r3, [r1, #0]
 8001614:	e015      	b.n	8001642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <HAL_RCC_OscConfig+0x2b0>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800161c:	f7ff fc36 	bl	8000e8c <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001624:	f7ff fc32 	bl	8000e8c <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e17b      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	4b36      	ldr	r3, [pc, #216]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d030      	beq.n	80016b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d016      	beq.n	8001684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <HAL_RCC_OscConfig+0x2b4>)
 8001658:	2201      	movs	r2, #1
 800165a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165c:	f7ff fc16 	bl	8000e8c <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001664:	f7ff fc12 	bl	8000e8c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e15b      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 8001678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x200>
 8001682:	e015      	b.n	80016b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_RCC_OscConfig+0x2b4>)
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff fbff 	bl	8000e8c <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff fbfb 	bl	8000e8c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e144      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80016a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f000 80a0 	beq.w	80017fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d10f      	bne.n	80016ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a0e      	ldr	r2, [pc, #56]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ea:	2301      	movs	r3, #1
 80016ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_OscConfig+0x2b8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d121      	bne.n	800173e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_RCC_OscConfig+0x2b8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a07      	ldr	r2, [pc, #28]	; (800171c <HAL_RCC_OscConfig+0x2b8>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001706:	f7ff fbc1 	bl	8000e8c <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800170c:	e011      	b.n	8001732 <HAL_RCC_OscConfig+0x2ce>
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	42470000 	.word	0x42470000
 8001718:	42470e80 	.word	0x42470e80
 800171c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001720:	f7ff fbb4 	bl	8000e8c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0fd      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001732:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x4d4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d106      	bne.n	8001754 <HAL_RCC_OscConfig+0x2f0>
 8001746:	4b7d      	ldr	r3, [pc, #500]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a7c      	ldr	r2, [pc, #496]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
 8001752:	e01c      	b.n	800178e <HAL_RCC_OscConfig+0x32a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b05      	cmp	r3, #5
 800175a:	d10c      	bne.n	8001776 <HAL_RCC_OscConfig+0x312>
 800175c:	4b77      	ldr	r3, [pc, #476]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 800175e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001760:	4a76      	ldr	r2, [pc, #472]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	6713      	str	r3, [r2, #112]	; 0x70
 8001768:	4b74      	ldr	r3, [pc, #464]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 800176a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176c:	4a73      	ldr	r2, [pc, #460]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6713      	str	r3, [r2, #112]	; 0x70
 8001774:	e00b      	b.n	800178e <HAL_RCC_OscConfig+0x32a>
 8001776:	4b71      	ldr	r3, [pc, #452]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a70      	ldr	r2, [pc, #448]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 800177c:	f023 0301 	bic.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
 8001782:	4b6e      	ldr	r3, [pc, #440]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 8001784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001786:	4a6d      	ldr	r2, [pc, #436]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 8001788:	f023 0304 	bic.w	r3, r3, #4
 800178c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d015      	beq.n	80017c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff fb79 	bl	8000e8c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff fb75 	bl	8000e8c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e0bc      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b4:	4b61      	ldr	r3, [pc, #388]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 80017b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d0ee      	beq.n	800179e <HAL_RCC_OscConfig+0x33a>
 80017c0:	e014      	b.n	80017ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fb63 	bl	8000e8c <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff fb5f 	bl	8000e8c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0a6      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e0:	4b56      	ldr	r3, [pc, #344]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ee      	bne.n	80017ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d105      	bne.n	80017fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f2:	4b52      	ldr	r3, [pc, #328]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a51      	ldr	r2, [pc, #324]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 80017f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 8092 	beq.w	800192c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d05c      	beq.n	80018ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d141      	bne.n	80018a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800181c:	4b48      	ldr	r3, [pc, #288]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff fb33 	bl	8000e8c <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff fb2f 	bl	8000e8c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e078      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183c:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f0      	bne.n	800182a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69da      	ldr	r2, [r3, #28]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	431a      	orrs	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	019b      	lsls	r3, r3, #6
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	085b      	lsrs	r3, r3, #1
 8001860:	3b01      	subs	r3, #1
 8001862:	041b      	lsls	r3, r3, #16
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	061b      	lsls	r3, r3, #24
 800186c:	4933      	ldr	r1, [pc, #204]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001872:	4b33      	ldr	r3, [pc, #204]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001878:	f7ff fb08 	bl	8000e8c <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff fb04 	bl	8000e8c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e04d      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x41c>
 800189e:	e045      	b.n	800192c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_RCC_OscConfig+0x4dc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff faf1 	bl	8000e8c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff faed 	bl	8000e8c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e036      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x44a>
 80018cc:	e02e      	b.n	800192c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e029      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018da:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_RCC_OscConfig+0x4d8>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d11c      	bne.n	8001928 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d115      	bne.n	8001928 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001902:	4013      	ands	r3, r2
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001908:	4293      	cmp	r3, r2
 800190a:	d10d      	bne.n	8001928 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d106      	bne.n	8001928 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40007000 	.word	0x40007000
 800193c:	40023800 	.word	0x40023800
 8001940:	42470060 	.word	0x42470060

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0cc      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 030f 	and.w	r3, r3, #15
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d90c      	bls.n	8001980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b65      	ldr	r3, [pc, #404]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b8      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494d      	ldr	r1, [pc, #308]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d044      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d119      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e067      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4934      	ldr	r1, [pc, #208]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7ff fa2a 	bl	8000e8c <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff fa26 	bl	8000e8c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e04f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d20c      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4916      	ldr	r1, [pc, #88]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f821 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ace:	4601      	mov	r1, r0
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	4a0a      	ldr	r2, [pc, #40]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	5cd3      	ldrb	r3, [r2, r3]
 8001ade:	fa21 f303 	lsr.w	r3, r1, r3
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f8d8 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	080068a8 	.word	0x080068a8
 8001b08:	20000008 	.word	0x20000008
 8001b0c:	2000000c 	.word	0x2000000c

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b26:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d007      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x32>
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d008      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x38>
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f040 808d 	bne.w	8001c56 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b3c:	4b4b      	ldr	r3, [pc, #300]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b3e:	60bb      	str	r3, [r7, #8]
       break;
 8001b40:	e08c      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b42:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b44:	60bb      	str	r3, [r7, #8]
      break;
 8001b46:	e089      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b48:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b50:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b52:	4b45      	ldr	r3, [pc, #276]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d023      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	f04f 0400 	mov.w	r4, #0
 8001b68:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	ea03 0501 	and.w	r5, r3, r1
 8001b74:	ea04 0602 	and.w	r6, r4, r2
 8001b78:	4a3d      	ldr	r2, [pc, #244]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b7a:	fb02 f106 	mul.w	r1, r2, r6
 8001b7e:	2200      	movs	r2, #0
 8001b80:	fb02 f205 	mul.w	r2, r2, r5
 8001b84:	440a      	add	r2, r1
 8001b86:	493a      	ldr	r1, [pc, #232]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b88:	fba5 0101 	umull	r0, r1, r5, r1
 8001b8c:	1853      	adds	r3, r2, r1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f04f 0400 	mov.w	r4, #0
 8001b96:	461a      	mov	r2, r3
 8001b98:	4623      	mov	r3, r4
 8001b9a:	f7fe fb21 	bl	80001e0 <__aeabi_uldivmod>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	460c      	mov	r4, r1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	e049      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	099b      	lsrs	r3, r3, #6
 8001bac:	f04f 0400 	mov.w	r4, #0
 8001bb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	ea03 0501 	and.w	r5, r3, r1
 8001bbc:	ea04 0602 	and.w	r6, r4, r2
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	4632      	mov	r2, r6
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	f04f 0400 	mov.w	r4, #0
 8001bcc:	0154      	lsls	r4, r2, #5
 8001bce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bd2:	014b      	lsls	r3, r1, #5
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	1b49      	subs	r1, r1, r5
 8001bda:	eb62 0206 	sbc.w	r2, r2, r6
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	f04f 0400 	mov.w	r4, #0
 8001be6:	0194      	lsls	r4, r2, #6
 8001be8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bec:	018b      	lsls	r3, r1, #6
 8001bee:	1a5b      	subs	r3, r3, r1
 8001bf0:	eb64 0402 	sbc.w	r4, r4, r2
 8001bf4:	f04f 0100 	mov.w	r1, #0
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	00e2      	lsls	r2, r4, #3
 8001bfe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c02:	00d9      	lsls	r1, r3, #3
 8001c04:	460b      	mov	r3, r1
 8001c06:	4614      	mov	r4, r2
 8001c08:	195b      	adds	r3, r3, r5
 8001c0a:	eb44 0406 	adc.w	r4, r4, r6
 8001c0e:	f04f 0100 	mov.w	r1, #0
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	02a2      	lsls	r2, r4, #10
 8001c18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c1c:	0299      	lsls	r1, r3, #10
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4614      	mov	r4, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	4621      	mov	r1, r4
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f04f 0400 	mov.w	r4, #0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4623      	mov	r3, r4
 8001c30:	f7fe fad6 	bl	80001e0 <__aeabi_uldivmod>
 8001c34:	4603      	mov	r3, r0
 8001c36:	460c      	mov	r4, r1
 8001c38:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	0c1b      	lsrs	r3, r3, #16
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	3301      	adds	r3, #1
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	60bb      	str	r3, [r7, #8]
      break;
 8001c54:	e002      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c58:	60bb      	str	r3, [r7, #8]
      break;
 8001c5a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	00f42400 	.word	0x00f42400
 8001c70:	017d7840 	.word	0x017d7840

08001c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008

08001c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c90:	f7ff fff0 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001c94:	4601      	mov	r1, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0a9b      	lsrs	r3, r3, #10
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4a03      	ldr	r2, [pc, #12]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	080068b8 	.word	0x080068b8

08001cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cb8:	f7ff ffdc 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001cbc:	4601      	mov	r1, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0b5b      	lsrs	r3, r3, #13
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
 8001ccc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	080068b8 	.word	0x080068b8

08001cdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	220f      	movs	r2, #15
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0203 	and.w	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	08db      	lsrs	r3, r3, #3
 8001d16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_RCC_GetClockConfig+0x60>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 020f 	and.w	r2, r3, #15
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40023c00 	.word	0x40023c00

08001d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e056      	b.n	8001e00 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d106      	bne.n	8001d72 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7fe ff07 	bl	8000b80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	ea42 0103 	orr.w	r1, r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	0c1b      	lsrs	r3, r3, #16
 8001dd0:	f003 0104 	and.w	r1, r3, #4
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_SPI_Transmit+0x22>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e11e      	b.n	8002068 <HAL_SPI_Transmit+0x260>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e32:	f7ff f82b 	bl	8000e8c <HAL_GetTick>
 8001e36:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d002      	beq.n	8001e4e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e4c:	e103      	b.n	8002056 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <HAL_SPI_Transmit+0x52>
 8001e54:	88fb      	ldrh	r3, [r7, #6]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d102      	bne.n	8001e60 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e5e:	e0fa      	b.n	8002056 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2203      	movs	r2, #3
 8001e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	88fa      	ldrh	r2, [r7, #6]
 8001e78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	88fa      	ldrh	r2, [r7, #6]
 8001e7e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ea6:	d107      	bne.n	8001eb8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eb6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec2:	2b40      	cmp	r3, #64	; 0x40
 8001ec4:	d007      	beq.n	8001ed6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ede:	d14b      	bne.n	8001f78 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_SPI_Transmit+0xe6>
 8001ee8:	8afb      	ldrh	r3, [r7, #22]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d13e      	bne.n	8001f6c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	881a      	ldrh	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	1c9a      	adds	r2, r3, #2
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f12:	e02b      	b.n	8001f6c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d112      	bne.n	8001f48 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	881a      	ldrh	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	1c9a      	adds	r2, r3, #2
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	86da      	strh	r2, [r3, #54]	; 0x36
 8001f46:	e011      	b.n	8001f6c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f48:	f7fe ffa0 	bl	8000e8c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d803      	bhi.n	8001f60 <HAL_SPI_Transmit+0x158>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f5e:	d102      	bne.n	8001f66 <HAL_SPI_Transmit+0x15e>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d102      	bne.n	8001f6c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001f6a:	e074      	b.n	8002056 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ce      	bne.n	8001f14 <HAL_SPI_Transmit+0x10c>
 8001f76:	e04c      	b.n	8002012 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <HAL_SPI_Transmit+0x17e>
 8001f80:	8afb      	ldrh	r3, [r7, #22]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d140      	bne.n	8002008 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	330c      	adds	r3, #12
 8001f90:	7812      	ldrb	r2, [r2, #0]
 8001f92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001fac:	e02c      	b.n	8002008 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d113      	bne.n	8001fe4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	330c      	adds	r3, #12
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	1c5a      	adds	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fe2:	e011      	b.n	8002008 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fe4:	f7fe ff52 	bl	8000e8c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d803      	bhi.n	8001ffc <HAL_SPI_Transmit+0x1f4>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ffa:	d102      	bne.n	8002002 <HAL_SPI_Transmit+0x1fa>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d102      	bne.n	8002008 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002006:	e026      	b.n	8002056 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1cd      	bne.n	8001fae <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	6839      	ldr	r1, [r7, #0]
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fba4 	bl	8002764 <SPI_EndRxTxTransaction>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d002      	beq.n	8002028 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2220      	movs	r2, #32
 8002026:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002030:	2300      	movs	r3, #0
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800204a:	2b00      	cmp	r3, #0
 800204c:	d002      	beq.n	8002054 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	77fb      	strb	r3, [r7, #31]
 8002052:	e000      	b.n	8002056 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002054:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002066:	7ffb      	ldrb	r3, [r7, #31]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3720      	adds	r7, #32
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800208c:	d112      	bne.n	80020b4 <HAL_SPI_Receive+0x44>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10e      	bne.n	80020b4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2204      	movs	r2, #4
 800209a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4613      	mov	r3, r2
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 f8e9 	bl	8002282 <HAL_SPI_TransmitReceive>
 80020b0:	4603      	mov	r3, r0
 80020b2:	e0e2      	b.n	800227a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_SPI_Receive+0x52>
 80020be:	2302      	movs	r3, #2
 80020c0:	e0db      	b.n	800227a <HAL_SPI_Receive+0x20a>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020ca:	f7fe fedf 	bl	8000e8c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d002      	beq.n	80020e2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80020dc:	2302      	movs	r3, #2
 80020de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020e0:	e0c2      	b.n	8002268 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_SPI_Receive+0x7e>
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d102      	bne.n	80020f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80020f2:	e0b9      	b.n	8002268 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2204      	movs	r2, #4
 80020f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	88fa      	ldrh	r2, [r7, #6]
 800210c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	88fa      	ldrh	r2, [r7, #6]
 8002112:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800213a:	d107      	bne.n	800214c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800214a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d007      	beq.n	800216a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002168:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d162      	bne.n	8002238 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002172:	e02e      	b.n	80021d2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b01      	cmp	r3, #1
 8002180:	d115      	bne.n	80021ae <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f103 020c 	add.w	r2, r3, #12
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021ac:	e011      	b.n	80021d2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021ae:	f7fe fe6d 	bl	8000e8c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d803      	bhi.n	80021c6 <HAL_SPI_Receive+0x156>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c4:	d102      	bne.n	80021cc <HAL_SPI_Receive+0x15c>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d102      	bne.n	80021d2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80021d0:	e04a      	b.n	8002268 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1cb      	bne.n	8002174 <HAL_SPI_Receive+0x104>
 80021dc:	e031      	b.n	8002242 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d113      	bne.n	8002214 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f6:	b292      	uxth	r2, r2
 80021f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	1c9a      	adds	r2, r3, #2
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b01      	subs	r3, #1
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002212:	e011      	b.n	8002238 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002214:	f7fe fe3a 	bl	8000e8c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d803      	bhi.n	800222c <HAL_SPI_Receive+0x1bc>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800222a:	d102      	bne.n	8002232 <HAL_SPI_Receive+0x1c2>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002236:	e017      	b.n	8002268 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1cd      	bne.n	80021de <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	6839      	ldr	r1, [r7, #0]
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fa27 	bl	800269a <SPI_EndRxTransaction>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	75fb      	strb	r3, [r7, #23]
 8002264:	e000      	b.n	8002268 <HAL_SPI_Receive+0x1f8>
  }

error :
 8002266:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002278:	7dfb      	ldrb	r3, [r7, #23]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b08c      	sub	sp, #48	; 0x30
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
 800228e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002290:	2301      	movs	r3, #1
 8002292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_SPI_TransmitReceive+0x26>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e18a      	b.n	80025be <HAL_SPI_TransmitReceive+0x33c>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022b0:	f7fe fdec 	bl	8000e8c <HAL_GetTick>
 80022b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80022ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d00f      	beq.n	80022f2 <HAL_SPI_TransmitReceive+0x70>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022d8:	d107      	bne.n	80022ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_SPI_TransmitReceive+0x68>
 80022e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d003      	beq.n	80022f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80022ea:	2302      	movs	r3, #2
 80022ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80022f0:	e15b      	b.n	80025aa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_SPI_TransmitReceive+0x82>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_SPI_TransmitReceive+0x82>
 80022fe:	887b      	ldrh	r3, [r7, #2]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d103      	bne.n	800230c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800230a:	e14e      	b.n	80025aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b04      	cmp	r3, #4
 8002316:	d003      	beq.n	8002320 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2205      	movs	r2, #5
 800231c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	887a      	ldrh	r2, [r7, #2]
 8002336:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	887a      	ldrh	r2, [r7, #2]
 8002342:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b40      	cmp	r3, #64	; 0x40
 8002362:	d007      	beq.n	8002374 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002372:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800237c:	d178      	bne.n	8002470 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_SPI_TransmitReceive+0x10a>
 8002386:	8b7b      	ldrh	r3, [r7, #26]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d166      	bne.n	800245a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	881a      	ldrh	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	1c9a      	adds	r2, r3, #2
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023b0:	e053      	b.n	800245a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d11b      	bne.n	80023f8 <HAL_SPI_TransmitReceive+0x176>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <HAL_SPI_TransmitReceive+0x176>
 80023ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d113      	bne.n	80023f8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	881a      	ldrh	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	1c9a      	adds	r2, r3, #2
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d119      	bne.n	800243a <HAL_SPI_TransmitReceive+0x1b8>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b00      	cmp	r3, #0
 800240e:	d014      	beq.n	800243a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	b292      	uxth	r2, r2
 800241c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	1c9a      	adds	r2, r3, #2
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002436:	2301      	movs	r3, #1
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800243a:	f7fe fd27 	bl	8000e8c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002446:	429a      	cmp	r2, r3
 8002448:	d807      	bhi.n	800245a <HAL_SPI_TransmitReceive+0x1d8>
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002450:	d003      	beq.n	800245a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002458:	e0a7      	b.n	80025aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245e:	b29b      	uxth	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1a6      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x130>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1a1      	bne.n	80023b2 <HAL_SPI_TransmitReceive+0x130>
 800246e:	e07c      	b.n	800256a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_SPI_TransmitReceive+0x1fc>
 8002478:	8b7b      	ldrh	r3, [r7, #26]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d16b      	bne.n	8002556 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800249a:	b29b      	uxth	r3, r3
 800249c:	3b01      	subs	r3, #1
 800249e:	b29a      	uxth	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024a4:	e057      	b.n	8002556 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d11c      	bne.n	80024ee <HAL_SPI_TransmitReceive+0x26c>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d017      	beq.n	80024ee <HAL_SPI_TransmitReceive+0x26c>
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d114      	bne.n	80024ee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	330c      	adds	r3, #12
 80024ce:	7812      	ldrb	r2, [r2, #0]
 80024d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d119      	bne.n	8002530 <HAL_SPI_TransmitReceive+0x2ae>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d014      	beq.n	8002530 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800252c:	2301      	movs	r3, #1
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002530:	f7fe fcac 	bl	8000e8c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800253c:	429a      	cmp	r2, r3
 800253e:	d803      	bhi.n	8002548 <HAL_SPI_TransmitReceive+0x2c6>
 8002540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002542:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002546:	d102      	bne.n	800254e <HAL_SPI_TransmitReceive+0x2cc>
 8002548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254a:	2b00      	cmp	r3, #0
 800254c:	d103      	bne.n	8002556 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002554:	e029      	b.n	80025aa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1a2      	bne.n	80024a6 <HAL_SPI_TransmitReceive+0x224>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d19d      	bne.n	80024a6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800256a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 f8f8 	bl	8002764 <SPI_EndRxTxTransaction>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d006      	beq.n	8002588 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002586:	e010      	b.n	80025aa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10b      	bne.n	80025a8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	e000      	b.n	80025aa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80025a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3730      	adds	r7, #48	; 0x30
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b084      	sub	sp, #16
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	603b      	str	r3, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025d6:	e04c      	b.n	8002672 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025de:	d048      	beq.n	8002672 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80025e0:	f7fe fc54 	bl	8000e8c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d902      	bls.n	80025f6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d13d      	bne.n	8002672 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800260e:	d111      	bne.n	8002634 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002618:	d004      	beq.n	8002624 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002622:	d107      	bne.n	8002634 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263c:	d10f      	bne.n	800265e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800265c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e00f      	b.n	8002692 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	4013      	ands	r3, r2
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	429a      	cmp	r2, r3
 8002680:	bf0c      	ite	eq
 8002682:	2301      	moveq	r3, #1
 8002684:	2300      	movne	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	429a      	cmp	r2, r3
 800268e:	d1a3      	bne.n	80025d8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3710      	adds	r7, #16
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af02      	add	r7, sp, #8
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026ae:	d111      	bne.n	80026d4 <SPI_EndRxTransaction+0x3a>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026b8:	d004      	beq.n	80026c4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c2:	d107      	bne.n	80026d4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026d2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026dc:	d12a      	bne.n	8002734 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d012      	beq.n	800270e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	2180      	movs	r1, #128	; 0x80
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff ff67 	bl	80025c6 <SPI_WaitFlagStateUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d02d      	beq.n	800275a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f043 0220 	orr.w	r2, r3, #32
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e026      	b.n	800275c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2200      	movs	r2, #0
 8002716:	2101      	movs	r1, #1
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff ff54 	bl	80025c6 <SPI_WaitFlagStateUntilTimeout>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d01a      	beq.n	800275a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e013      	b.n	800275c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	2200      	movs	r2, #0
 800273c:	2101      	movs	r1, #1
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f7ff ff41 	bl	80025c6 <SPI_WaitFlagStateUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e000      	b.n	800275c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af02      	add	r7, sp, #8
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <SPI_EndRxTxTransaction+0x7c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1b      	ldr	r2, [pc, #108]	; (80027e4 <SPI_EndRxTxTransaction+0x80>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0d5b      	lsrs	r3, r3, #21
 800277c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002780:	fb02 f303 	mul.w	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800278e:	d112      	bne.n	80027b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2200      	movs	r2, #0
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff ff13 	bl	80025c6 <SPI_WaitFlagStateUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f043 0220 	orr.w	r2, r3, #32
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e00f      	b.n	80027d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	3b01      	subs	r3, #1
 80027c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d0f2      	beq.n	80027b6 <SPI_EndRxTxTransaction+0x52>
 80027d0:	e000      	b.n	80027d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80027d2:	bf00      	nop
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	20000008 	.word	0x20000008
 80027e4:	165e9f81 	.word	0x165e9f81

080027e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e01d      	b.n	8002836 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f815 	bl	800283e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3304      	adds	r3, #4
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f000 f968 	bl	8002afc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f042 0201 	orr.w	r2, r2, #1
 8002868:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2b06      	cmp	r3, #6
 800287a:	d007      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d122      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d11b      	bne.n	80028f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f06f 0202 	mvn.w	r2, #2
 80028c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f8ee 	bl	8002abe <HAL_TIM_IC_CaptureCallback>
 80028e2:	e005      	b.n	80028f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f8e0 	bl	8002aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8f1 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b04      	cmp	r3, #4
 8002902:	d122      	bne.n	800294a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d11b      	bne.n	800294a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f06f 0204 	mvn.w	r2, #4
 800291a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f8c4 	bl	8002abe <HAL_TIM_IC_CaptureCallback>
 8002936:	e005      	b.n	8002944 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f000 f8b6 	bl	8002aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8c7 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b08      	cmp	r3, #8
 8002956:	d122      	bne.n	800299e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d11b      	bne.n	800299e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f06f 0208 	mvn.w	r2, #8
 800296e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2204      	movs	r2, #4
 8002974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f89a 	bl	8002abe <HAL_TIM_IC_CaptureCallback>
 800298a:	e005      	b.n	8002998 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f88c 	bl	8002aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f89d 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d122      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b10      	cmp	r3, #16
 80029b8:	d11b      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0210 	mvn.w	r2, #16
 80029c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2208      	movs	r2, #8
 80029c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f870 	bl	8002abe <HAL_TIM_IC_CaptureCallback>
 80029de:	e005      	b.n	80029ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f862 	bl	8002aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f873 	bl	8002ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d10e      	bne.n	8002a1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f06f 0201 	mvn.w	r2, #1
 8002a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fe f873 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d10e      	bne.n	8002a4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	2b80      	cmp	r3, #128	; 0x80
 8002a38:	d107      	bne.n	8002a4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f903 	bl	8002c50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a54:	2b40      	cmp	r3, #64	; 0x40
 8002a56:	d10e      	bne.n	8002a76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d107      	bne.n	8002a76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f838 	bl	8002ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d10e      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b20      	cmp	r3, #32
 8002a90:	d107      	bne.n	8002aa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f06f 0220 	mvn.w	r2, #32
 8002a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f8cd 	bl	8002c3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ac6:	bf00      	nop
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
	...

08002afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a40      	ldr	r2, [pc, #256]	; (8002c10 <TIM_Base_SetConfig+0x114>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d013      	beq.n	8002b3c <TIM_Base_SetConfig+0x40>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1a:	d00f      	beq.n	8002b3c <TIM_Base_SetConfig+0x40>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a3d      	ldr	r2, [pc, #244]	; (8002c14 <TIM_Base_SetConfig+0x118>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00b      	beq.n	8002b3c <TIM_Base_SetConfig+0x40>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a3c      	ldr	r2, [pc, #240]	; (8002c18 <TIM_Base_SetConfig+0x11c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <TIM_Base_SetConfig+0x40>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a3b      	ldr	r2, [pc, #236]	; (8002c1c <TIM_Base_SetConfig+0x120>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d003      	beq.n	8002b3c <TIM_Base_SetConfig+0x40>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a3a      	ldr	r2, [pc, #232]	; (8002c20 <TIM_Base_SetConfig+0x124>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d108      	bne.n	8002b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a2f      	ldr	r2, [pc, #188]	; (8002c10 <TIM_Base_SetConfig+0x114>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02b      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d027      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a2c      	ldr	r2, [pc, #176]	; (8002c14 <TIM_Base_SetConfig+0x118>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d023      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a2b      	ldr	r2, [pc, #172]	; (8002c18 <TIM_Base_SetConfig+0x11c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01f      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a2a      	ldr	r2, [pc, #168]	; (8002c1c <TIM_Base_SetConfig+0x120>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d01b      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a29      	ldr	r2, [pc, #164]	; (8002c20 <TIM_Base_SetConfig+0x124>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d017      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a28      	ldr	r2, [pc, #160]	; (8002c24 <TIM_Base_SetConfig+0x128>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a27      	ldr	r2, [pc, #156]	; (8002c28 <TIM_Base_SetConfig+0x12c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00f      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <TIM_Base_SetConfig+0x130>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00b      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a25      	ldr	r2, [pc, #148]	; (8002c30 <TIM_Base_SetConfig+0x134>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a24      	ldr	r2, [pc, #144]	; (8002c34 <TIM_Base_SetConfig+0x138>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d003      	beq.n	8002bae <TIM_Base_SetConfig+0xb2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a23      	ldr	r2, [pc, #140]	; (8002c38 <TIM_Base_SetConfig+0x13c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d108      	bne.n	8002bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <TIM_Base_SetConfig+0x114>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <TIM_Base_SetConfig+0xf8>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a0c      	ldr	r2, [pc, #48]	; (8002c20 <TIM_Base_SetConfig+0x124>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d103      	bne.n	8002bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	615a      	str	r2, [r3, #20]
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40010000 	.word	0x40010000
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40000800 	.word	0x40000800
 8002c1c:	40000c00 	.word	0x40000c00
 8002c20:	40010400 	.word	0x40010400
 8002c24:	40014000 	.word	0x40014000
 8002c28:	40014400 	.word	0x40014400
 8002c2c:	40014800 	.word	0x40014800
 8002c30:	40001800 	.word	0x40001800
 8002c34:	40001c00 	.word	0x40001c00
 8002c38:	40002000 	.word	0x40002000

08002c3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e03f      	b.n	8002cf6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7fd ffc0 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2224      	movs	r2, #36	; 0x24
 8002c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 f90b 	bl	8002ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b088      	sub	sp, #32
 8002d02:	af02      	add	r7, sp, #8
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	f040 8083 	bne.w	8002e26 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_UART_Transmit+0x2e>
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e07b      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Transmit+0x40>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e074      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2221      	movs	r2, #33	; 0x21
 8002d50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d54:	f7fe f89a 	bl	8000e8c <HAL_GetTick>
 8002d58:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	88fa      	ldrh	r2, [r7, #6]
 8002d5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	88fa      	ldrh	r2, [r7, #6]
 8002d64:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002d6e:	e042      	b.n	8002df6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d86:	d122      	bne.n	8002dce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2180      	movs	r1, #128	; 0x80
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f84c 	bl	8002e30 <UART_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e042      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d103      	bne.n	8002dc6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	e017      	b.n	8002df6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	e013      	b.n	8002df6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f829 	bl	8002e30 <UART_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e01f      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	1c5a      	adds	r2, r3, #1
 8002dec:	60ba      	str	r2, [r7, #8]
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1b7      	bne.n	8002d70 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2200      	movs	r2, #0
 8002e08:	2140      	movs	r1, #64	; 0x40
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f810 	bl	8002e30 <UART_WaitOnFlagUntilTimeout>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e006      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002e26:	2302      	movs	r3, #2
  }
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e40:	e02c      	b.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e48:	d028      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e50:	f7fe f81c 	bl	8000e8c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d21d      	bcs.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e6e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695a      	ldr	r2, [r3, #20]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2220      	movs	r2, #32
 8002e84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e00f      	b.n	8002ebc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d0c3      	beq.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f06:	f023 030c 	bic.w	r3, r3, #12
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	68f9      	ldr	r1, [r7, #12]
 8002f10:	430b      	orrs	r3, r1
 8002f12:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699a      	ldr	r2, [r3, #24]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	430a      	orrs	r2, r1
 8002f28:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f32:	f040 818b 	bne.w	800324c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4ac1      	ldr	r2, [pc, #772]	; (8003240 <UART_SetConfig+0x37c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d005      	beq.n	8002f4c <UART_SetConfig+0x88>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4abf      	ldr	r2, [pc, #764]	; (8003244 <UART_SetConfig+0x380>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	f040 80bd 	bne.w	80030c6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f4c:	f7fe feb2 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8002f50:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	461d      	mov	r5, r3
 8002f56:	f04f 0600 	mov.w	r6, #0
 8002f5a:	46a8      	mov	r8, r5
 8002f5c:	46b1      	mov	r9, r6
 8002f5e:	eb18 0308 	adds.w	r3, r8, r8
 8002f62:	eb49 0409 	adc.w	r4, r9, r9
 8002f66:	4698      	mov	r8, r3
 8002f68:	46a1      	mov	r9, r4
 8002f6a:	eb18 0805 	adds.w	r8, r8, r5
 8002f6e:	eb49 0906 	adc.w	r9, r9, r6
 8002f72:	f04f 0100 	mov.w	r1, #0
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f7e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f82:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f86:	4688      	mov	r8, r1
 8002f88:	4691      	mov	r9, r2
 8002f8a:	eb18 0005 	adds.w	r0, r8, r5
 8002f8e:	eb49 0106 	adc.w	r1, r9, r6
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	461d      	mov	r5, r3
 8002f98:	f04f 0600 	mov.w	r6, #0
 8002f9c:	196b      	adds	r3, r5, r5
 8002f9e:	eb46 0406 	adc.w	r4, r6, r6
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	f7fd f91b 	bl	80001e0 <__aeabi_uldivmod>
 8002faa:	4603      	mov	r3, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4ba5      	ldr	r3, [pc, #660]	; (8003248 <UART_SetConfig+0x384>)
 8002fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	461d      	mov	r5, r3
 8002fc0:	f04f 0600 	mov.w	r6, #0
 8002fc4:	46a9      	mov	r9, r5
 8002fc6:	46b2      	mov	sl, r6
 8002fc8:	eb19 0309 	adds.w	r3, r9, r9
 8002fcc:	eb4a 040a 	adc.w	r4, sl, sl
 8002fd0:	4699      	mov	r9, r3
 8002fd2:	46a2      	mov	sl, r4
 8002fd4:	eb19 0905 	adds.w	r9, r9, r5
 8002fd8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fdc:	f04f 0100 	mov.w	r1, #0
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fe8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ff0:	4689      	mov	r9, r1
 8002ff2:	4692      	mov	sl, r2
 8002ff4:	eb19 0005 	adds.w	r0, r9, r5
 8002ff8:	eb4a 0106 	adc.w	r1, sl, r6
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	461d      	mov	r5, r3
 8003002:	f04f 0600 	mov.w	r6, #0
 8003006:	196b      	adds	r3, r5, r5
 8003008:	eb46 0406 	adc.w	r4, r6, r6
 800300c:	461a      	mov	r2, r3
 800300e:	4623      	mov	r3, r4
 8003010:	f7fd f8e6 	bl	80001e0 <__aeabi_uldivmod>
 8003014:	4603      	mov	r3, r0
 8003016:	460c      	mov	r4, r1
 8003018:	461a      	mov	r2, r3
 800301a:	4b8b      	ldr	r3, [pc, #556]	; (8003248 <UART_SetConfig+0x384>)
 800301c:	fba3 1302 	umull	r1, r3, r3, r2
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	2164      	movs	r1, #100	; 0x64
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	3332      	adds	r3, #50	; 0x32
 800302e:	4a86      	ldr	r2, [pc, #536]	; (8003248 <UART_SetConfig+0x384>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800303c:	4498      	add	r8, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	461d      	mov	r5, r3
 8003042:	f04f 0600 	mov.w	r6, #0
 8003046:	46a9      	mov	r9, r5
 8003048:	46b2      	mov	sl, r6
 800304a:	eb19 0309 	adds.w	r3, r9, r9
 800304e:	eb4a 040a 	adc.w	r4, sl, sl
 8003052:	4699      	mov	r9, r3
 8003054:	46a2      	mov	sl, r4
 8003056:	eb19 0905 	adds.w	r9, r9, r5
 800305a:	eb4a 0a06 	adc.w	sl, sl, r6
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800306a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800306e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003072:	4689      	mov	r9, r1
 8003074:	4692      	mov	sl, r2
 8003076:	eb19 0005 	adds.w	r0, r9, r5
 800307a:	eb4a 0106 	adc.w	r1, sl, r6
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	461d      	mov	r5, r3
 8003084:	f04f 0600 	mov.w	r6, #0
 8003088:	196b      	adds	r3, r5, r5
 800308a:	eb46 0406 	adc.w	r4, r6, r6
 800308e:	461a      	mov	r2, r3
 8003090:	4623      	mov	r3, r4
 8003092:	f7fd f8a5 	bl	80001e0 <__aeabi_uldivmod>
 8003096:	4603      	mov	r3, r0
 8003098:	460c      	mov	r4, r1
 800309a:	461a      	mov	r2, r3
 800309c:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <UART_SetConfig+0x384>)
 800309e:	fba3 1302 	umull	r1, r3, r3, r2
 80030a2:	095b      	lsrs	r3, r3, #5
 80030a4:	2164      	movs	r1, #100	; 0x64
 80030a6:	fb01 f303 	mul.w	r3, r1, r3
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	3332      	adds	r3, #50	; 0x32
 80030b0:	4a65      	ldr	r2, [pc, #404]	; (8003248 <UART_SetConfig+0x384>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	f003 0207 	and.w	r2, r3, #7
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4442      	add	r2, r8
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	e26f      	b.n	80035a6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030c6:	f7fe fde1 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 80030ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	461d      	mov	r5, r3
 80030d0:	f04f 0600 	mov.w	r6, #0
 80030d4:	46a8      	mov	r8, r5
 80030d6:	46b1      	mov	r9, r6
 80030d8:	eb18 0308 	adds.w	r3, r8, r8
 80030dc:	eb49 0409 	adc.w	r4, r9, r9
 80030e0:	4698      	mov	r8, r3
 80030e2:	46a1      	mov	r9, r4
 80030e4:	eb18 0805 	adds.w	r8, r8, r5
 80030e8:	eb49 0906 	adc.w	r9, r9, r6
 80030ec:	f04f 0100 	mov.w	r1, #0
 80030f0:	f04f 0200 	mov.w	r2, #0
 80030f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003100:	4688      	mov	r8, r1
 8003102:	4691      	mov	r9, r2
 8003104:	eb18 0005 	adds.w	r0, r8, r5
 8003108:	eb49 0106 	adc.w	r1, r9, r6
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	461d      	mov	r5, r3
 8003112:	f04f 0600 	mov.w	r6, #0
 8003116:	196b      	adds	r3, r5, r5
 8003118:	eb46 0406 	adc.w	r4, r6, r6
 800311c:	461a      	mov	r2, r3
 800311e:	4623      	mov	r3, r4
 8003120:	f7fd f85e 	bl	80001e0 <__aeabi_uldivmod>
 8003124:	4603      	mov	r3, r0
 8003126:	460c      	mov	r4, r1
 8003128:	461a      	mov	r2, r3
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <UART_SetConfig+0x384>)
 800312c:	fba3 2302 	umull	r2, r3, r3, r2
 8003130:	095b      	lsrs	r3, r3, #5
 8003132:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	461d      	mov	r5, r3
 800313a:	f04f 0600 	mov.w	r6, #0
 800313e:	46a9      	mov	r9, r5
 8003140:	46b2      	mov	sl, r6
 8003142:	eb19 0309 	adds.w	r3, r9, r9
 8003146:	eb4a 040a 	adc.w	r4, sl, sl
 800314a:	4699      	mov	r9, r3
 800314c:	46a2      	mov	sl, r4
 800314e:	eb19 0905 	adds.w	r9, r9, r5
 8003152:	eb4a 0a06 	adc.w	sl, sl, r6
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003162:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003166:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800316a:	4689      	mov	r9, r1
 800316c:	4692      	mov	sl, r2
 800316e:	eb19 0005 	adds.w	r0, r9, r5
 8003172:	eb4a 0106 	adc.w	r1, sl, r6
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	461d      	mov	r5, r3
 800317c:	f04f 0600 	mov.w	r6, #0
 8003180:	196b      	adds	r3, r5, r5
 8003182:	eb46 0406 	adc.w	r4, r6, r6
 8003186:	461a      	mov	r2, r3
 8003188:	4623      	mov	r3, r4
 800318a:	f7fd f829 	bl	80001e0 <__aeabi_uldivmod>
 800318e:	4603      	mov	r3, r0
 8003190:	460c      	mov	r4, r1
 8003192:	461a      	mov	r2, r3
 8003194:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <UART_SetConfig+0x384>)
 8003196:	fba3 1302 	umull	r1, r3, r3, r2
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2164      	movs	r1, #100	; 0x64
 800319e:	fb01 f303 	mul.w	r3, r1, r3
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	3332      	adds	r3, #50	; 0x32
 80031a8:	4a27      	ldr	r2, [pc, #156]	; (8003248 <UART_SetConfig+0x384>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031b6:	4498      	add	r8, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	461d      	mov	r5, r3
 80031bc:	f04f 0600 	mov.w	r6, #0
 80031c0:	46a9      	mov	r9, r5
 80031c2:	46b2      	mov	sl, r6
 80031c4:	eb19 0309 	adds.w	r3, r9, r9
 80031c8:	eb4a 040a 	adc.w	r4, sl, sl
 80031cc:	4699      	mov	r9, r3
 80031ce:	46a2      	mov	sl, r4
 80031d0:	eb19 0905 	adds.w	r9, r9, r5
 80031d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80031d8:	f04f 0100 	mov.w	r1, #0
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031ec:	4689      	mov	r9, r1
 80031ee:	4692      	mov	sl, r2
 80031f0:	eb19 0005 	adds.w	r0, r9, r5
 80031f4:	eb4a 0106 	adc.w	r1, sl, r6
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	461d      	mov	r5, r3
 80031fe:	f04f 0600 	mov.w	r6, #0
 8003202:	196b      	adds	r3, r5, r5
 8003204:	eb46 0406 	adc.w	r4, r6, r6
 8003208:	461a      	mov	r2, r3
 800320a:	4623      	mov	r3, r4
 800320c:	f7fc ffe8 	bl	80001e0 <__aeabi_uldivmod>
 8003210:	4603      	mov	r3, r0
 8003212:	460c      	mov	r4, r1
 8003214:	461a      	mov	r2, r3
 8003216:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <UART_SetConfig+0x384>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2164      	movs	r1, #100	; 0x64
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3332      	adds	r3, #50	; 0x32
 800322a:	4a07      	ldr	r2, [pc, #28]	; (8003248 <UART_SetConfig+0x384>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	f003 0207 	and.w	r2, r3, #7
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4442      	add	r2, r8
 800323c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800323e:	e1b2      	b.n	80035a6 <UART_SetConfig+0x6e2>
 8003240:	40011000 	.word	0x40011000
 8003244:	40011400 	.word	0x40011400
 8003248:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4ad7      	ldr	r2, [pc, #860]	; (80035b0 <UART_SetConfig+0x6ec>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d005      	beq.n	8003262 <UART_SetConfig+0x39e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4ad6      	ldr	r2, [pc, #856]	; (80035b4 <UART_SetConfig+0x6f0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	f040 80d1 	bne.w	8003404 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003262:	f7fe fd27 	bl	8001cb4 <HAL_RCC_GetPCLK2Freq>
 8003266:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	469a      	mov	sl, r3
 800326c:	f04f 0b00 	mov.w	fp, #0
 8003270:	46d0      	mov	r8, sl
 8003272:	46d9      	mov	r9, fp
 8003274:	eb18 0308 	adds.w	r3, r8, r8
 8003278:	eb49 0409 	adc.w	r4, r9, r9
 800327c:	4698      	mov	r8, r3
 800327e:	46a1      	mov	r9, r4
 8003280:	eb18 080a 	adds.w	r8, r8, sl
 8003284:	eb49 090b 	adc.w	r9, r9, fp
 8003288:	f04f 0100 	mov.w	r1, #0
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003294:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003298:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800329c:	4688      	mov	r8, r1
 800329e:	4691      	mov	r9, r2
 80032a0:	eb1a 0508 	adds.w	r5, sl, r8
 80032a4:	eb4b 0609 	adc.w	r6, fp, r9
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4619      	mov	r1, r3
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	f04f 0400 	mov.w	r4, #0
 80032ba:	0094      	lsls	r4, r2, #2
 80032bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032c0:	008b      	lsls	r3, r1, #2
 80032c2:	461a      	mov	r2, r3
 80032c4:	4623      	mov	r3, r4
 80032c6:	4628      	mov	r0, r5
 80032c8:	4631      	mov	r1, r6
 80032ca:	f7fc ff89 	bl	80001e0 <__aeabi_uldivmod>
 80032ce:	4603      	mov	r3, r0
 80032d0:	460c      	mov	r4, r1
 80032d2:	461a      	mov	r2, r3
 80032d4:	4bb8      	ldr	r3, [pc, #736]	; (80035b8 <UART_SetConfig+0x6f4>)
 80032d6:	fba3 2302 	umull	r2, r3, r3, r2
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	469b      	mov	fp, r3
 80032e4:	f04f 0c00 	mov.w	ip, #0
 80032e8:	46d9      	mov	r9, fp
 80032ea:	46e2      	mov	sl, ip
 80032ec:	eb19 0309 	adds.w	r3, r9, r9
 80032f0:	eb4a 040a 	adc.w	r4, sl, sl
 80032f4:	4699      	mov	r9, r3
 80032f6:	46a2      	mov	sl, r4
 80032f8:	eb19 090b 	adds.w	r9, r9, fp
 80032fc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800330c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003310:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003314:	4689      	mov	r9, r1
 8003316:	4692      	mov	sl, r2
 8003318:	eb1b 0509 	adds.w	r5, fp, r9
 800331c:	eb4c 060a 	adc.w	r6, ip, sl
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4619      	mov	r1, r3
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	f04f 0400 	mov.w	r4, #0
 8003332:	0094      	lsls	r4, r2, #2
 8003334:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003338:	008b      	lsls	r3, r1, #2
 800333a:	461a      	mov	r2, r3
 800333c:	4623      	mov	r3, r4
 800333e:	4628      	mov	r0, r5
 8003340:	4631      	mov	r1, r6
 8003342:	f7fc ff4d 	bl	80001e0 <__aeabi_uldivmod>
 8003346:	4603      	mov	r3, r0
 8003348:	460c      	mov	r4, r1
 800334a:	461a      	mov	r2, r3
 800334c:	4b9a      	ldr	r3, [pc, #616]	; (80035b8 <UART_SetConfig+0x6f4>)
 800334e:	fba3 1302 	umull	r1, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2164      	movs	r1, #100	; 0x64
 8003356:	fb01 f303 	mul.w	r3, r1, r3
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	3332      	adds	r3, #50	; 0x32
 8003360:	4a95      	ldr	r2, [pc, #596]	; (80035b8 <UART_SetConfig+0x6f4>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800336c:	4498      	add	r8, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	469b      	mov	fp, r3
 8003372:	f04f 0c00 	mov.w	ip, #0
 8003376:	46d9      	mov	r9, fp
 8003378:	46e2      	mov	sl, ip
 800337a:	eb19 0309 	adds.w	r3, r9, r9
 800337e:	eb4a 040a 	adc.w	r4, sl, sl
 8003382:	4699      	mov	r9, r3
 8003384:	46a2      	mov	sl, r4
 8003386:	eb19 090b 	adds.w	r9, r9, fp
 800338a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800339a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800339e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033a2:	4689      	mov	r9, r1
 80033a4:	4692      	mov	sl, r2
 80033a6:	eb1b 0509 	adds.w	r5, fp, r9
 80033aa:	eb4c 060a 	adc.w	r6, ip, sl
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	f04f 0400 	mov.w	r4, #0
 80033c0:	0094      	lsls	r4, r2, #2
 80033c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033c6:	008b      	lsls	r3, r1, #2
 80033c8:	461a      	mov	r2, r3
 80033ca:	4623      	mov	r3, r4
 80033cc:	4628      	mov	r0, r5
 80033ce:	4631      	mov	r1, r6
 80033d0:	f7fc ff06 	bl	80001e0 <__aeabi_uldivmod>
 80033d4:	4603      	mov	r3, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	461a      	mov	r2, r3
 80033da:	4b77      	ldr	r3, [pc, #476]	; (80035b8 <UART_SetConfig+0x6f4>)
 80033dc:	fba3 1302 	umull	r1, r3, r3, r2
 80033e0:	095b      	lsrs	r3, r3, #5
 80033e2:	2164      	movs	r1, #100	; 0x64
 80033e4:	fb01 f303 	mul.w	r3, r1, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	3332      	adds	r3, #50	; 0x32
 80033ee:	4a72      	ldr	r2, [pc, #456]	; (80035b8 <UART_SetConfig+0x6f4>)
 80033f0:	fba2 2303 	umull	r2, r3, r2, r3
 80033f4:	095b      	lsrs	r3, r3, #5
 80033f6:	f003 020f 	and.w	r2, r3, #15
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4442      	add	r2, r8
 8003400:	609a      	str	r2, [r3, #8]
 8003402:	e0d0      	b.n	80035a6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003404:	f7fe fc42 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003408:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	469a      	mov	sl, r3
 800340e:	f04f 0b00 	mov.w	fp, #0
 8003412:	46d0      	mov	r8, sl
 8003414:	46d9      	mov	r9, fp
 8003416:	eb18 0308 	adds.w	r3, r8, r8
 800341a:	eb49 0409 	adc.w	r4, r9, r9
 800341e:	4698      	mov	r8, r3
 8003420:	46a1      	mov	r9, r4
 8003422:	eb18 080a 	adds.w	r8, r8, sl
 8003426:	eb49 090b 	adc.w	r9, r9, fp
 800342a:	f04f 0100 	mov.w	r1, #0
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003436:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800343a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800343e:	4688      	mov	r8, r1
 8003440:	4691      	mov	r9, r2
 8003442:	eb1a 0508 	adds.w	r5, sl, r8
 8003446:	eb4b 0609 	adc.w	r6, fp, r9
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	4619      	mov	r1, r3
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	f04f 0400 	mov.w	r4, #0
 800345c:	0094      	lsls	r4, r2, #2
 800345e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003462:	008b      	lsls	r3, r1, #2
 8003464:	461a      	mov	r2, r3
 8003466:	4623      	mov	r3, r4
 8003468:	4628      	mov	r0, r5
 800346a:	4631      	mov	r1, r6
 800346c:	f7fc feb8 	bl	80001e0 <__aeabi_uldivmod>
 8003470:	4603      	mov	r3, r0
 8003472:	460c      	mov	r4, r1
 8003474:	461a      	mov	r2, r3
 8003476:	4b50      	ldr	r3, [pc, #320]	; (80035b8 <UART_SetConfig+0x6f4>)
 8003478:	fba3 2302 	umull	r2, r3, r3, r2
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	469b      	mov	fp, r3
 8003486:	f04f 0c00 	mov.w	ip, #0
 800348a:	46d9      	mov	r9, fp
 800348c:	46e2      	mov	sl, ip
 800348e:	eb19 0309 	adds.w	r3, r9, r9
 8003492:	eb4a 040a 	adc.w	r4, sl, sl
 8003496:	4699      	mov	r9, r3
 8003498:	46a2      	mov	sl, r4
 800349a:	eb19 090b 	adds.w	r9, r9, fp
 800349e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034a2:	f04f 0100 	mov.w	r1, #0
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034b6:	4689      	mov	r9, r1
 80034b8:	4692      	mov	sl, r2
 80034ba:	eb1b 0509 	adds.w	r5, fp, r9
 80034be:	eb4c 060a 	adc.w	r6, ip, sl
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4619      	mov	r1, r3
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	f04f 0400 	mov.w	r4, #0
 80034d4:	0094      	lsls	r4, r2, #2
 80034d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034da:	008b      	lsls	r3, r1, #2
 80034dc:	461a      	mov	r2, r3
 80034de:	4623      	mov	r3, r4
 80034e0:	4628      	mov	r0, r5
 80034e2:	4631      	mov	r1, r6
 80034e4:	f7fc fe7c 	bl	80001e0 <__aeabi_uldivmod>
 80034e8:	4603      	mov	r3, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b32      	ldr	r3, [pc, #200]	; (80035b8 <UART_SetConfig+0x6f4>)
 80034f0:	fba3 1302 	umull	r1, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	2164      	movs	r1, #100	; 0x64
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	3332      	adds	r3, #50	; 0x32
 8003502:	4a2d      	ldr	r2, [pc, #180]	; (80035b8 <UART_SetConfig+0x6f4>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800350e:	4498      	add	r8, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	469b      	mov	fp, r3
 8003514:	f04f 0c00 	mov.w	ip, #0
 8003518:	46d9      	mov	r9, fp
 800351a:	46e2      	mov	sl, ip
 800351c:	eb19 0309 	adds.w	r3, r9, r9
 8003520:	eb4a 040a 	adc.w	r4, sl, sl
 8003524:	4699      	mov	r9, r3
 8003526:	46a2      	mov	sl, r4
 8003528:	eb19 090b 	adds.w	r9, r9, fp
 800352c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003530:	f04f 0100 	mov.w	r1, #0
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800353c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003540:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003544:	4689      	mov	r9, r1
 8003546:	4692      	mov	sl, r2
 8003548:	eb1b 0509 	adds.w	r5, fp, r9
 800354c:	eb4c 060a 	adc.w	r6, ip, sl
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4619      	mov	r1, r3
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	f04f 0400 	mov.w	r4, #0
 8003562:	0094      	lsls	r4, r2, #2
 8003564:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003568:	008b      	lsls	r3, r1, #2
 800356a:	461a      	mov	r2, r3
 800356c:	4623      	mov	r3, r4
 800356e:	4628      	mov	r0, r5
 8003570:	4631      	mov	r1, r6
 8003572:	f7fc fe35 	bl	80001e0 <__aeabi_uldivmod>
 8003576:	4603      	mov	r3, r0
 8003578:	460c      	mov	r4, r1
 800357a:	461a      	mov	r2, r3
 800357c:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <UART_SetConfig+0x6f4>)
 800357e:	fba3 1302 	umull	r1, r3, r3, r2
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	2164      	movs	r1, #100	; 0x64
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	3332      	adds	r3, #50	; 0x32
 8003590:	4a09      	ldr	r2, [pc, #36]	; (80035b8 <UART_SetConfig+0x6f4>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	f003 020f 	and.w	r2, r3, #15
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4442      	add	r2, r8
 80035a2:	609a      	str	r2, [r3, #8]
}
 80035a4:	e7ff      	b.n	80035a6 <UART_SetConfig+0x6e2>
 80035a6:	bf00      	nop
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b0:	40011000 	.word	0x40011000
 80035b4:	40011400 	.word	0x40011400
 80035b8:	51eb851f 	.word	0x51eb851f

080035bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f103 0208 	add.w	r2, r3, #8
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f103 0208 	add.w	r2, r3, #8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f103 0208 	add.w	r2, r3, #8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003616:	b480      	push	{r7}
 8003618:	b085      	sub	sp, #20
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	601a      	str	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800365e:	b480      	push	{r7}
 8003660:	b085      	sub	sp, #20
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003674:	d103      	bne.n	800367e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	60fb      	str	r3, [r7, #12]
 800367c:	e00c      	b.n	8003698 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3308      	adds	r3, #8
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e002      	b.n	800368c <vListInsert+0x2e>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	429a      	cmp	r2, r3
 8003696:	d2f6      	bcs.n	8003686 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	601a      	str	r2, [r3, #0]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	691b      	ldr	r3, [r3, #16]
 80036dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6892      	ldr	r2, [r2, #8]
 80036e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6852      	ldr	r2, [r2, #4]
 80036f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d103      	bne.n	8003704 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	1e5a      	subs	r2, r3, #1
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d109      	bne.n	800374c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	e7fe      	b.n	800374a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800374c:	f002 fd46 	bl	80061dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003758:	68f9      	ldr	r1, [r7, #12]
 800375a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	441a      	add	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377c:	3b01      	subs	r3, #1
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003782:	fb01 f303 	mul.w	r3, r1, r3
 8003786:	441a      	add	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	22ff      	movs	r2, #255	; 0xff
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d114      	bne.n	80037cc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d01a      	beq.n	80037e0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3310      	adds	r3, #16
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 fbfe 	bl	8004fb0 <xTaskRemoveFromEventList>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d012      	beq.n	80037e0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037ba:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <xQueueGenericReset+0xcc>)
 80037bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	e009      	b.n	80037e0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	3310      	adds	r3, #16
 80037d0:	4618      	mov	r0, r3
 80037d2:	f7ff fef3 	bl	80035bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	3324      	adds	r3, #36	; 0x24
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff feee 	bl	80035bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037e0:	f002 fd2a 	bl	8006238 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037e4:	2301      	movs	r3, #1
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08a      	sub	sp, #40	; 0x28
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <xQueueGenericCreate+0x28>
 8003808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	e7fe      	b.n	800381a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d102      	bne.n	8003828 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e004      	b.n	8003832 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	fb02 f303 	mul.w	r3, r2, r3
 8003830:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	3350      	adds	r3, #80	; 0x50
 8003836:	4618      	mov	r0, r3
 8003838:	f002 fdea 	bl	8006410 <pvPortMalloc>
 800383c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00d      	beq.n	8003860 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	3350      	adds	r3, #80	; 0x50
 800384c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800384e:	79fa      	ldrb	r2, [r7, #7]
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	4613      	mov	r3, r2
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f805 	bl	800386a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003860:	69bb      	ldr	r3, [r7, #24]
	}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e002      	b.n	800388c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003898:	2101      	movs	r1, #1
 800389a:	69b8      	ldr	r0, [r7, #24]
 800389c:	f7ff ff42 	bl	8003724 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038a8:	bf00      	nop
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08e      	sub	sp, #56	; 0x38
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038be:	2300      	movs	r3, #0
 80038c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d109      	bne.n	80038e0 <xQueueGenericSend+0x30>
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80038de:	e7fe      	b.n	80038de <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <xQueueGenericSend+0x3e>
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <xQueueGenericSend+0x42>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <xQueueGenericSend+0x44>
 80038f2:	2300      	movs	r3, #0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <xQueueGenericSend+0x5c>
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
 800390a:	e7fe      	b.n	800390a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d103      	bne.n	800391a <xQueueGenericSend+0x6a>
 8003912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <xQueueGenericSend+0x6e>
 800391a:	2301      	movs	r3, #1
 800391c:	e000      	b.n	8003920 <xQueueGenericSend+0x70>
 800391e:	2300      	movs	r3, #0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <xQueueGenericSend+0x88>
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	623b      	str	r3, [r7, #32]
 8003936:	e7fe      	b.n	8003936 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003938:	f001 fd08 	bl	800534c <xTaskGetSchedulerState>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d102      	bne.n	8003948 <xQueueGenericSend+0x98>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <xQueueGenericSend+0x9c>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <xQueueGenericSend+0x9e>
 800394c:	2300      	movs	r3, #0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <xQueueGenericSend+0xb6>
 8003952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003956:	f383 8811 	msr	BASEPRI, r3
 800395a:	f3bf 8f6f 	isb	sy
 800395e:	f3bf 8f4f 	dsb	sy
 8003962:	61fb      	str	r3, [r7, #28]
 8003964:	e7fe      	b.n	8003964 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003966:	f002 fc39 	bl	80061dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <xQueueGenericSend+0xcc>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d129      	bne.n	80039d0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003982:	f000 f9ff 	bl	8003d84 <prvCopyDataToQueue>
 8003986:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	2b00      	cmp	r3, #0
 800398e:	d010      	beq.n	80039b2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	3324      	adds	r3, #36	; 0x24
 8003994:	4618      	mov	r0, r3
 8003996:	f001 fb0b 	bl	8004fb0 <xTaskRemoveFromEventList>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d013      	beq.n	80039c8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039a0:	4b3f      	ldr	r3, [pc, #252]	; (8003aa0 <xQueueGenericSend+0x1f0>)
 80039a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	e00a      	b.n	80039c8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d007      	beq.n	80039c8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039b8:	4b39      	ldr	r3, [pc, #228]	; (8003aa0 <xQueueGenericSend+0x1f0>)
 80039ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039c8:	f002 fc36 	bl	8006238 <vPortExitCritical>
				return pdPASS;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e063      	b.n	8003a98 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d103      	bne.n	80039de <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039d6:	f002 fc2f 	bl	8006238 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	e05c      	b.n	8003a98 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	4618      	mov	r0, r3
 80039ea:	f001 fb69 	bl	80050c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039ee:	2301      	movs	r3, #1
 80039f0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039f2:	f002 fc21 	bl	8006238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039f6:	f001 f8c1 	bl	8004b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039fa:	f002 fbef 	bl	80061dc <vPortEnterCritical>
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a04:	b25b      	sxtb	r3, r3
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a0a:	d103      	bne.n	8003a14 <xQueueGenericSend+0x164>
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a1a:	b25b      	sxtb	r3, r3
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a20:	d103      	bne.n	8003a2a <xQueueGenericSend+0x17a>
 8003a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a2a:	f002 fc05 	bl	8006238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a2e:	1d3a      	adds	r2, r7, #4
 8003a30:	f107 0314 	add.w	r3, r7, #20
 8003a34:	4611      	mov	r1, r2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f001 fb58 	bl	80050ec <xTaskCheckForTimeOut>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d124      	bne.n	8003a8c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a44:	f000 fa96 	bl	8003f74 <prvIsQueueFull>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d018      	beq.n	8003a80 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a50:	3310      	adds	r3, #16
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f001 fa5c 	bl	8004f14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a5e:	f000 fa21 	bl	8003ea4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a62:	f001 f899 	bl	8004b98 <xTaskResumeAll>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f47f af7c 	bne.w	8003966 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a6e:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <xQueueGenericSend+0x1f0>)
 8003a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	e772      	b.n	8003966 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a82:	f000 fa0f 	bl	8003ea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a86:	f001 f887 	bl	8004b98 <xTaskResumeAll>
 8003a8a:	e76c      	b.n	8003966 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a8e:	f000 fa09 	bl	8003ea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a92:	f001 f881 	bl	8004b98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3738      	adds	r7, #56	; 0x38
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b08e      	sub	sp, #56	; 0x38
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d109      	bne.n	8003ad0 <xQueueGenericSendFromISR+0x2c>
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ace:	e7fe      	b.n	8003ace <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d103      	bne.n	8003ade <xQueueGenericSendFromISR+0x3a>
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <xQueueGenericSendFromISR+0x3e>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e000      	b.n	8003ae4 <xQueueGenericSendFromISR+0x40>
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d109      	bne.n	8003afc <xQueueGenericSendFromISR+0x58>
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	623b      	str	r3, [r7, #32]
 8003afa:	e7fe      	b.n	8003afa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d103      	bne.n	8003b0a <xQueueGenericSendFromISR+0x66>
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d101      	bne.n	8003b0e <xQueueGenericSendFromISR+0x6a>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <xQueueGenericSendFromISR+0x6c>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <xQueueGenericSendFromISR+0x84>
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	e7fe      	b.n	8003b26 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b28:	f002 fc34 	bl	8006394 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b2c:	f3ef 8211 	mrs	r2, BASEPRI
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	61ba      	str	r2, [r7, #24]
 8003b42:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b44:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d302      	bcc.n	8003b5a <xQueueGenericSendFromISR+0xb6>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d12c      	bne.n	8003bb4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	68b9      	ldr	r1, [r7, #8]
 8003b68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b6a:	f000 f90b 	bl	8003d84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b6e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b76:	d112      	bne.n	8003b9e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d016      	beq.n	8003bae <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b82:	3324      	adds	r3, #36	; 0x24
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 fa13 	bl	8004fb0 <xTaskRemoveFromEventList>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00b      	beq.n	8003bae <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	e007      	b.n	8003bae <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	b25a      	sxtb	r2, r3
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003bb2:	e001      	b.n	8003bb8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bba:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3738      	adds	r7, #56	; 0x38
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08c      	sub	sp, #48	; 0x30
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <xQueueReceive+0x2e>
	__asm volatile
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	e7fe      	b.n	8003bf8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d103      	bne.n	8003c08 <xQueueReceive+0x3c>
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <xQueueReceive+0x40>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <xQueueReceive+0x42>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <xQueueReceive+0x5a>
 8003c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c16:	f383 8811 	msr	BASEPRI, r3
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	e7fe      	b.n	8003c24 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c26:	f001 fb91 	bl	800534c <xTaskGetSchedulerState>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d102      	bne.n	8003c36 <xQueueReceive+0x6a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <xQueueReceive+0x6e>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <xQueueReceive+0x70>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <xQueueReceive+0x88>
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	e7fe      	b.n	8003c52 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c54:	f002 fac2 	bl	80061dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01f      	beq.n	8003ca4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c64:	68b9      	ldr	r1, [r7, #8]
 8003c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c68:	f000 f8f6 	bl	8003e58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	1e5a      	subs	r2, r3, #1
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00f      	beq.n	8003c9c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	3310      	adds	r3, #16
 8003c80:	4618      	mov	r0, r3
 8003c82:	f001 f995 	bl	8004fb0 <xTaskRemoveFromEventList>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d007      	beq.n	8003c9c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c8c:	4b3c      	ldr	r3, [pc, #240]	; (8003d80 <xQueueReceive+0x1b4>)
 8003c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c9c:	f002 facc 	bl	8006238 <vPortExitCritical>
				return pdPASS;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e069      	b.n	8003d78 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003caa:	f002 fac5 	bl	8006238 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e062      	b.n	8003d78 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cb8:	f107 0310 	add.w	r3, r7, #16
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f001 f9ff 	bl	80050c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cc6:	f002 fab7 	bl	8006238 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cca:	f000 ff57 	bl	8004b7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cce:	f002 fa85 	bl	80061dc <vPortEnterCritical>
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cd8:	b25b      	sxtb	r3, r3
 8003cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cde:	d103      	bne.n	8003ce8 <xQueueReceive+0x11c>
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cee:	b25b      	sxtb	r3, r3
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf4:	d103      	bne.n	8003cfe <xQueueReceive+0x132>
 8003cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cfe:	f002 fa9b 	bl	8006238 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d02:	1d3a      	adds	r2, r7, #4
 8003d04:	f107 0310 	add.w	r3, r7, #16
 8003d08:	4611      	mov	r1, r2
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 f9ee 	bl	80050ec <xTaskCheckForTimeOut>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d123      	bne.n	8003d5e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d18:	f000 f916 	bl	8003f48 <prvIsQueueEmpty>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d017      	beq.n	8003d52 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	3324      	adds	r3, #36	; 0x24
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 f8f2 	bl	8004f14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d32:	f000 f8b7 	bl	8003ea4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d36:	f000 ff2f 	bl	8004b98 <xTaskResumeAll>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d189      	bne.n	8003c54 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <xQueueReceive+0x1b4>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	e780      	b.n	8003c54 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d54:	f000 f8a6 	bl	8003ea4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d58:	f000 ff1e 	bl	8004b98 <xTaskResumeAll>
 8003d5c:	e77a      	b.n	8003c54 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d60:	f000 f8a0 	bl	8003ea4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d64:	f000 ff18 	bl	8004b98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d6a:	f000 f8ed 	bl	8003f48 <prvIsQueueEmpty>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f43f af6f 	beq.w	8003c54 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3730      	adds	r7, #48	; 0x30
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10d      	bne.n	8003dbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d14d      	bne.n	8003e46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 faea 	bl	8005388 <xTaskPriorityDisinherit>
 8003db4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	e043      	b.n	8003e46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d119      	bne.n	8003df8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6858      	ldr	r0, [r3, #4]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	f002 fd18 	bl	8006804 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ddc:	441a      	add	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d32b      	bcc.n	8003e46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	e026      	b.n	8003e46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	68d8      	ldr	r0, [r3, #12]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	461a      	mov	r2, r3
 8003e02:	68b9      	ldr	r1, [r7, #8]
 8003e04:	f002 fcfe 	bl	8006804 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e10:	425b      	negs	r3, r3
 8003e12:	441a      	add	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d207      	bcs.n	8003e34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	425b      	negs	r3, r3
 8003e2e:	441a      	add	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d105      	bne.n	8003e46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e4e:	697b      	ldr	r3, [r7, #20]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d018      	beq.n	8003e9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	441a      	add	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68da      	ldr	r2, [r3, #12]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d303      	bcc.n	8003e8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68d9      	ldr	r1, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e94:	461a      	mov	r2, r3
 8003e96:	6838      	ldr	r0, [r7, #0]
 8003e98:	f002 fcb4 	bl	8006804 <memcpy>
	}
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003eac:	f002 f996 	bl	80061dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eb8:	e011      	b.n	8003ede <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d012      	beq.n	8003ee8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3324      	adds	r3, #36	; 0x24
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 f872 	bl	8004fb0 <xTaskRemoveFromEventList>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ed2:	f001 f96b 	bl	80051ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ed6:	7bfb      	ldrb	r3, [r7, #15]
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	dce9      	bgt.n	8003eba <prvUnlockQueue+0x16>
 8003ee6:	e000      	b.n	8003eea <prvUnlockQueue+0x46>
					break;
 8003ee8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	22ff      	movs	r2, #255	; 0xff
 8003eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003ef2:	f002 f9a1 	bl	8006238 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003ef6:	f002 f971 	bl	80061dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f02:	e011      	b.n	8003f28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d012      	beq.n	8003f32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3310      	adds	r3, #16
 8003f10:	4618      	mov	r0, r3
 8003f12:	f001 f84d 	bl	8004fb0 <xTaskRemoveFromEventList>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f1c:	f001 f946 	bl	80051ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f20:	7bbb      	ldrb	r3, [r7, #14]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	dce9      	bgt.n	8003f04 <prvUnlockQueue+0x60>
 8003f30:	e000      	b.n	8003f34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	22ff      	movs	r2, #255	; 0xff
 8003f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f3c:	f002 f97c 	bl	8006238 <vPortExitCritical>
}
 8003f40:	bf00      	nop
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f50:	f002 f944 	bl	80061dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d102      	bne.n	8003f62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	e001      	b.n	8003f66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f66:	f002 f967 	bl	8006238 <vPortExitCritical>

	return xReturn;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f7c:	f002 f92e 	bl	80061dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d102      	bne.n	8003f92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	60fb      	str	r3, [r7, #12]
 8003f90:	e001      	b.n	8003f96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f96:	f002 f94f 	bl	8006238 <vPortExitCritical>

	return xReturn;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	e014      	b.n	8003fde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fb4:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <vQueueAddToRegistry+0x4c>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fc0:	490b      	ldr	r1, [pc, #44]	; (8003ff0 <vQueueAddToRegistry+0x4c>)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fca:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <vQueueAddToRegistry+0x4c>)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fd6:	e005      	b.n	8003fe4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b07      	cmp	r3, #7
 8003fe2:	d9e7      	bls.n	8003fb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	20012f48 	.word	0x20012f48

08003ff4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004004:	f002 f8ea 	bl	80061dc <vPortEnterCritical>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800400e:	b25b      	sxtb	r3, r3
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004014:	d103      	bne.n	800401e <vQueueWaitForMessageRestricted+0x2a>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004024:	b25b      	sxtb	r3, r3
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800402a:	d103      	bne.n	8004034 <vQueueWaitForMessageRestricted+0x40>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004034:	f002 f900 	bl	8006238 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	3324      	adds	r3, #36	; 0x24
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	4618      	mov	r0, r3
 800404a:	f000 ff87 	bl	8004f5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800404e:	6978      	ldr	r0, [r7, #20]
 8004050:	f7ff ff28 	bl	8003ea4 <prvUnlockQueue>
	}
 8004054:	bf00      	nop
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08c      	sub	sp, #48	; 0x30
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d10f      	bne.n	800408e <xStreamBufferGenericCreate+0x32>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800406e:	2301      	movs	r3, #1
 8004070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b04      	cmp	r3, #4
 8004078:	d819      	bhi.n	80040ae <xStreamBufferGenericCreate+0x52>
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	61fb      	str	r3, [r7, #28]
 800408c:	e7fe      	b.n	800408c <xStreamBufferGenericCreate+0x30>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d109      	bne.n	80040ae <xStreamBufferGenericCreate+0x52>
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	e7fe      	b.n	80040ac <xStreamBufferGenericCreate+0x50>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d909      	bls.n	80040ca <xStreamBufferGenericCreate+0x6e>
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e7fe      	b.n	80040c8 <xStreamBufferGenericCreate+0x6c>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <xStreamBufferGenericCreate+0x78>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80040d0:	2301      	movs	r3, #1
 80040d2:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	3301      	adds	r3, #1
 80040d8:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3324      	adds	r3, #36	; 0x24
 80040de:	4618      	mov	r0, r3
 80040e0:	f002 f996 	bl	8006410 <pvPortMalloc>
 80040e4:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <xStreamBufferGenericCreate+0xa6>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80040f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	6a38      	ldr	r0, [r7, #32]
 80040fe:	f000 fb4e 	bl	800479e <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8004102:	6a3b      	ldr	r3, [r7, #32]
	}
 8004104:	4618      	mov	r0, r3
 8004106:	3728      	adds	r7, #40	; 0x28
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d109      	bne.n	8004132 <xStreamBufferSpacesAvailable+0x26>
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e7fe      	b.n	8004130 <xStreamBufferSpacesAvailable+0x24>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4413      	add	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3b01      	subs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	429a      	cmp	r2, r3
 8004156:	d304      	bcc.n	8004162 <xStreamBufferSpacesAvailable+0x56>
	{
		xSpace -= pxStreamBuffer->xLength;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8004162:	697b      	ldr	r3, [r7, #20]
}
 8004164:	4618      	mov	r0, r3
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b090      	sub	sp, #64	; 0x40
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8004182:	2300      	movs	r3, #0
 8004184:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d109      	bne.n	80041a4 <xStreamBufferSend+0x34>
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	627b      	str	r3, [r7, #36]	; 0x24
 80041a2:	e7fe      	b.n	80041a2 <xStreamBufferSend+0x32>
	configASSERT( pxStreamBuffer );
 80041a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <xStreamBufferSend+0x4e>
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	e7fe      	b.n	80041bc <xStreamBufferSend+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	7f1b      	ldrb	r3, [r3, #28]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d010      	beq.n	80041ec <xStreamBufferSend+0x7c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	3304      	adds	r3, #4
 80041ce:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 80041d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d809      	bhi.n	80041ec <xStreamBufferSend+0x7c>
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	e7fe      	b.n	80041ea <xStreamBufferSend+0x7a>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d03d      	beq.n	800426e <xStreamBufferSend+0xfe>
	{
		vTaskSetTimeOutState( &xTimeOut );
 80041f2:	f107 0310 	add.w	r3, r7, #16
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 ff3c 	bl	8005074 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 80041fc:	f001 ffee 	bl	80061dc <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004202:	f7ff ff83 	bl	800410c <xStreamBufferSpacesAvailable>
 8004206:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8004208:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800420a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420c:	429a      	cmp	r2, r3
 800420e:	d216      	bcs.n	800423e <xStreamBufferSend+0xce>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8004210:	2000      	movs	r0, #0
 8004212:	f001 fb21 	bl	8005858 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8004216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d009      	beq.n	8004232 <xStreamBufferSend+0xc2>
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	61bb      	str	r3, [r7, #24]
 8004230:	e7fe      	b.n	8004230 <xStreamBufferSend+0xc0>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8004232:	f001 f87b 	bl	800532c <xTaskGetCurrentTaskHandle>
 8004236:	4602      	mov	r2, r0
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	615a      	str	r2, [r3, #20]
 800423c:	e002      	b.n	8004244 <xStreamBufferSend+0xd4>
				}
				else
				{
					taskEXIT_CRITICAL();
 800423e:	f001 fffb 	bl	8006238 <vPortExitCritical>
					break;
 8004242:	e014      	b.n	800426e <xStreamBufferSend+0xfe>
				}
			}
			taskEXIT_CRITICAL();
 8004244:	f001 fff8 	bl	8006238 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2200      	movs	r2, #0
 800424c:	2100      	movs	r1, #0
 800424e:	2000      	movs	r0, #0
 8004250:	f001 f91e 	bl	8005490 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	2200      	movs	r2, #0
 8004258:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 800425a:	463a      	mov	r2, r7
 800425c:	f107 0310 	add.w	r3, r7, #16
 8004260:	4611      	mov	r1, r2
 8004262:	4618      	mov	r0, r3
 8004264:	f000 ff42 	bl	80050ec <xTaskCheckForTimeOut>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0c6      	beq.n	80041fc <xStreamBufferSend+0x8c>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 800426e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <xStreamBufferSend+0x10c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004276:	f7ff ff49 	bl	800410c <xStreamBufferSpacesAvailable>
 800427a:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68b9      	ldr	r1, [r7, #8]
 8004286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004288:	f000 f882 	bl	8004390 <prvWriteMessageToBuffer>
 800428c:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <xStreamBufferSend+0x13a>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8004294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004296:	f000 fa62 	bl	800475e <prvBytesInBuffer>
 800429a:	4602      	mov	r2, r0
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d302      	bcc.n	80042aa <xStreamBufferSend+0x13a>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 80042a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042a6:	f7fc fbff 	bl	8000aa8 <vGenerateCoreBInterrupt>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3738      	adds	r7, #56	; 0x38
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b090      	sub	sp, #64	; 0x40
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d109      	bne.n	80042e4 <xStreamBufferSendFromISR+0x30>
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	623b      	str	r3, [r7, #32]
 80042e2:	e7fe      	b.n	80042e2 <xStreamBufferSendFromISR+0x2e>
	configASSERT( pxStreamBuffer );
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <xStreamBufferSendFromISR+0x4a>
 80042ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	e7fe      	b.n	80042fc <xStreamBufferSendFromISR+0x48>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	7f1b      	ldrb	r3, [r3, #28]
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <xStreamBufferSendFromISR+0x5c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800430a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430c:	3304      	adds	r3, #4
 800430e:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004312:	f7ff fefb 	bl	800410c <xStreamBufferSpacesAvailable>
 8004316:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	68b9      	ldr	r1, [r7, #8]
 8004322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004324:	f000 f834 	bl	8004390 <prvWriteMessageToBuffer>
 8004328:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02a      	beq.n	8004386 <xStreamBufferSendFromISR+0xd2>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8004330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004332:	f000 fa14 	bl	800475e <prvBytesInBuffer>
 8004336:	4602      	mov	r2, r0
 8004338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d322      	bcc.n	8004386 <xStreamBufferSendFromISR+0xd2>
	__asm volatile
 8004340:	f3ef 8211 	mrs	r2, BASEPRI
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	61ba      	str	r2, [r7, #24]
 8004356:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004358:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <xStreamBufferSendFromISR+0xc8>
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	6918      	ldr	r0, [r3, #16]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	2300      	movs	r3, #0
 800436e:	2200      	movs	r2, #0
 8004370:	2100      	movs	r1, #0
 8004372:	f001 f999 	bl	80056a8 <xTaskGenericNotifyFromISR>
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	2200      	movs	r2, #0
 800437a:	611a      	str	r2, [r3, #16]
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f383 8811 	msr	BASEPRI, r3
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004388:	4618      	mov	r0, r3
 800438a:	3738      	adds	r7, #56	; 0x38
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e01d      	b.n	80043e6 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	7f1b      	ldrb	r3, [r3, #28]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d108      	bne.n	80043c8 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	4293      	cmp	r3, r2
 80043c0:	bf28      	it	cs
 80043c2:	4613      	movcs	r3, r2
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	e00e      	b.n	80043e6 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d308      	bcc.n	80043e2 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80043d0:	2301      	movs	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	2204      	movs	r2, #4
 80043d8:	4619      	mov	r1, r3
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f8d9 	bl	8004592 <prvWriteBytesToBuffer>
 80043e0:	e001      	b.n	80043e6 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d007      	beq.n	80043fc <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	461a      	mov	r2, r3
 80043f0:	68b9      	ldr	r1, [r7, #8]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f8cd 	bl	8004592 <prvWriteBytesToBuffer>
 80043f8:	6138      	str	r0, [r7, #16]
 80043fa:	e001      	b.n	8004400 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8004400:	693b      	ldr	r3, [r7, #16]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b08e      	sub	sp, #56	; 0x38
 800440e:	af02      	add	r7, sp, #8
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	607a      	str	r2, [r7, #4]
 8004416:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800441c:	2300      	movs	r3, #0
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d109      	bne.n	800443a <xStreamBufferReceive+0x30>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	61fb      	str	r3, [r7, #28]
 8004438:	e7fe      	b.n	8004438 <xStreamBufferReceive+0x2e>
	configASSERT( pxStreamBuffer );
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d109      	bne.n	8004454 <xStreamBufferReceive+0x4a>
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	e7fe      	b.n	8004452 <xStreamBufferReceive+0x48>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	7f1b      	ldrb	r3, [r3, #28]
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <xStreamBufferReceive+0x5c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004460:	2304      	movs	r3, #4
 8004462:	627b      	str	r3, [r7, #36]	; 0x24
 8004464:	e001      	b.n	800446a <xStreamBufferReceive+0x60>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d033      	beq.n	80044d8 <xStreamBufferReceive+0xce>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8004470:	f001 feb4 	bl	80061dc <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004474:	6a38      	ldr	r0, [r7, #32]
 8004476:	f000 f972 	bl	800475e <prvBytesInBuffer>
 800447a:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800447c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	429a      	cmp	r2, r3
 8004482:	d815      	bhi.n	80044b0 <xStreamBufferReceive+0xa6>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8004484:	2000      	movs	r0, #0
 8004486:	f001 f9e7 	bl	8005858 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800448a:	6a3b      	ldr	r3, [r7, #32]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d009      	beq.n	80044a6 <xStreamBufferReceive+0x9c>
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e7fe      	b.n	80044a4 <xStreamBufferReceive+0x9a>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80044a6:	f000 ff41 	bl	800532c <xTaskGetCurrentTaskHandle>
 80044aa:	4602      	mov	r2, r0
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80044b0:	f001 fec2 	bl	8006238 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80044b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d811      	bhi.n	80044e0 <xStreamBufferReceive+0xd6>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	2100      	movs	r1, #0
 80044c2:	2000      	movs	r0, #0
 80044c4:	f000 ffe4 	bl	8005490 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	2200      	movs	r2, #0
 80044cc:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80044ce:	6a38      	ldr	r0, [r7, #32]
 80044d0:	f000 f945 	bl	800475e <prvBytesInBuffer>
 80044d4:	62b8      	str	r0, [r7, #40]	; 0x28
 80044d6:	e003      	b.n	80044e0 <xStreamBufferReceive+0xd6>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80044d8:	6a38      	ldr	r0, [r7, #32]
 80044da:	f000 f940 	bl	800475e <prvBytesInBuffer>
 80044de:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80044e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d91d      	bls.n	8004524 <xStreamBufferReceive+0x11a>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	9300      	str	r3, [sp, #0]
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	6a38      	ldr	r0, [r7, #32]
 80044f4:	f000 f81b 	bl	800452e <prvReadMessageFromBuffer>
 80044f8:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80044fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d011      	beq.n	8004524 <xStreamBufferReceive+0x11a>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8004500:	f000 fb3c 	bl	8004b7c <vTaskSuspendAll>
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d009      	beq.n	8004520 <xStreamBufferReceive+0x116>
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	6958      	ldr	r0, [r3, #20]
 8004510:	2300      	movs	r3, #0
 8004512:	2200      	movs	r2, #0
 8004514:	2100      	movs	r1, #0
 8004516:	f001 f815 	bl	8005544 <xTaskGenericNotify>
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	2200      	movs	r2, #0
 800451e:	615a      	str	r2, [r3, #20]
 8004520:	f000 fb3a 	bl	8004b98 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004526:	4618      	mov	r0, r3
 8004528:	3730      	adds	r7, #48	; 0x30
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b088      	sub	sp, #32
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
 800453a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d019      	beq.n	8004576 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8004548:	f107 0110 	add.w	r1, r7, #16
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f88d 	bl	8004670 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8004562:	69fa      	ldr	r2, [r7, #28]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	d907      	bls.n	800457a <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	e001      	b.n	800457a <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	68b9      	ldr	r1, [r7, #8]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 f875 	bl	8004670 <prvReadBytesFromBuffer>
 8004586:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8004588:	697b      	ldr	r3, [r7, #20]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3720      	adds	r7, #32
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b08a      	sub	sp, #40	; 0x28
 8004596:	af00      	add	r7, sp, #0
 8004598:	60f8      	str	r0, [r7, #12]
 800459a:	60b9      	str	r1, [r7, #8]
 800459c:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d109      	bne.n	80045b8 <prvWriteBytesToBuffer+0x26>
 80045a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	61fb      	str	r3, [r7, #28]
 80045b6:	e7fe      	b.n	80045b6 <prvWriteBytesToBuffer+0x24>

	xNextHead = pxStreamBuffer->xHead;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4293      	cmp	r3, r2
 80045ca:	bf28      	it	cs
 80045cc:	4613      	movcs	r3, r2
 80045ce:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	441a      	add	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d909      	bls.n	80045f2 <prvWriteBytesToBuffer+0x60>
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	61bb      	str	r3, [r7, #24]
 80045f0:	e7fe      	b.n	80045f0 <prvWriteBytesToBuffer+0x5e>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	4413      	add	r3, r2
 80045fa:	6a3a      	ldr	r2, [r7, #32]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	4618      	mov	r0, r3
 8004600:	f002 f900 	bl	8006804 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	429a      	cmp	r2, r3
 800460a:	d91b      	bls.n	8004644 <prvWriteBytesToBuffer+0xb2>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6a3b      	ldr	r3, [r7, #32]
 8004610:	1ad2      	subs	r2, r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	d909      	bls.n	800462e <prvWriteBytesToBuffer+0x9c>
 800461a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	e7fe      	b.n	800462c <prvWriteBytesToBuffer+0x9a>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6998      	ldr	r0, [r3, #24]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	18d1      	adds	r1, r2, r3
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	461a      	mov	r2, r3
 8004640:	f002 f8e0 	bl	8006804 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8004644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4413      	add	r3, r2
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004652:	429a      	cmp	r2, r3
 8004654:	d304      	bcc.n	8004660 <prvWriteBytesToBuffer+0xce>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004664:	605a      	str	r2, [r3, #4]

	return xCount;
 8004666:	687b      	ldr	r3, [r7, #4]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3728      	adds	r7, #40	; 0x28
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]
 800467c:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	4293      	cmp	r3, r2
 8004684:	bf28      	it	cs
 8004686:	4613      	movcs	r3, r2
 8004688:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d061      	beq.n	8004754 <prvReadBytesFromBuffer+0xe4>
	{
		xNextTail = pxStreamBuffer->xTail;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	6a3a      	ldr	r2, [r7, #32]
 80046a0:	4293      	cmp	r3, r2
 80046a2:	bf28      	it	cs
 80046a4:	4613      	movcs	r3, r2
 80046a6:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80046a8:	69fa      	ldr	r2, [r7, #28]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d909      	bls.n	80046c4 <prvReadBytesFromBuffer+0x54>
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	e7fe      	b.n	80046c2 <prvReadBytesFromBuffer+0x52>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80046c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	441a      	add	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d909      	bls.n	80046e6 <prvReadBytesFromBuffer+0x76>
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	e7fe      	b.n	80046e4 <prvReadBytesFromBuffer+0x74>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	4413      	add	r3, r2
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	4619      	mov	r1, r3
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	f002 f886 	bl	8006804 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d918      	bls.n	8004732 <prvReadBytesFromBuffer+0xc2>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	429a      	cmp	r2, r3
 8004706:	d909      	bls.n	800471c <prvReadBytesFromBuffer+0xac>
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	e7fe      	b.n	800471a <prvReadBytesFromBuffer+0xaa>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	18d0      	adds	r0, r2, r3
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6999      	ldr	r1, [r3, #24]
 8004726:	6a3a      	ldr	r2, [r7, #32]
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	461a      	mov	r2, r3
 800472e:	f002 f869 	bl	8006804 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8004732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	4413      	add	r3, r2
 8004738:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	429a      	cmp	r2, r3
 8004742:	d304      	bcc.n	800474e <prvReadBytesFromBuffer+0xde>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004752:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8004754:	6a3b      	ldr	r3, [r7, #32]
}
 8004756:	4618      	mov	r0, r3
 8004758:	3728      	adds	r7, #40	; 0x28
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800475e:	b480      	push	{r7}
 8004760:	b085      	sub	sp, #20
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	4413      	add	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	429a      	cmp	r2, r3
 8004784:	d304      	bcc.n	8004790 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8004790:	68fb      	ldr	r3, [r7, #12]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80047ac:	2355      	movs	r3, #85	; 0x55
 80047ae:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6979      	ldr	r1, [r7, #20]
 80047b4:	68b8      	ldr	r0, [r7, #8]
 80047b6:	f002 f830 	bl	800681a <memset>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <prvInitialiseNewStreamBuffer+0x38>
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	613b      	str	r3, [r7, #16]
 80047d4:	e7fe      	b.n	80047d4 <prvInitialiseNewStreamBuffer+0x36>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	2100      	movs	r1, #0
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f002 f81d 	bl	800681a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80047f8:	771a      	strb	r2, [r3, #28]
}
 80047fa:	bf00      	nop
 80047fc:	3718      	adds	r7, #24
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004802:	b580      	push	{r7, lr}
 8004804:	b08c      	sub	sp, #48	; 0x30
 8004806:	af04      	add	r7, sp, #16
 8004808:	60f8      	str	r0, [r7, #12]
 800480a:	60b9      	str	r1, [r7, #8]
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4613      	mov	r3, r2
 8004810:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004812:	88fb      	ldrh	r3, [r7, #6]
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4618      	mov	r0, r3
 8004818:	f001 fdfa 	bl	8006410 <pvPortMalloc>
 800481c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00e      	beq.n	8004842 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004824:	2058      	movs	r0, #88	; 0x58
 8004826:	f001 fdf3 	bl	8006410 <pvPortMalloc>
 800482a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
 8004838:	e005      	b.n	8004846 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800483a:	6978      	ldr	r0, [r7, #20]
 800483c:	f001 feaa 	bl	8006594 <vPortFree>
 8004840:	e001      	b.n	8004846 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004842:	2300      	movs	r3, #0
 8004844:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d013      	beq.n	8004874 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	2300      	movs	r3, #0
 8004850:	9303      	str	r3, [sp, #12]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	9302      	str	r3, [sp, #8]
 8004856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004858:	9301      	str	r3, [sp, #4]
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68b9      	ldr	r1, [r7, #8]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 f80e 	bl	8004884 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004868:	69f8      	ldr	r0, [r7, #28]
 800486a:	f000 f899 	bl	80049a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800486e:	2301      	movs	r3, #1
 8004870:	61bb      	str	r3, [r7, #24]
 8004872:	e002      	b.n	800487a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004878:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800487a:	69bb      	ldr	r3, [r7, #24]
	}
 800487c:	4618      	mov	r0, r3
 800487e:	3720      	adds	r7, #32
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	461a      	mov	r2, r3
 800489c:	21a5      	movs	r1, #165	; 0xa5
 800489e:	f001 ffbc 	bl	800681a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048ac:	3b01      	subs	r3, #1
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f023 0307 	bic.w	r3, r3, #7
 80048ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <prvInitialiseNewTask+0x56>
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e7fe      	b.n	80048d8 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01f      	beq.n	8004920 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048e0:	2300      	movs	r3, #0
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	e012      	b.n	800490c <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048e6:	68ba      	ldr	r2, [r7, #8]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	7819      	ldrb	r1, [r3, #0]
 80048ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	3334      	adds	r3, #52	; 0x34
 80048f6:	460a      	mov	r2, r1
 80048f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	4413      	add	r3, r2
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d006      	beq.n	8004914 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3301      	adds	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b09      	cmp	r3, #9
 8004910:	d9e9      	bls.n	80048e6 <prvInitialiseNewTask+0x62>
 8004912:	e000      	b.n	8004916 <prvInitialiseNewTask+0x92>
			{
				break;
 8004914:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800491e:	e003      	b.n	8004928 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492a:	2b04      	cmp	r3, #4
 800492c:	d901      	bls.n	8004932 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800492e:	2304      	movs	r3, #4
 8004930:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004936:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800493c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	2200      	movs	r2, #0
 8004942:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	3304      	adds	r3, #4
 8004948:	4618      	mov	r0, r3
 800494a:	f7fe fe57 	bl	80035fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	3318      	adds	r3, #24
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe fe52 	bl	80035fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	f1c3 0205 	rsb	r2, r3, #5
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800496c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800496e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004970:	2200      	movs	r2, #0
 8004972:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	68f9      	ldr	r1, [r7, #12]
 8004980:	69b8      	ldr	r0, [r7, #24]
 8004982:	f001 fb03 	bl	8005f8c <pxPortInitialiseStack>
 8004986:	4602      	mov	r2, r0
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004998:	bf00      	nop
 800499a:	3720      	adds	r7, #32
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049a8:	f001 fc18 	bl	80061dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049ac:	4b2c      	ldr	r3, [pc, #176]	; (8004a60 <prvAddNewTaskToReadyList+0xc0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	4a2b      	ldr	r2, [pc, #172]	; (8004a60 <prvAddNewTaskToReadyList+0xc0>)
 80049b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049b6:	4b2b      	ldr	r3, [pc, #172]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049be:	4a29      	ldr	r2, [pc, #164]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049c4:	4b26      	ldr	r3, [pc, #152]	; (8004a60 <prvAddNewTaskToReadyList+0xc0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d110      	bne.n	80049ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049cc:	f000 fc12 	bl	80051f4 <prvInitialiseTaskLists>
 80049d0:	e00d      	b.n	80049ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049d2:	4b25      	ldr	r3, [pc, #148]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049da:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d802      	bhi.n	80049ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049e8:	4a1e      	ldr	r2, [pc, #120]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049ee:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <prvAddNewTaskToReadyList+0xcc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	4a1d      	ldr	r2, [pc, #116]	; (8004a6c <prvAddNewTaskToReadyList+0xcc>)
 80049f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049f8:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <prvAddNewTaskToReadyList+0xcc>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a04:	2201      	movs	r2, #1
 8004a06:	409a      	lsls	r2, r3
 8004a08:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <prvAddNewTaskToReadyList+0xd0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	4a18      	ldr	r2, [pc, #96]	; (8004a70 <prvAddNewTaskToReadyList+0xd0>)
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	4a15      	ldr	r2, [pc, #84]	; (8004a74 <prvAddNewTaskToReadyList+0xd4>)
 8004a20:	441a      	add	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3304      	adds	r3, #4
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f7fe fdf4 	bl	8003616 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a2e:	f001 fc03 	bl	8006238 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a32:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00e      	beq.n	8004a58 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d207      	bcs.n	8004a58 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a48:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <prvAddNewTaskToReadyList+0xd8>)
 8004a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	2000011c 	.word	0x2000011c
 8004a64:	20000044 	.word	0x20000044
 8004a68:	20000128 	.word	0x20000128
 8004a6c:	20000138 	.word	0x20000138
 8004a70:	20000124 	.word	0x20000124
 8004a74:	20000048 	.word	0x20000048
 8004a78:	e000ed04 	.word	0xe000ed04

08004a7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <vTaskDelay+0x60>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <vTaskDelay+0x2e>
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	60bb      	str	r3, [r7, #8]
 8004aa8:	e7fe      	b.n	8004aa8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004aaa:	f000 f867 	bl	8004b7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004aae:	2100      	movs	r1, #0
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fef7 	bl	80058a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ab6:	f000 f86f 	bl	8004b98 <xTaskResumeAll>
 8004aba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d107      	bne.n	8004ad2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004ac2:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <vTaskDelay+0x64>)
 8004ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
 8004ada:	bf00      	nop
 8004adc:	20000144 	.word	0x20000144
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004aea:	4b1e      	ldr	r3, [pc, #120]	; (8004b64 <vTaskStartScheduler+0x80>)
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	2300      	movs	r3, #0
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	2282      	movs	r2, #130	; 0x82
 8004af6:	491c      	ldr	r1, [pc, #112]	; (8004b68 <vTaskStartScheduler+0x84>)
 8004af8:	481c      	ldr	r0, [pc, #112]	; (8004b6c <vTaskStartScheduler+0x88>)
 8004afa:	f7ff fe82 	bl	8004802 <xTaskCreate>
 8004afe:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d102      	bne.n	8004b0c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8004b06:	f000 ff33 	bl	8005970 <xTimerCreateTimerTask>
 8004b0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d115      	bne.n	8004b3e <vTaskStartScheduler+0x5a>
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b24:	4b12      	ldr	r3, [pc, #72]	; (8004b70 <vTaskStartScheduler+0x8c>)
 8004b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <vTaskStartScheduler+0x90>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <vTaskStartScheduler+0x94>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b38:	f001 fab2 	bl	80060a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b3c:	e00d      	b.n	8004b5a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b44:	d109      	bne.n	8004b5a <vTaskStartScheduler+0x76>
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	e7fe      	b.n	8004b58 <vTaskStartScheduler+0x74>
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000140 	.word	0x20000140
 8004b68:	08006890 	.word	0x08006890
 8004b6c:	080051c5 	.word	0x080051c5
 8004b70:	2000013c 	.word	0x2000013c
 8004b74:	20000128 	.word	0x20000128
 8004b78:	20000120 	.word	0x20000120

08004b7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b80:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <vTaskSuspendAll+0x18>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	4a03      	ldr	r2, [pc, #12]	; (8004b94 <vTaskSuspendAll+0x18>)
 8004b88:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004b8a:	bf00      	nop
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	20000144 	.word	0x20000144

08004b98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ba6:	4b41      	ldr	r3, [pc, #260]	; (8004cac <xTaskResumeAll+0x114>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <xTaskResumeAll+0x2a>
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	e7fe      	b.n	8004bc0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bc2:	f001 fb0b 	bl	80061dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004bc6:	4b39      	ldr	r3, [pc, #228]	; (8004cac <xTaskResumeAll+0x114>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	4a37      	ldr	r2, [pc, #220]	; (8004cac <xTaskResumeAll+0x114>)
 8004bce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bd0:	4b36      	ldr	r3, [pc, #216]	; (8004cac <xTaskResumeAll+0x114>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d161      	bne.n	8004c9c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bd8:	4b35      	ldr	r3, [pc, #212]	; (8004cb0 <xTaskResumeAll+0x118>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d05d      	beq.n	8004c9c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004be0:	e02e      	b.n	8004c40 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be2:	4b34      	ldr	r3, [pc, #208]	; (8004cb4 <xTaskResumeAll+0x11c>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3318      	adds	r3, #24
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe fd6e 	bl	80036d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	3304      	adds	r3, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7fe fd69 	bl	80036d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	2201      	movs	r2, #1
 8004c04:	409a      	lsls	r2, r3
 8004c06:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <xTaskResumeAll+0x120>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	4a2a      	ldr	r2, [pc, #168]	; (8004cb8 <xTaskResumeAll+0x120>)
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4a27      	ldr	r2, [pc, #156]	; (8004cbc <xTaskResumeAll+0x124>)
 8004c1e:	441a      	add	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3304      	adds	r3, #4
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f7fe fcf5 	bl	8003616 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c30:	4b23      	ldr	r3, [pc, #140]	; (8004cc0 <xTaskResumeAll+0x128>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d302      	bcc.n	8004c40 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004c3a:	4b22      	ldr	r3, [pc, #136]	; (8004cc4 <xTaskResumeAll+0x12c>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c40:	4b1c      	ldr	r3, [pc, #112]	; (8004cb4 <xTaskResumeAll+0x11c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1cc      	bne.n	8004be2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c4e:	f000 fb4d 	bl	80052ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <xTaskResumeAll+0x130>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d010      	beq.n	8004c80 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c5e:	f000 f847 	bl	8004cf0 <xTaskIncrementTick>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8004c68:	4b16      	ldr	r3, [pc, #88]	; (8004cc4 <xTaskResumeAll+0x12c>)
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f1      	bne.n	8004c5e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004c7a:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <xTaskResumeAll+0x130>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c80:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <xTaskResumeAll+0x12c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d009      	beq.n	8004c9c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c8c:	4b0f      	ldr	r3, [pc, #60]	; (8004ccc <xTaskResumeAll+0x134>)
 8004c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c9c:	f001 facc 	bl	8006238 <vPortExitCritical>

	return xAlreadyYielded;
 8004ca0:	68bb      	ldr	r3, [r7, #8]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000144 	.word	0x20000144
 8004cb0:	2000011c 	.word	0x2000011c
 8004cb4:	200000dc 	.word	0x200000dc
 8004cb8:	20000124 	.word	0x20000124
 8004cbc:	20000048 	.word	0x20000048
 8004cc0:	20000044 	.word	0x20000044
 8004cc4:	20000130 	.word	0x20000130
 8004cc8:	2000012c 	.word	0x2000012c
 8004ccc:	e000ed04 	.word	0xe000ed04

08004cd0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <xTaskGetTickCount+0x1c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004cdc:	687b      	ldr	r3, [r7, #4]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	20000120 	.word	0x20000120

08004cf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cfa:	4b4e      	ldr	r3, [pc, #312]	; (8004e34 <xTaskIncrementTick+0x144>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f040 8087 	bne.w	8004e12 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d04:	4b4c      	ldr	r3, [pc, #304]	; (8004e38 <xTaskIncrementTick+0x148>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d0c:	4a4a      	ldr	r2, [pc, #296]	; (8004e38 <xTaskIncrementTick+0x148>)
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d11f      	bne.n	8004d58 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d18:	4b48      	ldr	r3, [pc, #288]	; (8004e3c <xTaskIncrementTick+0x14c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <xTaskIncrementTick+0x46>
 8004d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	e7fe      	b.n	8004d34 <xTaskIncrementTick+0x44>
 8004d36:	4b41      	ldr	r3, [pc, #260]	; (8004e3c <xTaskIncrementTick+0x14c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	4b40      	ldr	r3, [pc, #256]	; (8004e40 <xTaskIncrementTick+0x150>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a3e      	ldr	r2, [pc, #248]	; (8004e3c <xTaskIncrementTick+0x14c>)
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4a3e      	ldr	r2, [pc, #248]	; (8004e40 <xTaskIncrementTick+0x150>)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6013      	str	r3, [r2, #0]
 8004d4a:	4b3e      	ldr	r3, [pc, #248]	; (8004e44 <xTaskIncrementTick+0x154>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	4a3c      	ldr	r2, [pc, #240]	; (8004e44 <xTaskIncrementTick+0x154>)
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	f000 faca 	bl	80052ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d58:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <xTaskIncrementTick+0x158>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d348      	bcc.n	8004df4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d62:	4b36      	ldr	r3, [pc, #216]	; (8004e3c <xTaskIncrementTick+0x14c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d104      	bne.n	8004d76 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d6c:	4b36      	ldr	r3, [pc, #216]	; (8004e48 <xTaskIncrementTick+0x158>)
 8004d6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d72:	601a      	str	r2, [r3, #0]
					break;
 8004d74:	e03e      	b.n	8004df4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d76:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <xTaskIncrementTick+0x14c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d86:	693a      	ldr	r2, [r7, #16]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d203      	bcs.n	8004d96 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d8e:	4a2e      	ldr	r2, [pc, #184]	; (8004e48 <xTaskIncrementTick+0x158>)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d94:	e02e      	b.n	8004df4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	3304      	adds	r3, #4
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fc98 	bl	80036d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d004      	beq.n	8004db2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	3318      	adds	r3, #24
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe fc8f 	bl	80036d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db6:	2201      	movs	r2, #1
 8004db8:	409a      	lsls	r2, r3
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <xTaskIncrementTick+0x15c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	4a22      	ldr	r2, [pc, #136]	; (8004e4c <xTaskIncrementTick+0x15c>)
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <xTaskIncrementTick+0x160>)
 8004dd2:	441a      	add	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f7fe fc1b 	bl	8003616 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de4:	4b1b      	ldr	r3, [pc, #108]	; (8004e54 <xTaskIncrementTick+0x164>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d3b9      	bcc.n	8004d62 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004dee:	2301      	movs	r3, #1
 8004df0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004df2:	e7b6      	b.n	8004d62 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004df4:	4b17      	ldr	r3, [pc, #92]	; (8004e54 <xTaskIncrementTick+0x164>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	4915      	ldr	r1, [pc, #84]	; (8004e50 <xTaskIncrementTick+0x160>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d907      	bls.n	8004e1c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	e004      	b.n	8004e1c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <xTaskIncrementTick+0x168>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	3301      	adds	r3, #1
 8004e18:	4a0f      	ldr	r2, [pc, #60]	; (8004e58 <xTaskIncrementTick+0x168>)
 8004e1a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <xTaskIncrementTick+0x16c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d001      	beq.n	8004e28 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004e28:	697b      	ldr	r3, [r7, #20]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000144 	.word	0x20000144
 8004e38:	20000120 	.word	0x20000120
 8004e3c:	200000d4 	.word	0x200000d4
 8004e40:	200000d8 	.word	0x200000d8
 8004e44:	20000134 	.word	0x20000134
 8004e48:	2000013c 	.word	0x2000013c
 8004e4c:	20000124 	.word	0x20000124
 8004e50:	20000048 	.word	0x20000048
 8004e54:	20000044 	.word	0x20000044
 8004e58:	2000012c 	.word	0x2000012c
 8004e5c:	20000130 	.word	0x20000130

08004e60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e66:	4b26      	ldr	r3, [pc, #152]	; (8004f00 <vTaskSwitchContext+0xa0>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e6e:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <vTaskSwitchContext+0xa4>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e74:	e03e      	b.n	8004ef4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004e76:	4b23      	ldr	r3, [pc, #140]	; (8004f04 <vTaskSwitchContext+0xa4>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e7c:	4b22      	ldr	r3, [pc, #136]	; (8004f08 <vTaskSwitchContext+0xa8>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	fab3 f383 	clz	r3, r3
 8004e88:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004e8a:	7afb      	ldrb	r3, [r7, #11]
 8004e8c:	f1c3 031f 	rsb	r3, r3, #31
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	491e      	ldr	r1, [pc, #120]	; (8004f0c <vTaskSwitchContext+0xac>)
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <vTaskSwitchContext+0x5a>
	__asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	e7fe      	b.n	8004eb8 <vTaskSwitchContext+0x58>
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <vTaskSwitchContext+0xac>)
 8004ec6:	4413      	add	r3, r2
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	605a      	str	r2, [r3, #4]
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	3308      	adds	r3, #8
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d104      	bne.n	8004eea <vTaskSwitchContext+0x8a>
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	605a      	str	r2, [r3, #4]
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a07      	ldr	r2, [pc, #28]	; (8004f10 <vTaskSwitchContext+0xb0>)
 8004ef2:	6013      	str	r3, [r2, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	20000144 	.word	0x20000144
 8004f04:	20000130 	.word	0x20000130
 8004f08:	20000124 	.word	0x20000124
 8004f0c:	20000048 	.word	0x20000048
 8004f10:	20000044 	.word	0x20000044

08004f14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <vTaskPlaceOnEventList+0x24>
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	e7fe      	b.n	8004f36 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f38:	4b07      	ldr	r3, [pc, #28]	; (8004f58 <vTaskPlaceOnEventList+0x44>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3318      	adds	r3, #24
 8004f3e:	4619      	mov	r1, r3
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7fe fb8c 	bl	800365e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f46:	2101      	movs	r1, #1
 8004f48:	6838      	ldr	r0, [r7, #0]
 8004f4a:	f000 fcab 	bl	80058a4 <prvAddCurrentTaskToDelayedList>
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000044 	.word	0x20000044

08004f5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <vTaskPlaceOnEventListRestricted+0x26>
 8004f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	617b      	str	r3, [r7, #20]
 8004f80:	e7fe      	b.n	8004f80 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f82:	4b0a      	ldr	r3, [pc, #40]	; (8004fac <vTaskPlaceOnEventListRestricted+0x50>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	3318      	adds	r3, #24
 8004f88:	4619      	mov	r1, r3
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7fe fb43 	bl	8003616 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	68b8      	ldr	r0, [r7, #8]
 8004fa0:	f000 fc80 	bl	80058a4 <prvAddCurrentTaskToDelayedList>
	}
 8004fa4:	bf00      	nop
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000044 	.word	0x20000044

08004fb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <xTaskRemoveFromEventList+0x2a>
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	e7fe      	b.n	8004fd8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	3318      	adds	r3, #24
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7fe fb76 	bl	80036d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	; (800505c <xTaskRemoveFromEventList+0xac>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d11c      	bne.n	8005026 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3304      	adds	r3, #4
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe fb6d 	bl	80036d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	409a      	lsls	r2, r3
 8004ffe:	4b18      	ldr	r3, [pc, #96]	; (8005060 <xTaskRemoveFromEventList+0xb0>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	4a16      	ldr	r2, [pc, #88]	; (8005060 <xTaskRemoveFromEventList+0xb0>)
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500c:	4613      	mov	r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4413      	add	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4a13      	ldr	r2, [pc, #76]	; (8005064 <xTaskRemoveFromEventList+0xb4>)
 8005016:	441a      	add	r2, r3
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	3304      	adds	r3, #4
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7fe faf9 	bl	8003616 <vListInsertEnd>
 8005024:	e005      	b.n	8005032 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3318      	adds	r3, #24
 800502a:	4619      	mov	r1, r3
 800502c:	480e      	ldr	r0, [pc, #56]	; (8005068 <xTaskRemoveFromEventList+0xb8>)
 800502e:	f7fe faf2 	bl	8003616 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <xTaskRemoveFromEventList+0xbc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	429a      	cmp	r2, r3
 800503e:	d905      	bls.n	800504c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005040:	2301      	movs	r3, #1
 8005042:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005044:	4b0a      	ldr	r3, [pc, #40]	; (8005070 <xTaskRemoveFromEventList+0xc0>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e001      	b.n	8005050 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800504c:	2300      	movs	r3, #0
 800504e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005050:	697b      	ldr	r3, [r7, #20]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000144 	.word	0x20000144
 8005060:	20000124 	.word	0x20000124
 8005064:	20000048 	.word	0x20000048
 8005068:	200000dc 	.word	0x200000dc
 800506c:	20000044 	.word	0x20000044
 8005070:	20000130 	.word	0x20000130

08005074 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d109      	bne.n	8005096 <vTaskSetTimeOutState+0x22>
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e7fe      	b.n	8005094 <vTaskSetTimeOutState+0x20>
	taskENTER_CRITICAL();
 8005096:	f001 f8a1 	bl	80061dc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800509a:	4b07      	ldr	r3, [pc, #28]	; (80050b8 <vTaskSetTimeOutState+0x44>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <vTaskSetTimeOutState+0x48>)
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80050aa:	f001 f8c5 	bl	8006238 <vPortExitCritical>
}
 80050ae:	bf00      	nop
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	20000134 	.word	0x20000134
 80050bc:	20000120 	.word	0x20000120

080050c0 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <vTaskInternalSetTimeOutState+0x24>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050d0:	4b05      	ldr	r3, [pc, #20]	; (80050e8 <vTaskInternalSetTimeOutState+0x28>)
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	605a      	str	r2, [r3, #4]
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	20000134 	.word	0x20000134
 80050e8:	20000120 	.word	0x20000120

080050ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b088      	sub	sp, #32
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <xTaskCheckForTimeOut+0x24>
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e7fe      	b.n	800510e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d109      	bne.n	800512a <xTaskCheckForTimeOut+0x3e>
 8005116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511a:	f383 8811 	msr	BASEPRI, r3
 800511e:	f3bf 8f6f 	isb	sy
 8005122:	f3bf 8f4f 	dsb	sy
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e7fe      	b.n	8005128 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800512a:	f001 f857 	bl	80061dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800512e:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <xTaskCheckForTimeOut+0xb8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005146:	d102      	bne.n	800514e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005148:	2300      	movs	r3, #0
 800514a:	61fb      	str	r3, [r7, #28]
 800514c:	e023      	b.n	8005196 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <xTaskCheckForTimeOut+0xbc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d007      	beq.n	800516a <xTaskCheckForTimeOut+0x7e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	69ba      	ldr	r2, [r7, #24]
 8005160:	429a      	cmp	r2, r3
 8005162:	d302      	bcc.n	800516a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005164:	2301      	movs	r3, #1
 8005166:	61fb      	str	r3, [r7, #28]
 8005168:	e015      	b.n	8005196 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	429a      	cmp	r2, r3
 8005172:	d20b      	bcs.n	800518c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	1ad2      	subs	r2, r2, r3
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7ff ff9d 	bl	80050c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
 800518a:	e004      	b.n	8005196 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005192:	2301      	movs	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005196:	f001 f84f 	bl	8006238 <vPortExitCritical>

	return xReturn;
 800519a:	69fb      	ldr	r3, [r7, #28]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000120 	.word	0x20000120
 80051a8:	20000134 	.word	0x20000134

080051ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <vTaskMissedYield+0x14>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
}
 80051b6:	bf00      	nop
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr
 80051c0:	20000130 	.word	0x20000130

080051c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051cc:	f000 f852 	bl	8005274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <prvIdleTask+0x28>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d9f9      	bls.n	80051cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80051d8:	4b05      	ldr	r3, [pc, #20]	; (80051f0 <prvIdleTask+0x2c>)
 80051da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051e8:	e7f0      	b.n	80051cc <prvIdleTask+0x8>
 80051ea:	bf00      	nop
 80051ec:	20000048 	.word	0x20000048
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051fa:	2300      	movs	r3, #0
 80051fc:	607b      	str	r3, [r7, #4]
 80051fe:	e00c      	b.n	800521a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4a12      	ldr	r2, [pc, #72]	; (8005254 <prvInitialiseTaskLists+0x60>)
 800520c:	4413      	add	r3, r2
 800520e:	4618      	mov	r0, r3
 8005210:	f7fe f9d4 	bl	80035bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3301      	adds	r3, #1
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b04      	cmp	r3, #4
 800521e:	d9ef      	bls.n	8005200 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005220:	480d      	ldr	r0, [pc, #52]	; (8005258 <prvInitialiseTaskLists+0x64>)
 8005222:	f7fe f9cb 	bl	80035bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005226:	480d      	ldr	r0, [pc, #52]	; (800525c <prvInitialiseTaskLists+0x68>)
 8005228:	f7fe f9c8 	bl	80035bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800522c:	480c      	ldr	r0, [pc, #48]	; (8005260 <prvInitialiseTaskLists+0x6c>)
 800522e:	f7fe f9c5 	bl	80035bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005232:	480c      	ldr	r0, [pc, #48]	; (8005264 <prvInitialiseTaskLists+0x70>)
 8005234:	f7fe f9c2 	bl	80035bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005238:	480b      	ldr	r0, [pc, #44]	; (8005268 <prvInitialiseTaskLists+0x74>)
 800523a:	f7fe f9bf 	bl	80035bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <prvInitialiseTaskLists+0x78>)
 8005240:	4a05      	ldr	r2, [pc, #20]	; (8005258 <prvInitialiseTaskLists+0x64>)
 8005242:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <prvInitialiseTaskLists+0x7c>)
 8005246:	4a05      	ldr	r2, [pc, #20]	; (800525c <prvInitialiseTaskLists+0x68>)
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	20000048 	.word	0x20000048
 8005258:	200000ac 	.word	0x200000ac
 800525c:	200000c0 	.word	0x200000c0
 8005260:	200000dc 	.word	0x200000dc
 8005264:	200000f0 	.word	0x200000f0
 8005268:	20000108 	.word	0x20000108
 800526c:	200000d4 	.word	0x200000d4
 8005270:	200000d8 	.word	0x200000d8

08005274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800527a:	e019      	b.n	80052b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800527c:	f000 ffae 	bl	80061dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005280:	4b0f      	ldr	r3, [pc, #60]	; (80052c0 <prvCheckTasksWaitingTermination+0x4c>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	3304      	adds	r3, #4
 800528c:	4618      	mov	r0, r3
 800528e:	f7fe fa1f 	bl	80036d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005292:	4b0c      	ldr	r3, [pc, #48]	; (80052c4 <prvCheckTasksWaitingTermination+0x50>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3b01      	subs	r3, #1
 8005298:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <prvCheckTasksWaitingTermination+0x50>)
 800529a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800529c:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <prvCheckTasksWaitingTermination+0x54>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3b01      	subs	r3, #1
 80052a2:	4a09      	ldr	r2, [pc, #36]	; (80052c8 <prvCheckTasksWaitingTermination+0x54>)
 80052a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052a6:	f000 ffc7 	bl	8006238 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f80e 	bl	80052cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <prvCheckTasksWaitingTermination+0x54>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e1      	bne.n	800527c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052b8:	bf00      	nop
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	200000f0 	.word	0x200000f0
 80052c4:	2000011c 	.word	0x2000011c
 80052c8:	20000104 	.word	0x20000104

080052cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	4618      	mov	r0, r3
 80052da:	f001 f95b 	bl	8006594 <vPortFree>
			vPortFree( pxTCB );
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f001 f958 	bl	8006594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <prvResetNextTaskUnblockTime+0x38>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052fc:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <prvResetNextTaskUnblockTime+0x3c>)
 80052fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005302:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005304:	e008      	b.n	8005318 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005306:	4b07      	ldr	r3, [pc, #28]	; (8005324 <prvResetNextTaskUnblockTime+0x38>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4a04      	ldr	r2, [pc, #16]	; (8005328 <prvResetNextTaskUnblockTime+0x3c>)
 8005316:	6013      	str	r3, [r2, #0]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	200000d4 	.word	0x200000d4
 8005328:	2000013c 	.word	0x2000013c

0800532c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <xTaskGetCurrentTaskHandle+0x1c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005338:	687b      	ldr	r3, [r7, #4]
	}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	20000044 	.word	0x20000044

0800534c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005352:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <xTaskGetSchedulerState+0x34>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d102      	bne.n	8005360 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800535a:	2301      	movs	r3, #1
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	e008      	b.n	8005372 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005360:	4b08      	ldr	r3, [pc, #32]	; (8005384 <xTaskGetSchedulerState+0x38>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d102      	bne.n	800536e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005368:	2302      	movs	r3, #2
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e001      	b.n	8005372 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800536e:	2300      	movs	r3, #0
 8005370:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005372:	687b      	ldr	r3, [r7, #4]
	}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	20000128 	.word	0x20000128
 8005384:	20000144 	.word	0x20000144

08005388 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005394:	2300      	movs	r3, #0
 8005396:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d06c      	beq.n	8005478 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800539e:	4b39      	ldr	r3, [pc, #228]	; (8005484 <xTaskPriorityDisinherit+0xfc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d009      	beq.n	80053bc <xTaskPriorityDisinherit+0x34>
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	e7fe      	b.n	80053ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d109      	bne.n	80053d8 <xTaskPriorityDisinherit+0x50>
 80053c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	e7fe      	b.n	80053d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053dc:	1e5a      	subs	r2, r3, #1
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d044      	beq.n	8005478 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d140      	bne.n	8005478 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fe f968 	bl	80036d0 <uxListRemove>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d115      	bne.n	8005432 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	491f      	ldr	r1, [pc, #124]	; (8005488 <xTaskPriorityDisinherit+0x100>)
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	440b      	add	r3, r1
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10a      	bne.n	8005432 <xTaskPriorityDisinherit+0xaa>
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	2201      	movs	r2, #1
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43da      	mvns	r2, r3
 8005428:	4b18      	ldr	r3, [pc, #96]	; (800548c <xTaskPriorityDisinherit+0x104>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4013      	ands	r3, r2
 800542e:	4a17      	ldr	r2, [pc, #92]	; (800548c <xTaskPriorityDisinherit+0x104>)
 8005430:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	f1c3 0205 	rsb	r2, r3, #5
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800544a:	2201      	movs	r2, #1
 800544c:	409a      	lsls	r2, r3
 800544e:	4b0f      	ldr	r3, [pc, #60]	; (800548c <xTaskPriorityDisinherit+0x104>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4313      	orrs	r3, r2
 8005454:	4a0d      	ldr	r2, [pc, #52]	; (800548c <xTaskPriorityDisinherit+0x104>)
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <xTaskPriorityDisinherit+0x100>)
 8005466:	441a      	add	r2, r3
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7fe f8d1 	bl	8003616 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005478:	697b      	ldr	r3, [r7, #20]
	}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20000044 	.word	0x20000044
 8005488:	20000048 	.word	0x20000048
 800548c:	20000124 	.word	0x20000124

08005490 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800549e:	f000 fe9d 	bl	80061dc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80054a2:	4b26      	ldr	r3, [pc, #152]	; (800553c <xTaskNotifyWait+0xac>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d01a      	beq.n	80054e6 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80054b0:	4b22      	ldr	r3, [pc, #136]	; (800553c <xTaskNotifyWait+0xac>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	43d2      	mvns	r2, r2
 80054ba:	400a      	ands	r2, r1
 80054bc:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80054be:	4b1f      	ldr	r3, [pc, #124]	; (800553c <xTaskNotifyWait+0xac>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054ce:	2101      	movs	r1, #1
 80054d0:	6838      	ldr	r0, [r7, #0]
 80054d2:	f000 f9e7 	bl	80058a4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80054d6:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <xTaskNotifyWait+0xb0>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80054e6:	f000 fea7 	bl	8006238 <vPortExitCritical>

		taskENTER_CRITICAL();
 80054ea:	f000 fe77 	bl	80061dc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d004      	beq.n	80054fe <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <xTaskNotifyWait+0xac>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80054fe:	4b0f      	ldr	r3, [pc, #60]	; (800553c <xTaskNotifyWait+0xac>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d002      	beq.n	8005512 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	e008      	b.n	8005524 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005512:	4b0a      	ldr	r3, [pc, #40]	; (800553c <xTaskNotifyWait+0xac>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	43d2      	mvns	r2, r2
 800551c:	400a      	ands	r2, r1
 800551e:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 8005520:	2301      	movs	r3, #1
 8005522:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005524:	4b05      	ldr	r3, [pc, #20]	; (800553c <xTaskNotifyWait+0xac>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 800552e:	f000 fe83 	bl	8006238 <vPortExitCritical>

		return xReturn;
 8005532:	697b      	ldr	r3, [r7, #20]
	}
 8005534:	4618      	mov	r0, r3
 8005536:	3718      	adds	r7, #24
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000044 	.word	0x20000044
 8005540:	e000ed04 	.word	0xe000ed04

08005544 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08a      	sub	sp, #40	; 0x28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	4613      	mov	r3, r2
 8005552:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005554:	2301      	movs	r3, #1
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <xTaskGenericNotify+0x2e>
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	61bb      	str	r3, [r7, #24]
 8005570:	e7fe      	b.n	8005570 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005576:	f000 fe31 	bl	80061dc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800558e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	2b04      	cmp	r3, #4
 800559c:	d827      	bhi.n	80055ee <xTaskGenericNotify+0xaa>
 800559e:	a201      	add	r2, pc, #4	; (adr r2, 80055a4 <xTaskGenericNotify+0x60>)
 80055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	080055b9 	.word	0x080055b9
 80055ac:	080055c7 	.word	0x080055c7
 80055b0:	080055d3 	.word	0x080055d3
 80055b4:	080055db 	.word	0x080055db
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	431a      	orrs	r2, r3
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80055c4:	e025      	b.n	8005612 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80055d0:	e01f      	b.n	8005612 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 80055d8:	e01b      	b.n	8005612 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80055da:	7ffb      	ldrb	r3, [r7, #31]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d003      	beq.n	80055e8 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80055e6:	e014      	b.n	8005612 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80055ec:	e011      	b.n	8005612 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055f6:	d00b      	beq.n	8005610 <xTaskGenericNotify+0xcc>
 80055f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	e7fe      	b.n	800560a <xTaskGenericNotify+0xc6>
					break;
 800560c:	bf00      	nop
 800560e:	e000      	b.n	8005612 <xTaskGenericNotify+0xce>

					break;
 8005610:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005612:	7ffb      	ldrb	r3, [r7, #31]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d138      	bne.n	800568a <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005618:	6a3b      	ldr	r3, [r7, #32]
 800561a:	3304      	adds	r3, #4
 800561c:	4618      	mov	r0, r3
 800561e:	f7fe f857 	bl	80036d0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	2201      	movs	r2, #1
 8005628:	409a      	lsls	r2, r3
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <xTaskGenericNotify+0x154>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4313      	orrs	r3, r2
 8005630:	4a19      	ldr	r2, [pc, #100]	; (8005698 <xTaskGenericNotify+0x154>)
 8005632:	6013      	str	r3, [r2, #0]
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4613      	mov	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	4a16      	ldr	r2, [pc, #88]	; (800569c <xTaskGenericNotify+0x158>)
 8005642:	441a      	add	r2, r3
 8005644:	6a3b      	ldr	r3, [r7, #32]
 8005646:	3304      	adds	r3, #4
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f7fd ffe3 	bl	8003616 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <xTaskGenericNotify+0x128>
 8005658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	e7fe      	b.n	800566a <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005670:	4b0b      	ldr	r3, [pc, #44]	; (80056a0 <xTaskGenericNotify+0x15c>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	429a      	cmp	r2, r3
 8005678:	d907      	bls.n	800568a <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800567a:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <xTaskGenericNotify+0x160>)
 800567c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800568a:	f000 fdd5 	bl	8006238 <vPortExitCritical>

		return xReturn;
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005690:	4618      	mov	r0, r3
 8005692:	3728      	adds	r7, #40	; 0x28
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000124 	.word	0x20000124
 800569c:	20000048 	.word	0x20000048
 80056a0:	20000044 	.word	0x20000044
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08e      	sub	sp, #56	; 0x38
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4613      	mov	r3, r2
 80056b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80056b8:	2301      	movs	r3, #1
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d109      	bne.n	80056d6 <xTaskGenericNotifyFromISR+0x2e>
 80056c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c6:	f383 8811 	msr	BASEPRI, r3
 80056ca:	f3bf 8f6f 	isb	sy
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
 80056d4:	e7fe      	b.n	80056d4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056d6:	f000 fe5d 	bl	8006394 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80056de:	f3ef 8211 	mrs	r2, BASEPRI
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	623a      	str	r2, [r7, #32]
 80056f4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80056f6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800570e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	2202      	movs	r2, #2
 8005716:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 800571a:	79fb      	ldrb	r3, [r7, #7]
 800571c:	2b04      	cmp	r3, #4
 800571e:	d829      	bhi.n	8005774 <xTaskGenericNotifyFromISR+0xcc>
 8005720:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <xTaskGenericNotifyFromISR+0x80>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	08005793 	.word	0x08005793
 800572c:	0800573d 	.word	0x0800573d
 8005730:	0800574b 	.word	0x0800574b
 8005734:	08005757 	.word	0x08005757
 8005738:	0800575f 	.word	0x0800575f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	431a      	orrs	r2, r3
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005748:	e026      	b.n	8005798 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8005754:	e020      	b.n	8005798 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800575c:	e01c      	b.n	8005798 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800575e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005762:	2b02      	cmp	r3, #2
 8005764:	d003      	beq.n	800576e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800576c:	e014      	b.n	8005798 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800576e:	2300      	movs	r3, #0
 8005770:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005772:	e011      	b.n	8005798 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800577c:	d00b      	beq.n	8005796 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	e7fe      	b.n	8005790 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8005792:	bf00      	nop
 8005794:	e000      	b.n	8005798 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8005796:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005798:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800579c:	2b01      	cmp	r3, #1
 800579e:	d144      	bne.n	800582a <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80057a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <xTaskGenericNotifyFromISR+0x114>
 80057a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ac:	f383 8811 	msr	BASEPRI, r3
 80057b0:	f3bf 8f6f 	isb	sy
 80057b4:	f3bf 8f4f 	dsb	sy
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	e7fe      	b.n	80057ba <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057bc:	4b20      	ldr	r3, [pc, #128]	; (8005840 <xTaskGenericNotifyFromISR+0x198>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11c      	bne.n	80057fe <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	3304      	adds	r3, #4
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fd ff81 	bl	80036d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	2201      	movs	r2, #1
 80057d4:	409a      	lsls	r2, r3
 80057d6:	4b1b      	ldr	r3, [pc, #108]	; (8005844 <xTaskGenericNotifyFromISR+0x19c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4313      	orrs	r3, r2
 80057dc:	4a19      	ldr	r2, [pc, #100]	; (8005844 <xTaskGenericNotifyFromISR+0x19c>)
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4a16      	ldr	r2, [pc, #88]	; (8005848 <xTaskGenericNotifyFromISR+0x1a0>)
 80057ee:	441a      	add	r2, r3
 80057f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f7fd ff0d 	bl	8003616 <vListInsertEnd>
 80057fc:	e005      	b.n	800580a <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	3318      	adds	r3, #24
 8005802:	4619      	mov	r1, r3
 8005804:	4811      	ldr	r0, [pc, #68]	; (800584c <xTaskGenericNotifyFromISR+0x1a4>)
 8005806:	f7fd ff06 	bl	8003616 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580e:	4b10      	ldr	r3, [pc, #64]	; (8005850 <xTaskGenericNotifyFromISR+0x1a8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	429a      	cmp	r2, r3
 8005816:	d908      	bls.n	800582a <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800581e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005820:	2201      	movs	r2, #1
 8005822:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <xTaskGenericNotifyFromISR+0x1ac>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005836:	4618      	mov	r0, r3
 8005838:	3738      	adds	r7, #56	; 0x38
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000144 	.word	0x20000144
 8005844:	20000124 	.word	0x20000124
 8005848:	20000048 	.word	0x20000048
 800584c:	200000dc 	.word	0x200000dc
 8005850:	20000044 	.word	0x20000044
 8005854:	20000130 	.word	0x20000130

08005858 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <xTaskNotifyStateClear+0x14>
 8005866:	4b0e      	ldr	r3, [pc, #56]	; (80058a0 <xTaskNotifyStateClear+0x48>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	e000      	b.n	800586e <xTaskNotifyStateClear+0x16>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8005870:	f000 fcb4 	bl	80061dc <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d106      	bne.n	800588e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				xReturn = pdPASS;
 8005888:	2301      	movs	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e001      	b.n	8005892 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8005892:	f000 fcd1 	bl	8006238 <vPortExitCritical>

		return xReturn;
 8005896:	68fb      	ldr	r3, [r7, #12]
	}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20000044 	.word	0x20000044

080058a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058ae:	4b29      	ldr	r3, [pc, #164]	; (8005954 <prvAddCurrentTaskToDelayedList+0xb0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058b4:	4b28      	ldr	r3, [pc, #160]	; (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fd ff08 	bl	80036d0 <uxListRemove>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10b      	bne.n	80058de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80058c6:	4b24      	ldr	r3, [pc, #144]	; (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	2201      	movs	r2, #1
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	43da      	mvns	r2, r3
 80058d4:	4b21      	ldr	r3, [pc, #132]	; (800595c <prvAddCurrentTaskToDelayedList+0xb8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4013      	ands	r3, r2
 80058da:	4a20      	ldr	r2, [pc, #128]	; (800595c <prvAddCurrentTaskToDelayedList+0xb8>)
 80058dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058e4:	d10a      	bne.n	80058fc <prvAddCurrentTaskToDelayedList+0x58>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ec:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	3304      	adds	r3, #4
 80058f2:	4619      	mov	r1, r3
 80058f4:	481a      	ldr	r0, [pc, #104]	; (8005960 <prvAddCurrentTaskToDelayedList+0xbc>)
 80058f6:	f7fd fe8e 	bl	8003616 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058fa:	e026      	b.n	800594a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4413      	add	r3, r2
 8005902:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005904:	4b14      	ldr	r3, [pc, #80]	; (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	429a      	cmp	r2, r3
 8005912:	d209      	bcs.n	8005928 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005914:	4b13      	ldr	r3, [pc, #76]	; (8005964 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4b0f      	ldr	r3, [pc, #60]	; (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3304      	adds	r3, #4
 800591e:	4619      	mov	r1, r3
 8005920:	4610      	mov	r0, r2
 8005922:	f7fd fe9c 	bl	800365e <vListInsert>
}
 8005926:	e010      	b.n	800594a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005928:	4b0f      	ldr	r3, [pc, #60]	; (8005968 <prvAddCurrentTaskToDelayedList+0xc4>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <prvAddCurrentTaskToDelayedList+0xb4>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3304      	adds	r3, #4
 8005932:	4619      	mov	r1, r3
 8005934:	4610      	mov	r0, r2
 8005936:	f7fd fe92 	bl	800365e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800593a:	4b0c      	ldr	r3, [pc, #48]	; (800596c <prvAddCurrentTaskToDelayedList+0xc8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	429a      	cmp	r2, r3
 8005942:	d202      	bcs.n	800594a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005944:	4a09      	ldr	r2, [pc, #36]	; (800596c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	6013      	str	r3, [r2, #0]
}
 800594a:	bf00      	nop
 800594c:	3710      	adds	r7, #16
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000120 	.word	0x20000120
 8005958:	20000044 	.word	0x20000044
 800595c:	20000124 	.word	0x20000124
 8005960:	20000108 	.word	0x20000108
 8005964:	200000d8 	.word	0x200000d8
 8005968:	200000d4 	.word	0x200000d4
 800596c:	2000013c 	.word	0x2000013c

08005970 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8005976:	2300      	movs	r3, #0
 8005978:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800597a:	f000 fad1 	bl	8005f20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800597e:	4b11      	ldr	r3, [pc, #68]	; (80059c4 <xTimerCreateTimerTask+0x54>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8005986:	4b10      	ldr	r3, [pc, #64]	; (80059c8 <xTimerCreateTimerTask+0x58>)
 8005988:	9301      	str	r3, [sp, #4]
 800598a:	2302      	movs	r3, #2
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	2300      	movs	r3, #0
 8005990:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005994:	490d      	ldr	r1, [pc, #52]	; (80059cc <xTimerCreateTimerTask+0x5c>)
 8005996:	480e      	ldr	r0, [pc, #56]	; (80059d0 <xTimerCreateTimerTask+0x60>)
 8005998:	f7fe ff33 	bl	8004802 <xTaskCreate>
 800599c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d109      	bne.n	80059b8 <xTimerCreateTimerTask+0x48>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	603b      	str	r3, [r7, #0]
 80059b6:	e7fe      	b.n	80059b6 <xTimerCreateTimerTask+0x46>
	return xReturn;
 80059b8:	687b      	ldr	r3, [r7, #4]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000178 	.word	0x20000178
 80059c8:	2000017c 	.word	0x2000017c
 80059cc:	08006898 	.word	0x08006898
 80059d0:	08005b05 	.word	0x08005b05

080059d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	; 0x28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059e2:	2300      	movs	r3, #0
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d109      	bne.n	8005a00 <xTimerGenericCommand+0x2c>
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	623b      	str	r3, [r7, #32]
 80059fe:	e7fe      	b.n	80059fe <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a00:	4b19      	ldr	r3, [pc, #100]	; (8005a68 <xTimerGenericCommand+0x94>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d02a      	beq.n	8005a5e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b05      	cmp	r3, #5
 8005a18:	dc18      	bgt.n	8005a4c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a1a:	f7ff fc97 	bl	800534c <xTaskGetSchedulerState>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d109      	bne.n	8005a38 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a24:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <xTimerGenericCommand+0x94>)
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	f107 0114 	add.w	r1, r7, #20
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a30:	f7fd ff3e 	bl	80038b0 <xQueueGenericSend>
 8005a34:	6278      	str	r0, [r7, #36]	; 0x24
 8005a36:	e012      	b.n	8005a5e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <xTimerGenericCommand+0x94>)
 8005a3a:	6818      	ldr	r0, [r3, #0]
 8005a3c:	f107 0114 	add.w	r1, r7, #20
 8005a40:	2300      	movs	r3, #0
 8005a42:	2200      	movs	r2, #0
 8005a44:	f7fd ff34 	bl	80038b0 <xQueueGenericSend>
 8005a48:	6278      	str	r0, [r7, #36]	; 0x24
 8005a4a:	e008      	b.n	8005a5e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a4c:	4b06      	ldr	r3, [pc, #24]	; (8005a68 <xTimerGenericCommand+0x94>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	f107 0114 	add.w	r1, r7, #20
 8005a54:	2300      	movs	r3, #0
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	f7fe f824 	bl	8003aa4 <xQueueGenericSendFromISR>
 8005a5c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3728      	adds	r7, #40	; 0x28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	20000178 	.word	0x20000178

08005a6c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a76:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <prvProcessExpiredTimer+0x94>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fd fe23 	bl	80036d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d021      	beq.n	8005adc <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	699a      	ldr	r2, [r3, #24]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	18d1      	adds	r1, r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	6978      	ldr	r0, [r7, #20]
 8005aa6:	f000 f8d1 	bl	8005c4c <prvInsertTimerInActiveList>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01e      	beq.n	8005aee <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	2100      	movs	r1, #0
 8005aba:	6978      	ldr	r0, [r7, #20]
 8005abc:	f7ff ff8a 	bl	80059d4 <xTimerGenericCommand>
 8005ac0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d112      	bne.n	8005aee <prvProcessExpiredTimer+0x82>
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	e7fe      	b.n	8005ada <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	6978      	ldr	r0, [r7, #20]
 8005af4:	4798      	blx	r3
}
 8005af6:	bf00      	nop
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000170 	.word	0x20000170

08005b04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b0c:	f107 0308 	add.w	r3, r7, #8
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 f857 	bl	8005bc4 <prvGetNextExpireTime>
 8005b16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f803 	bl	8005b28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b22:	f000 f8d5 	bl	8005cd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b26:	e7f1      	b.n	8005b0c <prvTimerTask+0x8>

08005b28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005b32:	f7ff f823 	bl	8004b7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b36:	f107 0308 	add.w	r3, r7, #8
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f866 	bl	8005c0c <prvSampleTimeNow>
 8005b40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d130      	bne.n	8005baa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <prvProcessTimerOrBlockTask+0x3c>
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d806      	bhi.n	8005b64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b56:	f7ff f81f 	bl	8004b98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b5a:	68f9      	ldr	r1, [r7, #12]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f7ff ff85 	bl	8005a6c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b62:	e024      	b.n	8005bae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b6a:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <prvProcessTimerOrBlockTask+0x90>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <prvProcessTimerOrBlockTask+0x50>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <prvProcessTimerOrBlockTask+0x52>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b7c:	4b0f      	ldr	r3, [pc, #60]	; (8005bbc <prvProcessTimerOrBlockTask+0x94>)
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	f7fe fa33 	bl	8003ff4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b8e:	f7ff f803 	bl	8004b98 <xTaskResumeAll>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b98:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <prvProcessTimerOrBlockTask+0x98>)
 8005b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	f3bf 8f6f 	isb	sy
}
 8005ba8:	e001      	b.n	8005bae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005baa:	f7fe fff5 	bl	8004b98 <xTaskResumeAll>
}
 8005bae:	bf00      	nop
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000174 	.word	0x20000174
 8005bbc:	20000178 	.word	0x20000178
 8005bc0:	e000ed04 	.word	0xe000ed04

08005bc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005bcc:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <prvGetNextExpireTime+0x44>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <prvGetNextExpireTime+0x16>
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	e000      	b.n	8005bdc <prvGetNextExpireTime+0x18>
 8005bda:	2200      	movs	r2, #0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d105      	bne.n	8005bf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005be8:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <prvGetNextExpireTime+0x44>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e001      	b.n	8005bf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	20000170 	.word	0x20000170

08005c0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c14:	f7ff f85c 	bl	8004cd0 <xTaskGetTickCount>
 8005c18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c1a:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <prvSampleTimeNow+0x3c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d205      	bcs.n	8005c30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c24:	f000 f918 	bl	8005e58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	e002      	b.n	8005c36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005c36:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <prvSampleTimeNow+0x3c>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	20000180 	.word	0x20000180

08005c4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	60f8      	str	r0, [r7, #12]
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	607a      	str	r2, [r7, #4]
 8005c58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d812      	bhi.n	8005c98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d302      	bcc.n	8005c86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c80:	2301      	movs	r3, #1
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e01b      	b.n	8005cbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c86:	4b10      	ldr	r3, [pc, #64]	; (8005cc8 <prvInsertTimerInActiveList+0x7c>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f7fd fce4 	bl	800365e <vListInsert>
 8005c96:	e012      	b.n	8005cbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d206      	bcs.n	8005cae <prvInsertTimerInActiveList+0x62>
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d302      	bcc.n	8005cae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e007      	b.n	8005cbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <prvInsertTimerInActiveList+0x80>)
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f7fd fcd0 	bl	800365e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005cbe:	697b      	ldr	r3, [r7, #20]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3718      	adds	r7, #24
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	20000174 	.word	0x20000174
 8005ccc:	20000170 	.word	0x20000170

08005cd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08c      	sub	sp, #48	; 0x30
 8005cd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005cd6:	e0ac      	b.n	8005e32 <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f2c0 80a8 	blt.w	8005e30 <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	3304      	adds	r3, #4
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fd fced 	bl	80036d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff ff87 	bl	8005c0c <prvSampleTimeNow>
 8005cfe:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b09      	cmp	r3, #9
 8005d04:	f200 8095 	bhi.w	8005e32 <prvProcessReceivedCommands+0x162>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <prvProcessReceivedCommands+0x40>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d39 	.word	0x08005d39
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d39 	.word	0x08005d39
 8005d1c:	08005dab 	.word	0x08005dab
 8005d20:	08005dbf 	.word	0x08005dbf
 8005d24:	08005e07 	.word	0x08005e07
 8005d28:	08005d39 	.word	0x08005d39
 8005d2c:	08005d39 	.word	0x08005d39
 8005d30:	08005dab 	.word	0x08005dab
 8005d34:	08005dbf 	.word	0x08005dbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	18d1      	adds	r1, r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6a3a      	ldr	r2, [r7, #32]
 8005d56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d58:	f7ff ff78 	bl	8005c4c <prvInsertTimerInActiveList>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d067      	beq.n	8005e32 <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d05c      	beq.n	8005e32 <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	441a      	add	r2, r3
 8005d80:	2300      	movs	r3, #0
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	2300      	movs	r3, #0
 8005d86:	2100      	movs	r1, #0
 8005d88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d8a:	f7ff fe23 	bl	80059d4 <xTimerGenericCommand>
 8005d8e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d14d      	bne.n	8005e32 <prvProcessReceivedCommands+0x162>
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	e7fe      	b.n	8005da8 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005db0:	f023 0301 	bic.w	r3, r3, #1
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005dbc:	e039      	b.n	8005e32 <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dc4:	f043 0301 	orr.w	r3, r3, #1
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d109      	bne.n	8005df2 <prvProcessReceivedCommands+0x122>
 8005dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de2:	f383 8811 	msr	BASEPRI, r3
 8005de6:	f3bf 8f6f 	isb	sy
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	617b      	str	r3, [r7, #20]
 8005df0:	e7fe      	b.n	8005df0 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	18d1      	adds	r1, r2, r3
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	6a3a      	ldr	r2, [r7, #32]
 8005dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e00:	f7ff ff24 	bl	8005c4c <prvInsertTimerInActiveList>
					break;
 8005e04:	e015      	b.n	8005e32 <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d103      	bne.n	8005e1c <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8005e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e16:	f000 fbbd 	bl	8006594 <vPortFree>
 8005e1a:	e00a      	b.n	8005e32 <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e2e:	e000      	b.n	8005e32 <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e32:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <prvProcessReceivedCommands+0x184>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f107 0108 	add.w	r1, r7, #8
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fd fec5 	bl	8003bcc <xQueueReceive>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f47f af47 	bne.w	8005cd8 <prvProcessReceivedCommands+0x8>
	}
}
 8005e4a:	bf00      	nop
 8005e4c:	3728      	adds	r7, #40	; 0x28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	20000178 	.word	0x20000178

08005e58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b088      	sub	sp, #32
 8005e5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e5e:	e047      	b.n	8005ef0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e60:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <prvSwitchTimerLists+0xc0>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e6a:	4b2b      	ldr	r3, [pc, #172]	; (8005f18 <prvSwitchTimerLists+0xc0>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3304      	adds	r3, #4
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fd fc29 	bl	80036d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d02d      	beq.n	8005ef0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	693a      	ldr	r2, [r7, #16]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d90e      	bls.n	8005ec4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eb2:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <prvSwitchTimerLists+0xc0>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f7fd fbce 	bl	800365e <vListInsert>
 8005ec2:	e015      	b.n	8005ef0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	2100      	movs	r1, #0
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff fd80 	bl	80059d4 <xTimerGenericCommand>
 8005ed4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d109      	bne.n	8005ef0 <prvSwitchTimerLists+0x98>
 8005edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	603b      	str	r3, [r7, #0]
 8005eee:	e7fe      	b.n	8005eee <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ef0:	4b09      	ldr	r3, [pc, #36]	; (8005f18 <prvSwitchTimerLists+0xc0>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1b2      	bne.n	8005e60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005efa:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <prvSwitchTimerLists+0xc0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005f00:	4b06      	ldr	r3, [pc, #24]	; (8005f1c <prvSwitchTimerLists+0xc4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <prvSwitchTimerLists+0xc0>)
 8005f06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f08:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <prvSwitchTimerLists+0xc4>)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	6013      	str	r3, [r2, #0]
}
 8005f0e:	bf00      	nop
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000170 	.word	0x20000170
 8005f1c:	20000174 	.word	0x20000174

08005f20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f24:	f000 f95a 	bl	80061dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f28:	4b12      	ldr	r3, [pc, #72]	; (8005f74 <prvCheckForValidListAndQueue+0x54>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11d      	bne.n	8005f6c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f30:	4811      	ldr	r0, [pc, #68]	; (8005f78 <prvCheckForValidListAndQueue+0x58>)
 8005f32:	f7fd fb43 	bl	80035bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f36:	4811      	ldr	r0, [pc, #68]	; (8005f7c <prvCheckForValidListAndQueue+0x5c>)
 8005f38:	f7fd fb40 	bl	80035bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f3c:	4b10      	ldr	r3, [pc, #64]	; (8005f80 <prvCheckForValidListAndQueue+0x60>)
 8005f3e:	4a0e      	ldr	r2, [pc, #56]	; (8005f78 <prvCheckForValidListAndQueue+0x58>)
 8005f40:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f42:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <prvCheckForValidListAndQueue+0x64>)
 8005f44:	4a0d      	ldr	r2, [pc, #52]	; (8005f7c <prvCheckForValidListAndQueue+0x5c>)
 8005f46:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005f48:	2200      	movs	r2, #0
 8005f4a:	210c      	movs	r1, #12
 8005f4c:	200a      	movs	r0, #10
 8005f4e:	f7fd fc51 	bl	80037f4 <xQueueGenericCreate>
 8005f52:	4602      	mov	r2, r0
 8005f54:	4b07      	ldr	r3, [pc, #28]	; (8005f74 <prvCheckForValidListAndQueue+0x54>)
 8005f56:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f58:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <prvCheckForValidListAndQueue+0x54>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f60:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <prvCheckForValidListAndQueue+0x54>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4908      	ldr	r1, [pc, #32]	; (8005f88 <prvCheckForValidListAndQueue+0x68>)
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7fe f81c 	bl	8003fa4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f6c:	f000 f964 	bl	8006238 <vPortExitCritical>
}
 8005f70:	bf00      	nop
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	20000178 	.word	0x20000178
 8005f78:	20000148 	.word	0x20000148
 8005f7c:	2000015c 	.word	0x2000015c
 8005f80:	20000170 	.word	0x20000170
 8005f84:	20000174 	.word	0x20000174
 8005f88:	080068a0 	.word	0x080068a0

08005f8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3b04      	subs	r3, #4
 8005f9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fa4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3b04      	subs	r3, #4
 8005faa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f023 0201 	bic.w	r2, r3, #1
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3b04      	subs	r3, #4
 8005fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fbc:	4a0c      	ldr	r2, [pc, #48]	; (8005ff0 <pxPortInitialiseStack+0x64>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3b14      	subs	r3, #20
 8005fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3b04      	subs	r3, #4
 8005fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f06f 0202 	mvn.w	r2, #2
 8005fda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3b20      	subs	r3, #32
 8005fe0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	08005ff5 	.word	0x08005ff5

08005ff4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ffe:	4b11      	ldr	r3, [pc, #68]	; (8006044 <prvTaskExitError+0x50>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006006:	d009      	beq.n	800601c <prvTaskExitError+0x28>
 8006008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800600c:	f383 8811 	msr	BASEPRI, r3
 8006010:	f3bf 8f6f 	isb	sy
 8006014:	f3bf 8f4f 	dsb	sy
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	e7fe      	b.n	800601a <prvTaskExitError+0x26>
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800602e:	bf00      	nop
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0fc      	beq.n	8006030 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006036:	bf00      	nop
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	20000014 	.word	0x20000014
	...

08006050 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006050:	4b07      	ldr	r3, [pc, #28]	; (8006070 <pxCurrentTCBConst2>)
 8006052:	6819      	ldr	r1, [r3, #0]
 8006054:	6808      	ldr	r0, [r1, #0]
 8006056:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605a:	f380 8809 	msr	PSP, r0
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f380 8811 	msr	BASEPRI, r0
 800606a:	4770      	bx	lr
 800606c:	f3af 8000 	nop.w

08006070 <pxCurrentTCBConst2>:
 8006070:	20000044 	.word	0x20000044
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop

08006078 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006078:	4808      	ldr	r0, [pc, #32]	; (800609c <prvPortStartFirstTask+0x24>)
 800607a:	6800      	ldr	r0, [r0, #0]
 800607c:	6800      	ldr	r0, [r0, #0]
 800607e:	f380 8808 	msr	MSP, r0
 8006082:	f04f 0000 	mov.w	r0, #0
 8006086:	f380 8814 	msr	CONTROL, r0
 800608a:	b662      	cpsie	i
 800608c:	b661      	cpsie	f
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	df00      	svc	0
 8006098:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800609a:	bf00      	nop
 800609c:	e000ed08 	.word	0xe000ed08

080060a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060a6:	4b44      	ldr	r3, [pc, #272]	; (80061b8 <xPortStartScheduler+0x118>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a44      	ldr	r2, [pc, #272]	; (80061bc <xPortStartScheduler+0x11c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d109      	bne.n	80060c4 <xPortStartScheduler+0x24>
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	e7fe      	b.n	80060c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060c4:	4b3c      	ldr	r3, [pc, #240]	; (80061b8 <xPortStartScheduler+0x118>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a3d      	ldr	r2, [pc, #244]	; (80061c0 <xPortStartScheduler+0x120>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d109      	bne.n	80060e2 <xPortStartScheduler+0x42>
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	e7fe      	b.n	80060e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060e2:	4b38      	ldr	r3, [pc, #224]	; (80061c4 <xPortStartScheduler+0x124>)
 80060e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	22ff      	movs	r2, #255	; 0xff
 80060f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006104:	b2da      	uxtb	r2, r3
 8006106:	4b30      	ldr	r3, [pc, #192]	; (80061c8 <xPortStartScheduler+0x128>)
 8006108:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800610a:	4b30      	ldr	r3, [pc, #192]	; (80061cc <xPortStartScheduler+0x12c>)
 800610c:	2207      	movs	r2, #7
 800610e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006110:	e009      	b.n	8006126 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006112:	4b2e      	ldr	r3, [pc, #184]	; (80061cc <xPortStartScheduler+0x12c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3b01      	subs	r3, #1
 8006118:	4a2c      	ldr	r2, [pc, #176]	; (80061cc <xPortStartScheduler+0x12c>)
 800611a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800611c:	78fb      	ldrb	r3, [r7, #3]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	b2db      	uxtb	r3, r3
 8006124:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b80      	cmp	r3, #128	; 0x80
 8006130:	d0ef      	beq.n	8006112 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006132:	4b26      	ldr	r3, [pc, #152]	; (80061cc <xPortStartScheduler+0x12c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1c3 0307 	rsb	r3, r3, #7
 800613a:	2b04      	cmp	r3, #4
 800613c:	d009      	beq.n	8006152 <xPortStartScheduler+0xb2>
 800613e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60bb      	str	r3, [r7, #8]
 8006150:	e7fe      	b.n	8006150 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006152:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <xPortStartScheduler+0x12c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	021b      	lsls	r3, r3, #8
 8006158:	4a1c      	ldr	r2, [pc, #112]	; (80061cc <xPortStartScheduler+0x12c>)
 800615a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800615c:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <xPortStartScheduler+0x12c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006164:	4a19      	ldr	r2, [pc, #100]	; (80061cc <xPortStartScheduler+0x12c>)
 8006166:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006170:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <xPortStartScheduler+0x130>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a16      	ldr	r2, [pc, #88]	; (80061d0 <xPortStartScheduler+0x130>)
 8006176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800617a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800617c:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <xPortStartScheduler+0x130>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <xPortStartScheduler+0x130>)
 8006182:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006186:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006188:	f000 f8d6 	bl	8006338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800618c:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <xPortStartScheduler+0x134>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006192:	f000 f8f5 	bl	8006380 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <xPortStartScheduler+0x138>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a0f      	ldr	r2, [pc, #60]	; (80061d8 <xPortStartScheduler+0x138>)
 800619c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061a2:	f7ff ff69 	bl	8006078 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061a6:	f7fe fe5b 	bl	8004e60 <vTaskSwitchContext>
	prvTaskExitError();
 80061aa:	f7ff ff23 	bl	8005ff4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	e000ed00 	.word	0xe000ed00
 80061bc:	410fc271 	.word	0x410fc271
 80061c0:	410fc270 	.word	0x410fc270
 80061c4:	e000e400 	.word	0xe000e400
 80061c8:	20000184 	.word	0x20000184
 80061cc:	20000188 	.word	0x20000188
 80061d0:	e000ed20 	.word	0xe000ed20
 80061d4:	20000014 	.word	0x20000014
 80061d8:	e000ef34 	.word	0xe000ef34

080061dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061f4:	4b0e      	ldr	r3, [pc, #56]	; (8006230 <vPortEnterCritical+0x54>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3301      	adds	r3, #1
 80061fa:	4a0d      	ldr	r2, [pc, #52]	; (8006230 <vPortEnterCritical+0x54>)
 80061fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <vPortEnterCritical+0x54>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d10e      	bne.n	8006224 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006206:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <vPortEnterCritical+0x58>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d009      	beq.n	8006224 <vPortEnterCritical+0x48>
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	603b      	str	r3, [r7, #0]
 8006222:	e7fe      	b.n	8006222 <vPortEnterCritical+0x46>
	}
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	20000014 	.word	0x20000014
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800623e:	4b11      	ldr	r3, [pc, #68]	; (8006284 <vPortExitCritical+0x4c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <vPortExitCritical+0x22>
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	607b      	str	r3, [r7, #4]
 8006258:	e7fe      	b.n	8006258 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <vPortExitCritical+0x4c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3b01      	subs	r3, #1
 8006260:	4a08      	ldr	r2, [pc, #32]	; (8006284 <vPortExitCritical+0x4c>)
 8006262:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006264:	4b07      	ldr	r3, [pc, #28]	; (8006284 <vPortExitCritical+0x4c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d104      	bne.n	8006276 <vPortExitCritical+0x3e>
 800626c:	2300      	movs	r3, #0
 800626e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000014 	.word	0x20000014
	...

08006290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006290:	f3ef 8009 	mrs	r0, PSP
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <pxCurrentTCBConst>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	f01e 0f10 	tst.w	lr, #16
 80062a0:	bf08      	it	eq
 80062a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062aa:	6010      	str	r0, [r2, #0]
 80062ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062b4:	f380 8811 	msr	BASEPRI, r0
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f7fe fdce 	bl	8004e60 <vTaskSwitchContext>
 80062c4:	f04f 0000 	mov.w	r0, #0
 80062c8:	f380 8811 	msr	BASEPRI, r0
 80062cc:	bc09      	pop	{r0, r3}
 80062ce:	6819      	ldr	r1, [r3, #0]
 80062d0:	6808      	ldr	r0, [r1, #0]
 80062d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d6:	f01e 0f10 	tst.w	lr, #16
 80062da:	bf08      	it	eq
 80062dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062e0:	f380 8809 	msr	PSP, r0
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w

080062f0 <pxCurrentTCBConst>:
 80062f0:	20000044 	.word	0x20000044
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop

080062f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006310:	f7fe fcee 	bl	8004cf0 <xTaskIncrementTick>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800631a:	4b06      	ldr	r3, [pc, #24]	; (8006334 <SysTick_Handler+0x3c>)
 800631c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	2300      	movs	r3, #0
 8006324:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <vPortSetupTimerInterrupt+0x34>)
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006342:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <vPortSetupTimerInterrupt+0x38>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <vPortSetupTimerInterrupt+0x3c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <vPortSetupTimerInterrupt+0x40>)
 800634e:	fba2 2303 	umull	r2, r3, r2, r3
 8006352:	099b      	lsrs	r3, r3, #6
 8006354:	4a09      	ldr	r2, [pc, #36]	; (800637c <vPortSetupTimerInterrupt+0x44>)
 8006356:	3b01      	subs	r3, #1
 8006358:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800635a:	4b04      	ldr	r3, [pc, #16]	; (800636c <vPortSetupTimerInterrupt+0x34>)
 800635c:	2207      	movs	r2, #7
 800635e:	601a      	str	r2, [r3, #0]
}
 8006360:	bf00      	nop
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	e000e010 	.word	0xe000e010
 8006370:	e000e018 	.word	0xe000e018
 8006374:	20000008 	.word	0x20000008
 8006378:	10624dd3 	.word	0x10624dd3
 800637c:	e000e014 	.word	0xe000e014

08006380 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006380:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006390 <vPortEnableVFP+0x10>
 8006384:	6801      	ldr	r1, [r0, #0]
 8006386:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800638a:	6001      	str	r1, [r0, #0]
 800638c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800638e:	bf00      	nop
 8006390:	e000ed88 	.word	0xe000ed88

08006394 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800639a:	f3ef 8305 	mrs	r3, IPSR
 800639e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b0f      	cmp	r3, #15
 80063a4:	d913      	bls.n	80063ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063a6:	4a16      	ldr	r2, [pc, #88]	; (8006400 <vPortValidateInterruptPriority+0x6c>)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063b0:	4b14      	ldr	r3, [pc, #80]	; (8006404 <vPortValidateInterruptPriority+0x70>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	7afa      	ldrb	r2, [r7, #11]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d209      	bcs.n	80063ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	607b      	str	r3, [r7, #4]
 80063cc:	e7fe      	b.n	80063cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063ce:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <vPortValidateInterruptPriority+0x74>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <vPortValidateInterruptPriority+0x78>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d909      	bls.n	80063f2 <vPortValidateInterruptPriority+0x5e>
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	e7fe      	b.n	80063f0 <vPortValidateInterruptPriority+0x5c>
	}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	e000e3f0 	.word	0xe000e3f0
 8006404:	20000184 	.word	0x20000184
 8006408:	e000ed0c 	.word	0xe000ed0c
 800640c:	20000188 	.word	0x20000188

08006410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08a      	sub	sp, #40	; 0x28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006418:	2300      	movs	r3, #0
 800641a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800641c:	f7fe fbae 	bl	8004b7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006420:	4b57      	ldr	r3, [pc, #348]	; (8006580 <pvPortMalloc+0x170>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006428:	f000 f90c 	bl	8006644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800642c:	4b55      	ldr	r3, [pc, #340]	; (8006584 <pvPortMalloc+0x174>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4013      	ands	r3, r2
 8006434:	2b00      	cmp	r3, #0
 8006436:	f040 808c 	bne.w	8006552 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d01c      	beq.n	800647a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006440:	2208      	movs	r2, #8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4413      	add	r3, r2
 8006446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	2b00      	cmp	r3, #0
 8006450:	d013      	beq.n	800647a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f023 0307 	bic.w	r3, r3, #7
 8006458:	3308      	adds	r3, #8
 800645a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f003 0307 	and.w	r3, r3, #7
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <pvPortMalloc+0x6a>
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e7fe      	b.n	8006478 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d068      	beq.n	8006552 <pvPortMalloc+0x142>
 8006480:	4b41      	ldr	r3, [pc, #260]	; (8006588 <pvPortMalloc+0x178>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d863      	bhi.n	8006552 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800648a:	4b40      	ldr	r3, [pc, #256]	; (800658c <pvPortMalloc+0x17c>)
 800648c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800648e:	4b3f      	ldr	r3, [pc, #252]	; (800658c <pvPortMalloc+0x17c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006494:	e004      	b.n	80064a0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d903      	bls.n	80064b2 <pvPortMalloc+0xa2>
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f1      	bne.n	8006496 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064b2:	4b33      	ldr	r3, [pc, #204]	; (8006580 <pvPortMalloc+0x170>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d04a      	beq.n	8006552 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2208      	movs	r2, #8
 80064c2:	4413      	add	r3, r2
 80064c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	6a3b      	ldr	r3, [r7, #32]
 80064cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	1ad2      	subs	r2, r2, r3
 80064d6:	2308      	movs	r3, #8
 80064d8:	005b      	lsls	r3, r3, #1
 80064da:	429a      	cmp	r2, r3
 80064dc:	d91e      	bls.n	800651c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d009      	beq.n	8006504 <pvPortMalloc+0xf4>
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	613b      	str	r3, [r7, #16]
 8006502:	e7fe      	b.n	8006502 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	1ad2      	subs	r2, r2, r3
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006516:	69b8      	ldr	r0, [r7, #24]
 8006518:	f000 f8f6 	bl	8006708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800651c:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <pvPortMalloc+0x178>)
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	4a18      	ldr	r2, [pc, #96]	; (8006588 <pvPortMalloc+0x178>)
 8006528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800652a:	4b17      	ldr	r3, [pc, #92]	; (8006588 <pvPortMalloc+0x178>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b18      	ldr	r3, [pc, #96]	; (8006590 <pvPortMalloc+0x180>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	429a      	cmp	r2, r3
 8006534:	d203      	bcs.n	800653e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <pvPortMalloc+0x178>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a15      	ldr	r2, [pc, #84]	; (8006590 <pvPortMalloc+0x180>)
 800653c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	4b10      	ldr	r3, [pc, #64]	; (8006584 <pvPortMalloc+0x174>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	431a      	orrs	r2, r3
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006552:	f7fe fb21 	bl	8004b98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	2b00      	cmp	r3, #0
 800655e:	d009      	beq.n	8006574 <pvPortMalloc+0x164>
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	e7fe      	b.n	8006572 <pvPortMalloc+0x162>
	return pvReturn;
 8006574:	69fb      	ldr	r3, [r7, #28]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3728      	adds	r7, #40	; 0x28
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20012d94 	.word	0x20012d94
 8006584:	20012da0 	.word	0x20012da0
 8006588:	20012d98 	.word	0x20012d98
 800658c:	20012d8c 	.word	0x20012d8c
 8006590:	20012d9c 	.word	0x20012d9c

08006594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d046      	beq.n	8006634 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065a6:	2308      	movs	r3, #8
 80065a8:	425b      	negs	r3, r3
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4413      	add	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	4b20      	ldr	r3, [pc, #128]	; (800663c <vPortFree+0xa8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <vPortFree+0x42>
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60fb      	str	r3, [r7, #12]
 80065d4:	e7fe      	b.n	80065d4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d009      	beq.n	80065f2 <vPortFree+0x5e>
 80065de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	60bb      	str	r3, [r7, #8]
 80065f0:	e7fe      	b.n	80065f0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	4b11      	ldr	r3, [pc, #68]	; (800663c <vPortFree+0xa8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4013      	ands	r3, r2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d019      	beq.n	8006634 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d115      	bne.n	8006634 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <vPortFree+0xa8>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	43db      	mvns	r3, r3
 8006612:	401a      	ands	r2, r3
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006618:	f7fe fab0 	bl	8004b7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <vPortFree+0xac>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4413      	add	r3, r2
 8006626:	4a06      	ldr	r2, [pc, #24]	; (8006640 <vPortFree+0xac>)
 8006628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800662a:	6938      	ldr	r0, [r7, #16]
 800662c:	f000 f86c 	bl	8006708 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006630:	f7fe fab2 	bl	8004b98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006634:	bf00      	nop
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20012da0 	.word	0x20012da0
 8006640:	20012d98 	.word	0x20012d98

08006644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006644:	b480      	push	{r7}
 8006646:	b085      	sub	sp, #20
 8006648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800664a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800664e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006650:	4b27      	ldr	r3, [pc, #156]	; (80066f0 <prvHeapInit+0xac>)
 8006652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3307      	adds	r3, #7
 8006662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0307 	bic.w	r3, r3, #7
 800666a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	4a1f      	ldr	r2, [pc, #124]	; (80066f0 <prvHeapInit+0xac>)
 8006674:	4413      	add	r3, r2
 8006676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800667c:	4a1d      	ldr	r2, [pc, #116]	; (80066f4 <prvHeapInit+0xb0>)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <prvHeapInit+0xb0>)
 8006684:	2200      	movs	r2, #0
 8006686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	4413      	add	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006690:	2208      	movs	r2, #8
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	1a9b      	subs	r3, r3, r2
 8006696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <prvHeapInit+0xb4>)
 80066a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066a6:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <prvHeapInit+0xb4>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066ae:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <prvHeapInit+0xb4>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2200      	movs	r2, #0
 80066b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80066c4:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <prvHeapInit+0xb4>)
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	4a0a      	ldr	r2, [pc, #40]	; (80066fc <prvHeapInit+0xb8>)
 80066d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4a09      	ldr	r2, [pc, #36]	; (8006700 <prvHeapInit+0xbc>)
 80066da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <prvHeapInit+0xc0>)
 80066de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80066e2:	601a      	str	r2, [r3, #0]
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	2000018c 	.word	0x2000018c
 80066f4:	20012d8c 	.word	0x20012d8c
 80066f8:	20012d94 	.word	0x20012d94
 80066fc:	20012d9c 	.word	0x20012d9c
 8006700:	20012d98 	.word	0x20012d98
 8006704:	20012da0 	.word	0x20012da0

08006708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006710:	4b28      	ldr	r3, [pc, #160]	; (80067b4 <prvInsertBlockIntoFreeList+0xac>)
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e002      	b.n	800671c <prvInsertBlockIntoFreeList+0x14>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	429a      	cmp	r2, r3
 8006724:	d8f7      	bhi.n	8006716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4413      	add	r3, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d108      	bne.n	800674a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	441a      	add	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	441a      	add	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d118      	bne.n	8006790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d00d      	beq.n	8006786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	441a      	add	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	e008      	b.n	8006798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006786:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	e003      	b.n	8006798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	429a      	cmp	r2, r3
 800679e:	d002      	beq.n	80067a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	20012d8c 	.word	0x20012d8c
 80067b8:	20012d94 	.word	0x20012d94

080067bc <__libc_init_array>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	4e0d      	ldr	r6, [pc, #52]	; (80067f4 <__libc_init_array+0x38>)
 80067c0:	4c0d      	ldr	r4, [pc, #52]	; (80067f8 <__libc_init_array+0x3c>)
 80067c2:	1ba4      	subs	r4, r4, r6
 80067c4:	10a4      	asrs	r4, r4, #2
 80067c6:	2500      	movs	r5, #0
 80067c8:	42a5      	cmp	r5, r4
 80067ca:	d109      	bne.n	80067e0 <__libc_init_array+0x24>
 80067cc:	4e0b      	ldr	r6, [pc, #44]	; (80067fc <__libc_init_array+0x40>)
 80067ce:	4c0c      	ldr	r4, [pc, #48]	; (8006800 <__libc_init_array+0x44>)
 80067d0:	f000 f82c 	bl	800682c <_init>
 80067d4:	1ba4      	subs	r4, r4, r6
 80067d6:	10a4      	asrs	r4, r4, #2
 80067d8:	2500      	movs	r5, #0
 80067da:	42a5      	cmp	r5, r4
 80067dc:	d105      	bne.n	80067ea <__libc_init_array+0x2e>
 80067de:	bd70      	pop	{r4, r5, r6, pc}
 80067e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067e4:	4798      	blx	r3
 80067e6:	3501      	adds	r5, #1
 80067e8:	e7ee      	b.n	80067c8 <__libc_init_array+0xc>
 80067ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067ee:	4798      	blx	r3
 80067f0:	3501      	adds	r5, #1
 80067f2:	e7f2      	b.n	80067da <__libc_init_array+0x1e>
 80067f4:	080068c8 	.word	0x080068c8
 80067f8:	080068c8 	.word	0x080068c8
 80067fc:	080068c8 	.word	0x080068c8
 8006800:	080068cc 	.word	0x080068cc

08006804 <memcpy>:
 8006804:	b510      	push	{r4, lr}
 8006806:	1e43      	subs	r3, r0, #1
 8006808:	440a      	add	r2, r1
 800680a:	4291      	cmp	r1, r2
 800680c:	d100      	bne.n	8006810 <memcpy+0xc>
 800680e:	bd10      	pop	{r4, pc}
 8006810:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006814:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006818:	e7f7      	b.n	800680a <memcpy+0x6>

0800681a <memset>:
 800681a:	4402      	add	r2, r0
 800681c:	4603      	mov	r3, r0
 800681e:	4293      	cmp	r3, r2
 8006820:	d100      	bne.n	8006824 <memset+0xa>
 8006822:	4770      	bx	lr
 8006824:	f803 1b01 	strb.w	r1, [r3], #1
 8006828:	e7f9      	b.n	800681e <memset+0x4>
	...

0800682c <_init>:
 800682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682e:	bf00      	nop
 8006830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006832:	bc08      	pop	{r3}
 8006834:	469e      	mov	lr, r3
 8006836:	4770      	bx	lr

08006838 <_fini>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr
